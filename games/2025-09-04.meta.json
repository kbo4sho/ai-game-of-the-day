{
  "generated_date": "2025-09-04",
  "generated_timestamp": "2025-09-04T00:25:21.121442",
  "model": "gpt-5-mini",
  "theme": "machines",
  "prompt": "You are an expert educational game designer. You will generate a fun, playable math game in JavaScript for children ages 7 to 9, focused on foundational concepts presented in a way that is engaging and fun. Today's theme: machines\n\nThe game must:\n\u2022 Be beatable.\n\u2022 Use visually calming and interesting and wacky elements.\n\u2022 Include sound, using the Web Audio API for correct/incorrect feedback, gentle background effects, or interactions. Use an audio context.\n\u2022 Render entirely inside the existing HTML element with ID game-of-the-day-stage. You may create a canvas element inside it .\n\u2022 Have a game area exactly 720px wide by 480px tall.\n\u2022 Be written in clean, readable JavaScript with proper formatting, indentation, and comments.\n\u2022 Use modern JavaScript practices and avoid minification.\n\u2022 Include proper error handling for audio and resource loading.\n\u2022 Be accessible: include keyboard controls, text alternatives, visual cues for audio, clear instructions, and error handling.\n\u2022 Use ONLY canvas-drawn graphics or 3js and Web Audio API - NO external image URLs, NO external audio files, NO external dependencies.\n\u2022 Create all visual elements using canvas drawing methods (rect, arc, fillText, etc.) or 3js.\n\u2022 Generate all sounds using Web Audio API oscillators and filters.\n\u2022 Include proper error handling for audio context creation.\n\u2022 Output only JavaScript code. No extra explanation, no markdown formatting, no code blocks, no HTML, no CSS.\n\u2022 Do not wrap the code in ```javascript or any other markdown formatting.",
  "response_tokens": 8517,
  "game_filename": "2025-09-04.js",
  "game_size_bytes": 25214,
  "functionality": {
    "score": 8,
    "max_score": 8,
    "percentage": 100.0,
    "passing": true,
    "issues": [],
    "warnings": []
  },
  "dependencies": {
    "has_external_deps": false,
    "issues": [],
    "warnings": [],
    "canvas_methods_used": 5
  },
  "improved_visuals_audio": true,
  "improve_prompt": "You are an expert educational game designer. \nTake the following JavaScript game code and improve ONLY the visuals and audio. \nDo not change the game mechanics or math logic. \nEnhance the visual appeal (colors, animations, backgrounds, characters), avoid overstimulation with sounds and visuals, and add or improve sound effects and background audio. \nRender entirely inside the existing HTML element with ID game-of-the-day-stage. You may create a canvas element inside it (do not include angle brackets in text instructions).\nHave a game area exactly 720px wide by 480px tall.\nBe written in clean, readable JavaScript with proper formatting, indentation, and comments.\nUse modern JavaScript practices and avoid minification.\nInclude proper error handling for audio and resource loading.\nUse ONLY canvas-drawn graphics and Web Audio API - NO external image URLs, NO external audio files, NO external dependencies.\nCreate all visual elements using canvas drawing methods (rect, arc, fillText, etc.).\nGenerate all sounds using Web Audio API oscillators and filters.\nInclude proper error handling for audio context creation.\nOutput only JavaScript code. No extra explanation, no markdown formatting, no code blocks.\nDo not wrap the code in ```javascript or any other markdown formatting.\n\n---\n(function() {\n  // Machine Math \u2014 Canvas game for ages 7-9\n  // Renders inside element with id \"game-of-the-day-stage\"\n  // All visuals drawn on canvas. All sounds via Web Audio API.\n  // Accessible: keyboard controls, aria live updates, speaker toggle, clear instructions.\n\n  // ---- Config ----\n  const WIDTH = 720;\n  const HEIGHT = 480;\n  const TOTAL_ROUNDS = 8;\n  const MAX_TRIES_PER_ROUND = 4;\n\n  // Calming palette, with a few wacky accent colors\n  const COLORS = {\n    bg: '#E9F3F6',\n    machine: '#D1E8E2',\n    accent: '#6A8AA6',\n    bolt: '#F2B134',\n    text: '#16324F',\n    panel: '#8FC1A9',\n    shadow: 'rgba(0,0,0,0.12)',\n    wrong: '#FF6B6B',\n    correct: '#4CAF50'\n  };\n\n  // Utility: clamp value\n  const clamp = (v, a, b) => Math.max(a, Math.min(b, v));\n\n  // DOM references and canvas\n  const container = document.getElementById('game-of-the-day-stage');\n  if (!container) {\n    console.error('Container element #game-of-the-day-stage not found.');\n    return;\n  }\n\n  // Clear container and set up canvas\n  container.innerHTML = '';\n  container.style.position = 'relative';\n  container.style.userSelect = 'none';\n\n  const canvas = document.createElement('canvas');\n  canvas.width = WIDTH;\n  canvas.height = HEIGHT;\n  canvas.setAttribute('role', 'img');\n  canvas.setAttribute('aria-label', 'Math machine game canvas');\n  canvas.style.width = WIDTH + 'px';\n  canvas.style.height = HEIGHT + 'px';\n  container.appendChild(canvas);\n  const ctx = canvas.getContext('2d', { alpha: false });\n\n  // Accessibility: live region for screen readers\n  const live = document.createElement('div');\n  live.setAttribute('aria-live', 'polite');\n  live.setAttribute('role', 'status');\n  live.style.position = 'absolute';\n  live.style.left = '-9999px';\n  live.style.width = '1px';\n  live.style.height = '1px';\n  live.style.overflow = 'hidden';\n  container.appendChild(live);\n\n  // Audio: Web Audio API setup with error handling\n  let audioCtx = null;\n  let audioAllowed = false; // user must enable to start sound\n  let bgGain = null;\n  let bgOsc = null;\n\n  function initAudioContext() {\n    if (audioCtx) return;\n    try {\n      const AudioCtx = window.AudioContext || window.webkitAudioContext;\n      if (!AudioCtx) throw new Error('Web Audio API not supported on this browser.');\n      audioCtx = new AudioCtx();\n      // Create gentle background hum\n      bgOsc = audioCtx.createOscillator();\n      const lowLFO = audioCtx.createOscillator();\n      const lfoGain = audioCtx.createGain();\n      bgGain = audioCtx.createGain();\n\n      bgOsc.type = 'sine';\n      bgOsc.frequency.value = 80; // base hum\n      lowLFO.type = 'sine';\n      lowLFO.frequency.value = 0.25; // slow wobble\n      lfoGain.gain.value = 8;\n      bgGain.gain.value = 0; // start muted until enabled\n\n      lowLFO.connect(lfoGain);\n      lfoGain.connect(bgOsc.frequency);\n      bgOsc.connect(bgGain);\n      bgGain.connect(audioCtx.destination);\n\n      lowLFO.start();\n      bgOsc.start();\n    } catch (e) {\n      console.error('Audio context init failed:', e);\n      audioCtx = null;\n    }\n  }\n\n  function tryEnableAudio() {\n    try {\n      initAudioContext();\n      if (!audioCtx) return false;\n      // Many browsers require a user interaction to resume\n      if (audioCtx.state === 'suspended') {\n        audioCtx.resume().catch(err => {\n          console.warn('Could not resume audio context:', err);\n        });\n      }\n      audioAllowed = true;\n      if (bgGain) {\n        // ramp up gently\n        try {\n          bgGain.gain.cancelScheduledValues(audioCtx.currentTime);\n          bgGain.gain.setValueAtTime(bgGain.gain.value, audioCtx.currentTime);\n          bgGain.gain.linearRampToValueAtTime(0.06, audioCtx.currentTime + 0.8);\n        } catch (e) {\n          // ignore scheduling errors\n          bgGain.gain.value = 0.06;\n        }\n      }\n      announceForA11y('Sound enabled.');\n      return true;\n    } catch (e) {\n      console.error('Error enabling audio:', e);\n      return false;\n    }\n  }\n\n  function toggleAudio() {\n    if (!audioCtx) {\n      tryEnableAudio();\n      return;\n    }\n    if (!audioAllowed) {\n      tryEnableAudio();\n      return;\n    }\n    // Toggle off\n    if (bgGain && audioAllowed) {\n      try {\n        bgGain.gain.cancelScheduledValues(audioCtx.currentTime);\n        bgGain.gain.setValueAtTime(bgGain.gain.value, audioCtx.currentTime);\n        const newVal = bgGain.gain.value > 0.01 ? 0 : 0.06;\n        bgGain.gain.linearRampToValueAtTime(newVal, audioCtx.currentTime + 0.5);\n        audioAllowed = newVal > 0.01;\n        announceForA11y(audioAllowed ? 'Sound enabled.' : 'Sound muted.');\n      } catch (e) {\n        console.warn('Error toggling audio:', e);\n      }\n    }\n  }\n\n  // Play success chime: sequence of notes\n  function playSuccess() {\n    if (!audioCtx || !audioAllowed) return;\n    try {\n      const now = audioCtx.currentTime;\n      const g = audioCtx.createGain();\n      g.connect(audioCtx.destination);\n      g.gain.setValueAtTime(0.001, now);\n      g.gain.exponentialRampToValueAtTime(0.06, now + 0.02);\n\n      const notes = [880, 1100, 1320]; // happy ascending\n      notes.forEach((freq, i) => {\n        const o = audioCtx.createOscillator();\n        o.type = 'sine';\n        o.frequency.value = freq;\n        o.connect(g);\n        o.start(now + i * 0.08);\n        o.stop(now + i * 0.08 + 0.18);\n      });\n\n      // fade out\n      g.gain.exponentialRampToValueAtTime(0.001, now + 0.6);\n      setTimeout(() => {\n        g.disconnect();\n      }, 700);\n    } catch (e) {\n      console.warn('playSuccess error', e);\n    }\n  }\n\n  // Play wrong buzz\n  function playWrong() {\n    if (!audioCtx || !audioAllowed) return;\n    try {\n      const now = audioCtx.currentTime;\n      const o = audioCtx.createOscillator();\n      const g = audioCtx.createGain();\n      const f = audioCtx.createBiquadFilter();\n      o.type = 'sawtooth';\n      o.frequency.value = 180;\n      f.type = 'lowpass';\n      f.frequency.value = 900;\n      g.gain.setValueAtTime(0.001, now);\n      g.gain.exponentialRampToValueAtTime(0.08, now + 0.01);\n      g.gain.exponentialRampToValueAtTime(0.001, now + 0.25);\n      o.connect(f);\n      f.connect(g);\n      g.connect(audioCtx.destination);\n      o.start(now);\n      o.frequency.setValueAtTime(180, now);\n      o.frequency.exponentialRampToValueAtTime(60, now + 0.18);\n      o.stop(now + 0.28);\n      setTimeout(() => {\n        g.disconnect();\n        f.disconnect();\n      }, 400);\n    } catch (e) {\n      console.warn('playWrong error', e);\n    }\n  }\n\n  // Announce messages to live region for screen readers\n  function announceForA11y(text) {\n    if (!live) return;\n    live.textContent = '';\n    setTimeout(() => (live.textContent = text), 50);\n  }\n\n  // Game logic\n  class Round {\n    constructor(index) {\n      this.index = index;\n      const problem = Round.generateProblem(index);\n      this.a = problem.a;\n      this.b = problem.b;\n      this.op = problem.op; // '+' or '-'\n      this.answer = problem.a + (this.op === '+' ? problem.b : -problem.b);\n      this.maxTries = MAX_TRIES_PER_ROUND;\n    }\n\n    static generateProblem(index) {\n      // Progressive difficulty: start simple, then larger numbers\n      // index: 0..TOTAL_ROUNDS-1\n      const difficulty = 1 + Math.floor(index / 3); // 1..3\n      const max = 5 + difficulty * 3; // increases\n      const a = Math.floor(Math.random() * (max - 1)) + 1;\n      const op = Math.random() < 0.6 || index < 2 ? '+' : '-';\n      let b = Math.floor(Math.random() * (Math.min(9, max))) + 1;\n      if (op === '-' && b > a) {\n        // ensure non-negative result to be kid-friendly\n        b = Math.floor(Math.random() * a) + 1;\n      }\n      return { a, b, op };\n    }\n  }\n\n  class Game {\n    constructor() {\n      this.roundIndex = 0;\n      this.round = new Round(0);\n      this.currentInput = 0;\n      this.score = 0;\n      this.triesUsed = 0;\n      this.isAnimating = false;\n      this.finish = false;\n      this.speakerVisible = true;\n      this.audioAllowed = audioAllowed;\n      this.lastOutcome = null; // 'correct' or 'wrong' or null\n      this.animationTimer = 0;\n      this.gearAngle = 0;\n      this.goalBoltCount = Math.abs(this.round.answer);\n      this.boltsEjected = 0;\n      this.hintsUsed = 0;\n      this.maxHints = 2;\n      this.flashTimer = 0;\n      this.updateRoundText();\n    }\n\n    updateRoundText() {\n      announceForA11y(\n        `Round ${this.roundIndex + 1}. Problem: ${this.round.a} ${this.round.op} ${\n          this.round.b\n        }. Use left and right arrows to change your answer. Press Enter to submit.`\n      );\n    }\n\n    nextRound() {\n      this.roundIndex++;\n      if (this.roundIndex >= TOTAL_ROUNDS) {\n        this.finish = true;\n        announceForA11y('All rounds complete. Well done!');\n        return;\n      }\n      this.round = new Round(this.roundIndex);\n      this.currentInput = 0;\n      this.triesUsed = 0;\n      this.lastOutcome = null;\n      this.goalBoltCount = Math.abs(this.round.answer);\n      this.boltsEjected = 0;\n      this.hintsUsed = 0;\n      this.flashTimer = 0;\n      this.isAnimating = false;\n      this.updateRoundText();\n    }\n\n    submitAnswer() {\n      if (this.isAnimating || this.finish) return;\n      this.triesUsed++;\n      const correct = this.currentInput === this.round.answer;\n      if (correct) {\n        this.score++;\n        this.lastOutcome = 'correct';\n        this.isAnimating = true;\n        this.animationTimer = 0;\n        playSuccess();\n        announceForA11y('Correct! Great job!');\n      } else {\n        playWrong();\n        this.lastOutcome = 'wrong';\n        this.flashTimer = 18;\n        if (this.triesUsed >= this.round.maxTries) {\n          // reveal answer and move on after short pause\n          announceForA11y(\n            `That's not right. The correct answer was ${this.round.answer}. Moving to next round.`\n          );\n          this.isAnimating = true;\n          this.animationTimer = 0;\n          // mark as incorrect but still proceed so game stays beatable\n          setTimeout(() => {\n            this.nextRound();\n          }, 1200);\n        } else {\n          announceForA11y('Try again.');\n        }\n      }\n    }\n\n    useHint() {\n      if (this.hintsUsed >= this.maxHints || this.isAnimating) return;\n      this.hintsUsed++;\n      // simple hint: show one addend or say result range\n      let hintText = '';\n      if (this.round.op === '+') {\n        hintText = `Hint: ${this.round.a} plus ${this.round.b} equals ${this.round.a + this.round.b}.`;\n      } else {\n        hintText = `Hint: ${this.round.a} minus ${this.round.b} equals ${this.round.a - this.round.b}.`;\n      }\n      announceForA11y(hintText);\n      // subtle sound feedback\n      if (audioAllowed) {\n        try {\n          const now = audioCtx.currentTime;\n          const o = audioCtx.createOscillator();\n          const g = audioCtx.createGain();\n          o.type = 'triangle';\n          o.frequency.value = 300;\n          g.gain.setValueAtTime(0.001, now);\n          g.gain.exponentialRampToValueAtTime(0.02, now + 0.02);\n          g.gain.exponentialRampToValueAtTime(0.001, now + 0.3);\n          o.connect(g);\n          g.connect(audioCtx.destination);\n          o.start(now);\n          o.stop(now + 0.33);\n          setTimeout(() => {\n            g.disconnect();\n          }, 400);\n        } catch (e) {\n          // ignore\n        }\n      }\n    }\n  }\n\n  const game = new Game();\n\n  // Input handling\n  function adjustInput(delta) {\n    if (game.isAnimating || game.finish) return;\n    // allow negative answers for subtraction but clamp reasonable range\n    const min = -20;\n    const max = 20;\n    game.currentInput = clamp(game.currentInput + delta, min, max);\n    announceForA11y(`Answer now ${game.currentInput}`);\n  }\n\n  // Pointer (mouse/touch) handling - map clicks to +/- and submit/hint/sound\n  canvas.addEventListener('pointerdown', e => {\n    const rect = canvas.getBoundingClientRect();\n    const x = (e.clientX - rect.left) * (canvas.width / rect.width);\n    const y = (e.clientY - rect.top) * (canvas.height / rect.height);\n    handlePointer(x, y);\n    // ensure audio can be enabled on first user gesture\n    if (!audioAllowed) {\n      tryEnableAudio();\n    }\n  });\n\n  function handlePointer(x, y) {\n    // Define regions by drawing layout knowledge. Left side +/-, center machine, right panel buttons.\n    // +/- area:\n    if (x < 160 && y > 220 && y < 420) {\n      // up/down style areas\n      if (y < 320) adjustInput(1);\n      else adjustInput(-1);\n      return;\n    }\n    // Submit button region (right panel)\n    if (x > 520 && x < 700 && y > 320 && y < 372) {\n      game.submitAnswer();\n      return;\n    }\n    // Hint button\n    if (x > 520 && x < 700 && y > 200 && y < 250) {\n      game.useHint();\n      return;\n    }\n    // Speaker icon toggle top-right\n    if (x > 660 && y < 40) {\n      toggleAudio();\n      return;\n    }\n    // Clicking on bolt loader increases or decreases by 1 depending left/right\n    if (x > 200 && x < 520 && y > 150 && y < 330) {\n      // left half decrease, right half increase\n      if (x < (200 + 520) / 2) adjustInput(-1);\n      else adjustInput(1);\n      return;\n    }\n  }\n\n  // Keyboard controls\n  window.addEventListener('keydown', e => {\n    if (e.altKey || e.metaKey) return;\n    if (game.finish && e.key === 'Enter') {\n      // restart game\n      restartGame();\n      return;\n    }\n    switch (e.key) {\n      case 'ArrowLeft':\n        adjustInput(-1);\n        e.preventDefault();\n        break;\n      case 'ArrowRight':\n        adjustInput(1);\n        e.preventDefault();\n        break;\n      case 'Enter':\n        game.submitAnswer();\n        e.preventDefault();\n        break;\n      case 'h':\n      case 'H':\n        game.useHint();\n        e.preventDefault();\n        break;\n      case 'm':\n      case 'M':\n        toggleAudio();\n        e.preventDefault();\n        break;\n      default:\n        // Accept number keys to set input directly (including minus)\n        if (/^[0-9]$/.test(e.key)) {\n          const digit = Number(e.key);\n          // Replace input with typed digit, or append if quick press?\n          // For simplicity, set input to digit\n          game.currentInput = digit;\n          announceForA11y(`Answer set to ${game.currentInput}`);\n        } else if (e.key === '-') {\n          game.currentInput = -Math.abs(game.currentInput || 0);\n          announceForA11y(`Answer set to ${game.currentInput}`);\n        }\n    }\n    // allow enabling audio with any keyboard gesture\n    if (!audioAllowed) {\n      tryEnableAudio();\n    }\n  });\n\n  function restartGame() {\n    // Reset game state\n    Object.assign(game, new Game());\n  }\n\n  // Drawing utilities\n  function roundRect(ctx, x, y, w, h, r) {\n    ctx.beginPath();\n    ctx.moveTo(x + r, y);\n    ctx.arcTo(x + w, y, x + w, y + h, r);\n    ctx.arcTo(x + w, y + h, x, y + h, r);\n    ctx.arcTo(x, y + h, x, y, r);\n    ctx.arcTo(x, y, x + w, y, r);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  function drawGear(ctx, cx, cy, radius, teeth, angle, color, innerRadius = null) {\n    ctx.save();\n    ctx.translate(cx, cy);\n    ctx.rotate(angle);\n    ctx.fillStyle = color;\n    ctx.beginPath();\n    const spikes = teeth * 2;\n    const r0 = innerRadius || radius * 0.6;\n    for (let i = 0; i < spikes; i++) {\n      const a = (i / spikes) * Math.PI * 2;\n      const r = i % 2 === 0 ? radius : r0;\n      const x = Math.cos(a) * r;\n      const y = Math.sin(a) * r;\n      if (i === 0) ctx.moveTo(x, y);\n      else ctx.lineTo(x, y);\n    }\n    ctx.closePath();\n    ctx.fill();\n    // center hole\n    ctx.fillStyle = COLORS.shadow;\n    ctx.beginPath();\n    ctx.arc(0, 0, radius * 0.25, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.restore();\n  }\n\n  // Draw everything\n  function render() {\n    // background\n    ctx.fillStyle = COLORS.bg;\n    ctx.fillRect(0, 0, WIDTH, HEIGHT);\n\n    // top panel with title and speaker\n    ctx.fillStyle = COLORS.panel;\n    roundRect(ctx, 12, 12, WIDTH - 24, 72, 14);\n    ctx.fillStyle = COLORS.text;\n    ctx.font = 'bold 22px sans-serif';\n    ctx.fillText('Machine Math: Fix the Wacky Machines!', 32, 46);\n    ctx.font = '14px sans-serif';\n    ctx.fillStyle = '#2B4B56';\n    ctx.fillText('Theme: Machines \u2014 Solve the problem, feed the machine correct bolts!', 32, 66);\n\n    // speaker icon visual\n    drawSpeaker(660, 26);\n\n    // left control panel: plus/minus big buttons\n    ctx.fillStyle = COLORS.machine;\n    roundRect(ctx, 16, 220, 144, 198, 12);\n    ctx.fillStyle = '#123';\n    ctx.font = 'bold 20px sans-serif';\n    ctx.fillText('Adjust', 36, 252);\n    // plus area\n    ctx.fillStyle = '#F8FBFB';\n    roundRect(ctx, 28, 280, 120, 60, 10);\n    ctx.fillStyle = COLORS.accent;\n    ctx.fillRect(32, 290, 44, 40);\n    ctx.fillStyle = COLORS.panel;\n    ctx.fillRect(84, 290, 44, 40);\n    // plus/minus text\n    ctx.fillStyle = '#fff';\n    ctx.font = '28px sans-serif';\n    ctx.fillText('+', 46, 320);\n    ctx.fillText('-', 98, 320);\n    ctx.font = '14px sans-serif';\n    ctx.fillStyle = '#123';\n    ctx.fillText('Top area adds, bottom subtracts', 26, 365);\n\n    // machine body center\n    drawMachineBody();\n\n    // right control panel\n    ctx.fillStyle = COLORS.machine;\n    roundRect(ctx, 520, 120, 184, 280, 12);\n    ctx.fillStyle = '#123';\n    ctx.font = 'bold 18px sans-serif';\n    ctx.fillText('Controls', 548, 150);\n\n    // Hint button\n    ctx.fillStyle = '#F0F6F6';\n    roundRect(ctx, 538, 185, 150, 42, 8);\n    ctx.fillStyle = COLORS.accent;\n    ctx.font = '16px sans-serif';\n    ctx.fillText('Hint (H key)', 572, 212);\n    // hint availability\n    ctx.font = '12px sans-serif';\n    ctx.fillStyle = '#345';\n    ctx.fillText(`Hints used: ${game.hintsUsed}/${game.maxHints}`, 548, 235);\n\n    // Submit button\n    ctx.fillStyle = game.isAnimating ? '#DDD' : '#FFF';\n    roundRect(ctx, 538, 320, 150, 42, 8);\n    ctx.fillStyle = game.isAnimating ? '#9AA' : COLORS.bolt;\n    ctx.fillRect(568, 330, 90, 24);\n    ctx.fillStyle = '#123';\n    ctx.font = '16px sans-serif';\n    ctx.fillText('Submit (Enter)', 568, 347);\n\n    // Score and round\n    ctx.fillStyle = COLORS.text;\n    ctx.font = 'bold 16px sans-serif';\n    ctx.fillText(`Round ${game.roundIndex + 1}/${TOTAL_ROUNDS}`, 548, 270);\n    ctx.fillText(`Score: ${game.score}`, 548, 292);\n\n    // bottom instructions\n    ctx.font = '12px sans-serif';\n    ctx.fillStyle = '#2B4B56';\n    ctx.fillText('Keys: \u2190 \u2192 adjust  Enter submit  H hint  M mute', 22, HEIGHT - 14);\n\n    // small visualizer for audio near speaker\n    drawAudioVisualizer(620, 8);\n\n    // outcome flash\n    if (game.flashTimer > 0) {\n      const t = game.flashTimer / 18;\n      ctx.fillStyle = `rgba(255,100,100,${0.12 * t})`;\n      ctx.fillRect(0, 0, WIDTH, HEIGHT);\n    }\n\n    // If finished, show final screen overlay\n    if (game.finish) {\n      ctx.fillStyle = 'rgba(10,10,10,0.45)';\n      ctx.fillRect(0, 0, WIDTH, HEIGHT);\n      ctx.fillStyle = '#fff';\n      ctx.font = 'bold 30px sans-serif';\n      ctx.fillText('Machine Master!', 240, 210);\n      ctx.font = '18px sans-serif';\n      ctx.fillText(`You scored ${game.score} out of ${TOTAL_ROUNDS}`, 230, 245);\n      ctx.font = '14px sans-serif';\n      ctx.fillText('Press Enter to play again', 270, 285);\n      return;\n    }\n  }\n\n  function drawSpeaker(x, y) {\n    ctx.save();\n    ctx.translate(x, y);\n    // speaker box\n    ctx.fillStyle = '#fff';\n    ctx.strokeStyle = COLORS.shadow;\n    ctx.lineWidth = 1;\n    roundRect(ctx, -20, -12, 36, 24, 4);\n    // cone\n    ctx.beginPath();\n    ctx.moveTo(-22, 6);\n    ctx.lineTo(-8, 0);\n    ctx.lineTo(-8, -6);\n    ctx.closePath();\n    ctx.fillStyle = COLORS.accent;\n    ctx.fill();\n    // sound waves if audioAllowed\n    ctx.strokeStyle = audioAllowed ? COLORS.bolt : '#AAA';\n    for (let i = 0; i < 3; i++) {\n      ctx.beginPath();\n      ctx.arc(6, 0, 8 + i * 6, -0.3, 0.3);\n      ctx.stroke();\n    }\n    ctx.restore();\n  }\n\n  function drawAudioVisualizer(x, y) {\n    // small bars that respond to background hum amplitude\n    ctx.save();\n    ctx.translate(x, y + 30);\n    const bars = 4;\n    for (let i = 0; i < bars; i++) {\n      const h = audioAllowed ? 6 + Math.abs(Math.sin((Date.now() / 400) + i)) * 20 : 6;\n      ctx.fillStyle = audioAllowed ? COLORS.accent : '#CCC';\n      roundRect(ctx, i * 6, -h, 4, h, 1);\n    }\n    ctx.restore();\n  }\n\n  function drawMachineBody() {\n    // machine chassis\n    ctx.fillStyle = COLORS.machine;\n    roundRect(ctx, 180, 120, 340, 300, 18);\n    // intake window\n    ctx.fillStyle = '#F7FFFF';\n    roundRect(ctx, 200, 150, 300, 140, 12);\n    // show problem big\n    ctx.fillStyle = COLORS.text;\n    ctx.font = 'bold 34px sans-serif';\n    const problemText = `${game.round.a} ${game.round.op} ${game.round.b} = ?`;\n    const measure = ctx.measureText(problemText);\n    ctx.fillText(problemText, 200 + (300 - measure.width) / 2, 190);\n\n    // display current input with box\n    ctx.fillStyle = '#EAF6F3';\n    roundRect(ctx, 260, 200, 180, 70, 10);\n    ctx.fillStyle = COLORS.text;\n    ctx.font = 'bold 36px monospace';\n    const inputStr = String(game.currentInput);\n    const txtw = ctx.measureText(inputStr).width;\n    ctx.fillText(inputStr, 260 + (180 - txtw) / 2, 245);\n\n    // small info about tries\n    ctx.font = '12px sans-serif';\n    ctx.fillStyle = '#2B4B56';\n    ctx.fillText(`Tries: ${game.triesUsed}/${game.round.maxTries}`, 260, 275);\n\n    // draw gears with rotation\n    const gearX = 240;\n    const gearY = 320;\n    game.gearAngle += 0.02 + (game.lastOutcome === 'correct' ? 0.08 : 0);\n    drawGear(ctx, gearX, gearY, 36, 10, game.gearAngle, '#B6D0D3');\n    drawGear(ctx, gearX + 140, gearY - 10, 26, 8, -game.gearAngle * 1.4, '#AECBD2');\n\n    // conveyor belt showing bolts equal to absolute(answer) as small circles\n    const boltCount = clamp(Math.abs(game.round.answer), 0, 12);\n    drawConveyor(ctx, 230, 360, 260, 48, boltCount);\n\n    // animation: if correct, bolts eject confetti\n    if (game.lastOutcome === 'correct') {\n      // animate bolts being ejected \u2014 simple expanding rings\n      if (game.animationTimer < 60) {\n        // show expanding bolt flashes\n        for (let i = 0; i < 8; i++) {\n          const t = (game.animationTimer / 60) + (i / 8);\n          const alpha = Math.max(0, 1 - t);\n          ctx.beginPath();\n          ctx.fillStyle = `rgba(242,177,52,${alpha})`;\n          const rx = 360 + Math.cos(i / 8 * Math.PI * 2) * (40 * t);\n          const ry = 310 + Math.sin(i / 8 * Math.PI * 2) * (20 * t);\n          ctx.arc(rx, ry, 6 + 8 * t, 0, Math.PI * 2);\n          ctx.fill();\n        }\n      } else {\n        // after animation, progress to next round\n        game.boltsEjected = boltCount;\n        setTimeout(() => {\n          game.isAnimating = false;\n          game.lastOutcome = null;\n          game.nextRound();\n        }, 300);\n      }\n    }\n  }\n\n  function drawConveyor(ctx, x, y, w, h, boltCount) {\n    // belt background\n    ctx.fillStyle = '#E3EEF1';\n    roundRect(ctx, x, y, w, h, 12);\n    // belt pattern\n    ctx.fillStyle = '#D6E9EA';\n    for (let i = 0; i < 10; i++) {\n      ctx.fillRect(x + i * (w / 10), y + h / 2 - 3, w / 15, 6);\n    }\n    // bolts placed evenly\n    const c = boltCount;\n    const spacing = c > 0 ? w / c : w;\n    for (let i = 0; i < c; i++) {\n      const cx = x + spacing * (i + 0.5);\n      const cy = y + h / 2;\n      ctx.beginPath();\n      ctx.fillStyle = COLORS.bolt;\n      ctx.arc(cx, cy, 12, 0, Math.PI * 2);\n      ctx.fill();\n      // shine\n      ctx.beginPath();\n      ctx.fillStyle = 'rgba(255,255,255,0.5)';\n      ctx.arc(cx - 4, cy - 4, 3, 0, Math.PI * 2);\n      ctx.fill();\n      // small nut hole\n      ctx.beginPath();\n      ctx.fillStyle = COLORS.shadow;\n      ctx.arc(cx, cy, 4, 0, Math.PI * 2);\n      ctx.fill();\n    }\n  }\n\n  // Game update loop\n  let lastTs = 0;\n  function loop(ts) {\n    const dt = ts - lastTs;\n    lastTs = ts;\n    // update timers\n    if (game.flashTimer > 0) game.flashTimer = Math.max(0, game.flashTimer - 1);\n    if (game.isAnimating) game.animationTimer += dt / 16;\n    // draw everything\n    render();\n    requestAnimationFrame(loop);\n  }\n\n  // Kick off loop\n  requestAnimationFrame(loop);\n\n  // Informational announce\n  announceForA11y(\n    'Welcome to Machine Math. Use left and right arrow keys to change your answer, Enter to submit, H for hint, M to toggle sound.'\n  );\n\n  // Error handling: ensure audio context setup on user gesture attempts to start\n  // Also show a subtle tooltip if audio not available\n  function showAudioStatus() {\n    // Draw a small note on canvas if audio not available\n    if (!audioCtx) {\n      // add a subtle instruction\n      ctx.save();\n      ctx.fillStyle = 'rgba(20,20,20,0.06)';\n      ctx.fillRect(12, HEIGHT - 68, 260, 48);\n      ctx.fillStyle = '#123';\n      ctx.font = '12px sans-serif';\n      ctx.fillText('Audio not yet enabled. Click the speaker or press M to enable sounds.', 24, HEIGHT - 42);\n      ctx.restore();\n    }\n  }\n\n  // Periodically check audio state to update visualization and messages\n  setInterval(() => {\n    if (!audioCtx && audioAllowed) {\n      // try init again\n      initAudioContext();\n    }\n    // small status\n    showAudioStatus();\n  }, 1000);\n\n  // Initial draw call to ensure canvas isn't blank\n  render();\n\n  // Final note to console\n  console.log('Machine Math game initialized. Controls: Arrow keys, Enter, H, M.');\n\n})();\n---\n",
  "improve_response_tokens": 16528,
  "formatted_code": true,
  "formatting_response_tokens": 17374,
  "final_functionality": {
    "score": 8,
    "max_score": 8,
    "percentage": 100.0,
    "passing": true,
    "issues": [],
    "warnings": []
  }
}