{
  "generated_date": "2025-09-07",
  "generated_timestamp": "2025-09-07T00:28:37.098039",
  "model": "gpt-5-mini",
  "theme": "machines",
  "prompt": "You are an expert educational game designer. You will generate a fun, playable math game in JavaScript for children ages 7 to 9, focused on foundational concepts presented in a way that is engaging and fun. Today's theme: machines\n\nThe game must:\n\u2022 Be beatable.\n\u2022 Use visually calming and interesting and wacky elements.\n\u2022 Include sound, using the Web Audio API for correct/incorrect feedback, gentle background effects, or interactions. Use an audio context.\n\u2022 Render entirely inside the existing HTML element with ID game-of-the-day-stage. You may create a canvas element inside it .\n\u2022 Have a game area exactly 720px wide by 480px tall.\n\u2022 Be written in clean, readable JavaScript with proper formatting, indentation, and comments.\n\u2022 Use modern JavaScript practices and avoid minification.\n\u2022 Include proper error handling for audio and resource loading.\n\u2022 Be accessible: include keyboard controls, text alternatives, visual cues for audio, clear instructions, and error handling.\n\u2022 Use ONLY canvas-drawn graphics or 3js and Web Audio API - NO external image URLs, NO external audio files, NO external dependencies.\n\u2022 Create all visual elements using canvas drawing methods (rect, arc, fillText, etc.) or 3js.\n\u2022 Generate all sounds using Web Audio API oscillators and filters.\n\u2022 Include proper error handling for audio context creation.\n\u2022 Output only JavaScript code. No extra explanation, no markdown formatting, no code blocks, no HTML, no CSS.\n\u2022 Do not wrap the code in ```javascript or any other markdown formatting.",
  "response_tokens": 9142,
  "game_filename": "2025-09-07.js",
  "game_size_bytes": 25382,
  "functionality": {
    "score": 8,
    "max_score": 8,
    "percentage": 100.0,
    "passing": true,
    "issues": [],
    "warnings": []
  },
  "dependencies": {
    "has_external_deps": false,
    "issues": [],
    "warnings": [],
    "canvas_methods_used": 5
  },
  "improved_visuals_audio": true,
  "improve_prompt": "You are an expert educational game designer. \nTake the following JavaScript game code and improve ONLY the visuals and audio. \nDo not change the game mechanics or math logic. \nEnhance the visual appeal (colors, animations, backgrounds, characters), avoid overstimulation with sounds and visuals, and add or improve sound effects and background audio. \nRender entirely inside the existing HTML element with ID game-of-the-day-stage. You may create a canvas element inside it (do not include angle brackets in text instructions).\nHave a game area exactly 720px wide by 480px tall.\nBe written in clean, readable JavaScript with proper formatting, indentation, and comments.\nUse modern JavaScript practices and avoid minification.\nInclude proper error handling for audio and resource loading.\nUse ONLY canvas-drawn graphics and Web Audio API - NO external image URLs, NO external audio files, NO external dependencies.\nCreate all visual elements using canvas drawing methods (rect, arc, fillText, etc.).\nGenerate all sounds using Web Audio API oscillators and filters.\nInclude proper error handling for audio context creation.\nOutput only JavaScript code. No extra explanation, no markdown formatting, no code blocks.\nDo not wrap the code in ```javascript or any other markdown formatting.\n\n---\n\"use strict\";\n\n/*\n  Machine Math - A calming, wacky math game for ages 7-9.\n  Renders into the element with id \"game-of-the-day-stage\".\n  All graphics are drawn on a canvas sized 720x480.\n  Sounds are synthesized with the Web Audio API (no external files).\n*/\n\n/* =========================\n   Setup DOM and Canvas\n   ========================= */\nconst container = document.getElementById('game-of-the-day-stage');\nif (!container) {\n  throw new Error('Container element #game-of-the-day-stage not found.');\n}\ncontainer.innerHTML = ''; // Clear any content\n\n// Create canvas\nconst canvas = document.createElement('canvas');\ncanvas.width = 720;\ncanvas.height = 480;\n// Accessibility attributes\ncanvas.setAttribute('role', 'application');\ncanvas.setAttribute('aria-label', 'Machine Math game. Use left and right arrows to pick a dial, up and down to change numbers, Enter to submit. Press H for hint, R to reset. Press M to toggle sound.');\ncanvas.tabIndex = 0; // make focusable for keyboard\ncanvas.style.outline = 'none';\ncontainer.appendChild(canvas);\n\nconst ctx = canvas.getContext('2d', { alpha: false });\n\n/* =========================\n   Constants and Utilities\n   ========================= */\nconst WIDTH = canvas.width;\nconst HEIGHT = canvas.height;\nconst CENTER_X = WIDTH / 2;\nconst CENTER_Y = HEIGHT / 2;\n\nconst BG_COLOR = '#f3f6f7';\nconst MACHINE_COLOR = '#d7eaf0';\nconst ACCENT = '#7fb3c9';\nconst HIGHLIGHT = '#ffd27f';\nconst TEXT_COLOR = '#1f2d3d';\nconst GEAR_COLOR = '#c3dbe1';\nconst WACKY_COLOR = '#b083ff';\n\nconst NUM_DIALS = 4;\nconst DIAL_MIN = 0;\nconst DIAL_MAX = 9;\nconst TOTAL_LEVELS = 5; // beatable target count\n\nfunction clamp(v, a, b) { return Math.max(a, Math.min(b, v)); }\nfunction randInt(min, max) { return Math.floor(Math.random() * (max - min + 1)) + min; }\n\n/* =========================\n   Audio Setup with Error Handling\n   ========================= */\n\nlet audioEnabled = true;\nlet audioUnavailableReason = null;\nlet audioCtx = null;\nlet masterGain = null;\nlet ambientGain = null;\nlet ambientOsc = null;\n\nfunction initAudio() {\n  if (audioCtx) return;\n  try {\n    const AC = window.AudioContext || window.webkitAudioContext;\n    if (!AC) throw new Error('Web Audio API not supported in this browser.');\n    audioCtx = new AC();\n    masterGain = audioCtx.createGain();\n    masterGain.gain.value = 0.85;\n    masterGain.connect(audioCtx.destination);\n\n    // Ambient gentle background: low frequency hum with slow amplitude wobble\n    ambientGain = audioCtx.createGain();\n    ambientGain.gain.value = 0.06;\n    ambientGain.connect(masterGain);\n\n    ambientOsc = audioCtx.createOscillator();\n    ambientOsc.type = 'sine';\n    ambientOsc.frequency.value = 110; // low hum\n    // filter for mellow tone\n    const filter = audioCtx.createBiquadFilter();\n    filter.type = 'lowpass';\n    filter.frequency.value = 600;\n    ambientOsc.connect(filter);\n    filter.connect(ambientGain);\n\n    ambientOsc.start();\n\n    // subtle amplitude modulation using another oscillator\n    const lfo = audioCtx.createOscillator();\n    const lfoGain = audioCtx.createGain();\n    lfo.type = 'sine';\n    lfo.frequency.value = 0.07;\n    lfoGain.gain.value = 0.03;\n    lfo.connect(lfoGain);\n    lfoGain.connect(ambientGain.gain);\n    lfo.start();\n\n    audioEnabled = true;\n  } catch (err) {\n    console.warn('Audio initialization failed:', err);\n    audioEnabled = false;\n    audioUnavailableReason = err.message || String(err);\n  }\n}\n\n// function to ensure audio context is resumed on user gesture\nasync function ensureAudioRunning() {\n  if (!audioEnabled) return false;\n  if (!audioCtx) initAudio();\n  if (!audioCtx) return false;\n  try {\n    if (audioCtx.state === 'suspended') {\n      await audioCtx.resume();\n    }\n    return true;\n  } catch (err) {\n    console.warn('Audio resume failed:', err);\n    audioEnabled = false;\n    audioUnavailableReason = err.message || String(err);\n    return false;\n  }\n}\n\n// Play a short tone; returns a promise that resolves when done\nfunction playTone(freq = 440, timeMs = 200, type = 'sine', vol = 0.12) {\n  return new Promise((resolve) => {\n    if (!audioEnabled || !audioCtx) {\n      resolve();\n      return;\n    }\n    try {\n      const now = audioCtx.currentTime;\n      const osc = audioCtx.createOscillator();\n      const gain = audioCtx.createGain();\n      osc.type = type;\n      osc.frequency.value = freq;\n      gain.gain.setValueAtTime(0.0001, now);\n      gain.gain.exponentialRampToValueAtTime(vol, now + 0.01);\n      gain.gain.exponentialRampToValueAtTime(0.0001, now + (timeMs / 1000));\n      osc.connect(gain);\n      gain.connect(masterGain);\n      osc.start(now);\n      osc.stop(now + (timeMs / 1000) + 0.02);\n      osc.onended = () => {\n        resolve();\n      };\n    } catch (err) {\n      console.warn('playTone error', err);\n      resolve();\n    }\n  });\n}\n\n// Play a sequence of tones\nasync function playSequence(freqs = [440], ms = 150, type = 'sine') {\n  for (let i = 0; i < freqs.length; i++) {\n    await playTone(freqs[i], ms, type);\n    await new Promise(r => setTimeout(r, 60));\n  }\n}\n\n// Success tune (ascending)\nfunction successTune() {\n  if (!audioEnabled) return;\n  playSequence([440, 660, 880], 160, 'sine');\n}\n\n// Failure tune (descending buzz)\nfunction failureTune() {\n  if (!audioEnabled) return;\n  playSequence([220, 180, 120], 180, 'square');\n}\n\n// Click\nfunction clickBeep() {\n  if (!audioEnabled) return;\n  playTone(880, 90, 'triangle', 0.08);\n}\n\n/* =========================\n   Game State and Logic\n   ========================= */\n\nconst game = {\n  level: 1,\n  totalLevels: TOTAL_LEVELS,\n  dials: new Array(NUM_DIALS).fill(0),\n  selectedDial: 0,\n  target: 0,\n  hintUsed: false,\n  moves: 0,\n  correctCount: 0,\n  running: true,\n  machineSpin: 0, // for animation when machine runs\n  lastFeedback: null, // 'correct'|'incorrect' for visuals\n  feedbackTimer: 0,\n  soundOn: true,\n};\n\n// Generate a target that is reachable with dials range\nfunction generateTargetForLevel(level) {\n  // Increase target complexity with level.\n  // Minimum reachable is DIAL_MIN * NUM_DIALS = 0.\n  // Max reachable is DIAL_MAX * NUM_DIALS = 36 when DIAL_MAX=9.\n  // We'll choose target range expanding with level.\n  const min = Math.max(3, Math.floor((level - 1) * 3) + 3);\n  const max = Math.min(DIAL_MAX * NUM_DIALS, min + 6 + (level * 2));\n  return randInt(min, max);\n}\n\nfunction resetDials() {\n  for (let i = 0; i < NUM_DIALS; i++) {\n    game.dials[i] = randInt(0, 4); // start with small calming values\n  }\n  game.selectedDial = 0;\n  game.moves = 0;\n  game.hintUsed = false;\n  game.lastFeedback = null;\n}\n\nfunction startLevel(level = 1) {\n  game.level = level;\n  game.target = generateTargetForLevel(level);\n  resetDials();\n  game.running = true;\n}\n\nstartLevel(1);\n\n/* =========================\n   Input Handling (Keyboard and Mouse)\n   ========================= */\n\nfunction handleKey(e) {\n  // Allow arrow keys and letters\n  const key = e.key;\n  if (['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Enter', ' ', 'Spacebar'].includes(key) || /^[0-9a-zA-Z]$/.test(key)) {\n    e.preventDefault();\n  }\n\n  if (key === 'ArrowLeft') {\n    game.selectedDial = (game.selectedDial - 1 + NUM_DIALS) % NUM_DIALS;\n    clickBeep();\n  } else if (key === 'ArrowRight') {\n    game.selectedDial = (game.selectedDial + 1) % NUM_DIALS;\n    clickBeep();\n  } else if (key === 'ArrowUp') {\n    const before = game.dials[game.selectedDial];\n    game.dials[game.selectedDial] = clamp(game.dials[game.selectedDial] + 1, DIAL_MIN, DIAL_MAX);\n    if (game.dials[game.selectedDial] !== before) {\n      game.moves++;\n      clickBeep();\n    }\n  } else if (key === 'ArrowDown') {\n    const before = game.dials[game.selectedDial];\n    game.dials[game.selectedDial] = clamp(game.dials[game.selectedDial] - 1, DIAL_MIN, DIAL_MAX);\n    if (game.dials[game.selectedDial] !== before) {\n      game.moves++;\n      clickBeep();\n    }\n  } else if (key === 'Enter') {\n    submitAttempt();\n  } else if (key.toLowerCase() === 'h') {\n    provideHint();\n  } else if (key.toLowerCase() === 'r') {\n    // reset current level\n    resetDials();\n    clickBeep();\n  } else if (key.toLowerCase() === 'm') {\n    toggleSound();\n  } else if (/^[0-9]$/.test(key)) {\n    // direct number entry for selected dial\n    const num = parseInt(key, 10);\n    if (!isNaN(num)) {\n      game.dials[game.selectedDial] = clamp(num, DIAL_MIN, DIAL_MAX);\n      game.moves++;\n      clickBeep();\n    }\n  }\n}\n\ncanvas.addEventListener('keydown', (e) => {\n  // Ensure audio context starts on first user interaction\n  ensureAudioRunning().catch(() => {});\n  handleKey(e);\n});\n\ncanvas.addEventListener('click', (e) => {\n  // Click to focus\n  canvas.focus();\n  // Determine click position for selecting dials or toggling sound\n  const rect = canvas.getBoundingClientRect();\n  const x = e.clientX - rect.left;\n  const y = e.clientY - rect.top;\n\n  // Sound icon top-right bounds\n  const soundBox = { x: WIDTH - 54, y: 8, w: 46, h: 46 };\n  if (x >= soundBox.x && x <= soundBox.x + soundBox.w && y >= soundBox.y && y <= soundBox.y + soundBox.h) {\n    toggleSound();\n    return;\n  }\n\n  // Check dials region\n  const dialsArea = { x: 80, y: 170, w: WIDTH - 160, h: 220 };\n  if (x >= dialsArea.x && x <= dialsArea.x + dialsArea.w && y >= dialsArea.y && y <= dialsArea.y + dialsArea.h) {\n    // Map x to dial\n    const cellW = dialsArea.w / NUM_DIALS;\n    let idx = Math.floor((x - dialsArea.x) / cellW);\n    idx = clamp(idx, 0, NUM_DIALS - 1);\n    if (game.selectedDial === idx) {\n      // Clicked selected dial -> increment\n      const before = game.dials[idx];\n      game.dials[idx] = clamp(game.dials[idx] + 1, DIAL_MIN, DIAL_MAX);\n      if (game.dials[idx] !== before) {\n        game.moves++;\n        clickBeep();\n      }\n    } else {\n      game.selectedDial = idx;\n      clickBeep();\n    }\n  }\n});\n\n// Provide hint: minimal helpful guidance\nfunction provideHint() {\n  if (game.hintUsed) return;\n  game.hintUsed = true;\n  // Suggest average per dial and a sample distribution\n  const avg = Math.round(game.target / NUM_DIALS);\n  // create a suggested array that sums to target\n  let suggestion = new Array(NUM_DIALS).fill(avg);\n  let sum = suggestion.reduce((a, b) => a + b, 0);\n  let i = 0;\n  while (sum < game.target) {\n    suggestion[i % NUM_DIALS] = clamp(suggestion[i % NUM_DIALS] + 1, DIAL_MIN, DIAL_MAX);\n    sum = suggestion.reduce((a, b) => a + b, 0);\n    i++;\n  }\n  while (sum > game.target) {\n    suggestion[i % NUM_DIALS] = clamp(suggestion[i % NUM_DIALS] - 1, DIAL_MIN, DIAL_MAX);\n    sum = suggestion.reduce((a, b) => a + b, 0);\n    i++;\n  }\n  // Set selected dial to 0 so the player makes changes manually (no auto-fill).\n  game.selectedDial = 0;\n  // store suggestion for display as visual hint\n  game.lastSuggestion = suggestion;\n  // play a gentle hint tone\n  if (audioEnabled) playSequence([660, 720], 120, 'sine');\n}\n\n/* =========================\n   Submit and Progression\n   ========================= */\n\nfunction submitAttempt() {\n  const sum = game.dials.reduce((a, b) => a + b, 0);\n  if (sum === game.target) {\n    // correct\n    game.correctCount++;\n    game.lastFeedback = 'correct';\n    game.feedbackTimer = performance.now();\n    // animate machine starting\n    game.machineSpin = 1.0;\n    if (audioEnabled) successTune();\n    // move to next level after a short delay\n    setTimeout(() => {\n      if (game.level < game.totalLevels) {\n        startLevel(game.level + 1);\n      } else {\n        // victory\n        game.running = false;\n      }\n    }, 900);\n  } else {\n    // incorrect\n    game.lastFeedback = 'incorrect';\n    game.feedbackTimer = performance.now();\n    if (audioEnabled) failureTune();\n    // slight jitter or reset one dial softly to encourage change\n    // but don't block player's ability to keep trying. No fail state.\n  }\n}\n\n/* =========================\n   Toggle Sound (visual + audio)\n   ========================= */\n\nfunction toggleSound() {\n  // If audio not available due to browser, show visual cue only\n  if (!audioEnabled && !audioUnavailableReason) {\n    // try again\n    try {\n      initAudio();\n      if (audioEnabled) {\n        ensureAudioRunning();\n      }\n    } catch (err) {\n      audioUnavailableReason = err.message || String(err);\n    }\n  }\n  if (!audioEnabled && audioUnavailableReason) {\n    // can't enable, beep visual feedback\n    game.lastFeedback = 'audionot';\n    game.feedbackTimer = performance.now();\n    return;\n  }\n  // Toggle master gain\n  if (!audioCtx) initAudio();\n  if (!audioCtx) {\n    audioUnavailableReason = 'Unable to create audio context.';\n    game.lastFeedback = 'audionot';\n    game.feedbackTimer = performance.now();\n    return;\n  }\n\n  if (audioCtx.state === 'suspended') {\n    ensureAudioRunning();\n    game.soundOn = true;\n  } else {\n    // toggle mute by changing gain\n    if (masterGain) {\n      if (game.soundOn) {\n        try {\n          masterGain.gain.setTargetAtTime(0.0001, audioCtx.currentTime, 0.01);\n          game.soundOn = false;\n        } catch (err) {\n          console.warn('Mute failed', err);\n        }\n      } else {\n        try {\n          masterGain.gain.setTargetAtTime(0.85, audioCtx.currentTime, 0.01);\n          game.soundOn = true;\n        } catch (err) {\n          console.warn('Unmute failed', err);\n        }\n      }\n    }\n  }\n  // soft click to indicate change (if possible)\n  if (game.soundOn) clickBeep();\n}\n\n/* =========================\n   Drawing Helpers\n   ========================= */\n\nfunction roundedRect(ctx, x, y, w, h, r) {\n  ctx.beginPath();\n  ctx.moveTo(x + r, y);\n  ctx.arcTo(x + w, y, x + w, y + h, r);\n  ctx.arcTo(x + w, y + h, x, y + h, r);\n  ctx.arcTo(x, y + h, x, y, r);\n  ctx.arcTo(x, y, x + w, y, r);\n  ctx.closePath();\n  ctx.fill();\n}\n\n// Draw friendly machine body\nfunction drawMachineBody() {\n  ctx.fillStyle = MACHINE_COLOR;\n  roundedRect(ctx, 60, 120, WIDTH - 120, 260, 18);\n  // panels\n  ctx.fillStyle = '#eaf3f6';\n  for (let i = 0; i < 4; i++) {\n    const w = (WIDTH - 160) / 4 - 12;\n    const x = 80 + i * ((WIDTH - 160) / 4);\n    const y = 170;\n    roundedRect(ctx, x, y, w, 160, 12);\n  }\n}\n\n// Draw top control box with target display\nfunction drawTopPanel() {\n  // header\n  ctx.fillStyle = ACCENT;\n  roundedRect(ctx, 46, 36, WIDTH - 92, 96, 14);\n  // machine name\n  ctx.fillStyle = TEXT_COLOR;\n  ctx.font = '20px system-ui, Arial';\n  ctx.textBaseline = 'top';\n  ctx.fillText('Machine Math: Fix the Wacky Machine!', 74, 46);\n  ctx.font = '14px system-ui, Arial';\n  ctx.fillStyle = '#113';\n  ctx.fillText(`Level ${game.level} of ${game.totalLevels}`, WIDTH - 170, 46);\n  // target display\n  ctx.fillStyle = HIGHLIGHT;\n  roundedRect(ctx, WIDTH - 200, 66, 120, 44, 8);\n  ctx.fillStyle = TEXT_COLOR;\n  ctx.font = '20px system-ui, Arial';\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'middle';\n  ctx.fillText(`Target: ${game.target}`, WIDTH - 140, 88);\n  ctx.textAlign = 'start';\n}\n\n// Draw dials\nfunction drawDials() {\n  const areaX = 80;\n  const areaY = 170;\n  const areaW = WIDTH - 160;\n  const areaH = 220;\n  const cellW = areaW / NUM_DIALS;\n  for (let i = 0; i < NUM_DIALS; i++) {\n    const x = areaX + i * cellW + 6;\n    const y = areaY + 14;\n    const w = cellW - 12;\n    const h = 160;\n    // panel\n    ctx.fillStyle = '#f9ffff';\n    roundedRect(ctx, x, y, w, h, 12);\n\n    // dial plate\n    const dialCx = x + w / 2;\n    const dialCy = y + 56;\n    const dialR = 36;\n    ctx.beginPath();\n    ctx.arc(dialCx, dialCy, dialR + 6, 0, Math.PI * 2);\n    ctx.fillStyle = GEAR_COLOR;\n    ctx.fill();\n    // small highlight ring\n    ctx.beginPath();\n    ctx.arc(dialCx, dialCy, dialR + 2, 0, Math.PI * 2);\n    ctx.strokeStyle = '#e6f2f5';\n    ctx.lineWidth = 3;\n    ctx.stroke();\n\n    // dial shadow and knob indicator (wacky gear)\n    const angle = (game.dials[i] / (DIAL_MAX || 1)) * Math.PI * 2;\n    // gear-like teeth drawn as arcs\n    for (let t = 0; t < 8; t++) {\n      const ta = (t / 8) * Math.PI * 2 + performance.now() / 2000 + (i * 0.4);\n      ctx.beginPath();\n      ctx.fillStyle = (t % 2 === 0) ? '#d1e6ea' : '#bfe7ef';\n      const rx = dialCx + Math.cos(ta) * (dialR + 12);\n      const ry = dialCy + Math.sin(ta) * (dialR + 12);\n      ctx.ellipse(rx, ry, 8, 6, ta, 0, Math.PI * 2);\n      ctx.fill();\n    }\n\n    // central knob\n    ctx.beginPath();\n    ctx.arc(dialCx, dialCy, dialR - 10, 0, Math.PI * 2);\n    ctx.fillStyle = WACKY_COLOR;\n    ctx.fill();\n    ctx.beginPath();\n    // show numeric label\n    ctx.fillStyle = '#fff';\n    ctx.font = '26px system-ui, Arial';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillText(String(game.dials[i]), dialCx, dialCy);\n\n    // dial selection glow\n    if (game.selectedDial === i) {\n      ctx.beginPath();\n      ctx.arc(dialCx, dialCy, dialR + 12, 0, Math.PI * 2);\n      ctx.strokeStyle = 'rgba(255,210,127,0.7)';\n      ctx.lineWidth = 6;\n      ctx.stroke();\n    }\n\n    // small label below\n    ctx.fillStyle = '#1b2b36';\n    ctx.font = '14px system-ui, Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText(`Dial ${i + 1}`, x + w / 2, y + 120);\n  }\n}\n\n// Draw machine gears and wacky animations\nfunction drawGearsAndFeet() {\n  // left gear\n  const leftCx = 110;\n  const leftCy = 360;\n  const rightCx = WIDTH - 110;\n  const rightCy = 360;\n  const time = performance.now() / 800;\n  // left gear rotates based on machineSpin\n  const leftSpin = time * (0.8 + game.machineSpin * 3);\n  const rightSpin = -time * (0.6 + game.machineSpin * 2);\n\n  function drawGear(cx, cy, radius, teeth, spin, faceColor) {\n    ctx.save();\n    ctx.translate(cx, cy);\n    ctx.rotate(spin);\n    // teeth\n    for (let i = 0; i < teeth; i++) {\n      const a = (i / teeth) * Math.PI * 2;\n      ctx.beginPath();\n      ctx.fillStyle = '#cfe7ea';\n      ctx.moveTo(Math.cos(a) * (radius + 6), Math.sin(a) * (radius + 6));\n      ctx.arc(Math.cos(a) * (radius + 6), Math.sin(a) * (radius + 6), 8, 0, Math.PI * 2);\n      ctx.fill();\n    }\n    // main circle\n    ctx.beginPath();\n    ctx.fillStyle = faceColor;\n    ctx.arc(0, 0, radius, 0, Math.PI * 2);\n    ctx.fill();\n\n    // smiley face\n    ctx.fillStyle = '#113';\n    ctx.beginPath();\n    ctx.arc(-radius * 0.3, -radius * 0.2, radius * 0.12, 0, Math.PI * 2);\n    ctx.arc(radius * 0.1, -radius * 0.2, radius * 0.12, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.beginPath();\n    ctx.strokeStyle = '#113';\n    ctx.lineWidth = 2;\n    ctx.arc(0, radius * 0.05, radius * 0.4, 0.1, Math.PI - 0.1);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  drawGear(leftCx, leftCy, 28, 10, leftSpin, '#bfe5e9');\n  drawGear(rightCx, rightCy, 36, 12, rightSpin, '#aee0e5');\n}\n\n// Draw instructions and feedback\nfunction drawTextAndUI() {\n  ctx.fillStyle = TEXT_COLOR;\n  ctx.font = '14px system-ui, Arial';\n  ctx.textAlign = 'left';\n  ctx.fillText('Controls: \u2190 \u2192 select dial, \u2191 \u2193 change number, Enter submit, H hint, R reset, M toggle sound', 72, 420);\n  ctx.fillText(`Moves: ${game.moves}`, 72, 440);\n  ctx.textAlign = 'right';\n  ctx.fillText(`Score: ${game.correctCount}`, WIDTH - 72, 440);\n\n  // Feedback visual\n  if (game.lastFeedback === 'correct' && performance.now() - game.feedbackTimer < 1500) {\n    ctx.fillStyle = 'rgba(127, 211, 121, 0.18)';\n    roundedRect(ctx, WIDTH / 2 - 160, 300, 320, 62, 12);\n    ctx.fillStyle = '#2e7d32';\n    ctx.font = '20px system-ui, Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('Nice! Machine fixed!', WIDTH / 2, 335);\n  } else if (game.lastFeedback === 'incorrect' && performance.now() - game.feedbackTimer < 1200) {\n    ctx.fillStyle = 'rgba(255, 135, 135, 0.14)';\n    roundedRect(ctx, WIDTH / 2 - 160, 300, 320, 62, 12);\n    ctx.fillStyle = '#b71c1c';\n    ctx.font = '18px system-ui, Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('Oops! Try adjusting the dials a bit.', WIDTH / 2, 335);\n  } else if (game.lastFeedback === 'audionot' && performance.now() - game.feedbackTimer < 1800) {\n    ctx.fillStyle = 'rgba(255, 200, 100, 0.12)';\n    roundedRect(ctx, WIDTH / 2 - 160, 300, 320, 62, 12);\n    ctx.fillStyle = '#6a4f01';\n    ctx.font = '16px system-ui, Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('Audio unavailable: ' + (audioUnavailableReason || 'blocked'), WIDTH / 2, 335);\n  }\n\n  // Draw hint suggestion if used\n  if (game.hintUsed && game.lastSuggestion) {\n    ctx.fillStyle = 'rgba(255,255,255,0.6)';\n    ctx.font = '13px system-ui, Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('Hint suggestion: ' + game.lastSuggestion.join(' + ') + ` = ${game.target}`, WIDTH / 2, 465);\n  }\n}\n\n// Draw sound icon (top right) with visual cue for audio state\nfunction drawSoundIcon() {\n  const x = WIDTH - 54;\n  const y = 8;\n  // box\n  ctx.fillStyle = '#e8f1f3';\n  ctx.beginPath();\n  roundedRect(ctx, x, y, 46, 46, 8);\n  // speaker\n  ctx.save();\n  ctx.translate(x + 22, y + 24);\n  ctx.fillStyle = game.soundOn ? '#314b52' : '#8b8b8b';\n  ctx.beginPath();\n  ctx.moveTo(-10, -8);\n  ctx.lineTo(-2, -8);\n  ctx.lineTo(6, -16);\n  ctx.lineTo(6, 16);\n  ctx.lineTo(-2, 8);\n  ctx.lineTo(-10, 8);\n  ctx.closePath();\n  ctx.fill();\n  if (!game.soundOn) {\n    ctx.strokeStyle = '#ff6b6b';\n    ctx.lineWidth = 3;\n    ctx.beginPath();\n    ctx.moveTo(10, -10);\n    ctx.lineTo(18, 10);\n    ctx.stroke();\n  } else if (!audioEnabled && audioUnavailableReason) {\n    // show small \"x\" or warning\n    ctx.fillStyle = '#ffb86b';\n    ctx.beginPath();\n    ctx.arc(14, -12, 6, 0, Math.PI * 2);\n    ctx.fill();\n  } else {\n    // gentle audio waves\n    ctx.strokeStyle = 'rgba(49,75,82,0.9)';\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.arc(6, -2, 8, -0.6, 0.6);\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.arc(6, -2, 12, -0.6, 0.6);\n    ctx.stroke();\n  }\n  ctx.restore();\n}\n\n/* =========================\n   Main Render Loop\n   ========================= */\n\nfunction update(delta) {\n  // animate machineSpin towards 0 slowly\n  if (game.machineSpin > 0) {\n    game.machineSpin = Math.max(0, game.machineSpin - delta * 0.0025);\n  }\n}\n\nlet lastTime = performance.now();\n\nfunction render() {\n  const now = performance.now();\n  const delta = now - lastTime;\n  lastTime = now;\n  update(delta);\n\n  // Clear background\n  ctx.fillStyle = BG_COLOR;\n  ctx.fillRect(0, 0, WIDTH, HEIGHT);\n\n  // Draw top panel\n  drawTopPanel();\n\n  // Machine body and dials\n  drawMachineBody();\n  drawDials();\n\n  // Gears animation\n  drawGearsAndFeet();\n\n  // Controls and feedback text\n  drawTextAndUI();\n\n  // Sound icon\n  drawSoundIcon();\n\n  // If game complete, overlay victory screen\n  if (!game.running) {\n    ctx.fillStyle = 'rgba(18,34,40,0.88)';\n    ctx.fillRect(0, 0, WIDTH, HEIGHT);\n    ctx.fillStyle = '#fff';\n    ctx.textAlign = 'center';\n    ctx.font = '34px system-ui, Arial';\n    ctx.fillText('All Machines Fixed!', WIDTH / 2, HEIGHT / 2 - 20);\n    ctx.font = '18px system-ui, Arial';\n    ctx.fillText(`You fixed ${game.correctCount} machines with ${game.moves} moves.`, WIDTH / 2, HEIGHT / 2 + 14);\n    ctx.font = '15px system-ui, Arial';\n    ctx.fillText('Press R to restart the game.', WIDTH / 2, HEIGHT / 2 + 46);\n  }\n\n  requestAnimationFrame(render);\n}\n\nrequestAnimationFrame(render);\n\n/* =========================\n   Accessibility & Focus Hints\n   ========================= */\n\n// Provide a visible focus ring when canvas focused\ncanvas.addEventListener('focus', () => {\n  canvas.style.boxShadow = '0 0 0 3px rgba(127,210,255,0.25)';\n});\ncanvas.addEventListener('blur', () => {\n  canvas.style.boxShadow = 'none';\n});\n\n// Keyboard global: restart when finished\nwindow.addEventListener('keydown', (e) => {\n  if (e.key.toLowerCase() === 'r') {\n    if (!game.running) {\n      // restart game\n      game.level = 1;\n      game.correctCount = 0;\n      startLevel(1);\n      game.running = true;\n      game.moves = 0;\n      game.lastSuggestion = null;\n      game.hintUsed = false;\n      clickBeep();\n    } else {\n      // reset current level\n      resetDials();\n      clickBeep();\n    }\n  }\n});\n\n/* =========================\n   Initialize Audio When Allowed\n   ========================= */\n\n// Try to initialize audio but handle errors gracefully\ntry {\n  initAudio();\n} catch (err) {\n  console.warn('Audio init threw', err);\n  audioEnabled = false;\n  audioUnavailableReason = err.message || String(err);\n}\n\n/* =========================\n   Expose a tiny help text for screen readers programmatically\n   ========================= */\nconst srHelp = `Welcome to Machine Math. Objective: match the target number by adjusting four dials. \nUse arrow keys: left and right to pick a dial, up and down to change its number. Press Enter to submit. \nPress H for a hint. Press M to toggle sound. Press R to reset or restart.`;\ncanvas.setAttribute('aria-description', srHelp);\n\n// Ensure canvas has focus initially for keyboard users\nsetTimeout(() => {\n  try {\n    canvas.focus();\n  } catch (e) {\n    // ignore\n  }\n}, 500);\n\n/* =========================\n   Final Safety: Prevent errors from halting game\n   ========================= */\nwindow.addEventListener('error', (ev) => {\n  console.error('Runtime error in Machine Math:', ev.error || ev.message || ev);\n  // show friendly message overlay\n  ctx.fillStyle = 'rgba(255,255,255,0.98)';\n  ctx.fillRect(0, 0, WIDTH, HEIGHT);\n  ctx.fillStyle = '#c33';\n  ctx.font = '18px system-ui, Arial';\n  ctx.textAlign = 'center';\n  ctx.fillText('Oops \u2014 something went wrong.', WIDTH / 2, HEIGHT / 2 - 10);\n  ctx.fillStyle = '#333';\n  ctx.font = '14px system-ui, Arial';\n  ctx.fillText('Try reloading the page. If sound is not working, it may be blocked by the browser.', WIDTH / 2, HEIGHT / 2 + 16);\n});\n---\n",
  "improve_response_tokens": 18144,
  "formatted_code": true,
  "formatting_response_tokens": 19475,
  "final_functionality": {
    "score": 8,
    "max_score": 8,
    "percentage": 100.0,
    "passing": true,
    "issues": [],
    "warnings": []
  }
}