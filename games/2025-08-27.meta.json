{
  "generated_date": "2025-08-27",
  "generated_timestamp": "2025-08-27T00:27:24.283018",
  "model": "gpt-5-mini",
  "theme": "electricity",
  "prompt": "You are an expert educational game designer. Each day, you will generate a fun, playable math game in JavaScript for children ages 7 to 9, focused on foundational concepts. Today's theme: electricity\n\nThe game must:\n\u2022 Be engaging and fun first by having a primary visually interesting game mechanic, age-appropriate, and suitable for early learners.\n\u2022 Reinforce the math concept through a real-world narratives tied to theme.\n\u2022 Include fun, unique memorable characters tied to the theme.\n\u2022 Use visually calming and interesting and wacky elements.\n\u2022 Include sound, using the Web Audio API for correct/incorrect feedback, gentle background effects, or interactions. Use an audio context.\n\u2022 Render entirely inside the existing HTML element with ID game-of-the-day-stage. You may create a canvas element inside it .\n\u2022 Have a game area exactly 720px wide by 480px tall.\n\u2022 Be written in clean, readable JavaScript with proper formatting, indentation, and comments.\n\u2022 Use modern JavaScript practices and avoid minification.\n\u2022 Include proper error handling for audio and resource loading.\n\u2022 Be accessible: include keyboard controls, text alternatives, visual cues for audio, clear instructions, and error handling.\n\u2022 Use ONLY canvas-drawn graphics and Web Audio API - NO external image URLs, NO external audio files, NO external dependencies.\n\u2022 Create all visual elements using canvas drawing methods (rect, arc, fillText, etc.).\n\u2022 Generate all sounds using Web Audio API oscillators and filters.\n\u2022 Include proper error handling for audio context creation.\n\u2022 Output only JavaScript code. No extra explanation, no markdown formatting, no code blocks, no HTML, no CSS.\n\u2022 Do not wrap the code in ```javascript or any other markdown formatting.",
  "response_tokens": 9804,
  "game_filename": "2025-08-27.js",
  "game_size_bytes": 27842,
  "functionality": {
    "score": 8,
    "max_score": 8,
    "percentage": 100.0,
    "passing": true,
    "issues": [],
    "warnings": []
  },
  "dependencies": {
    "has_external_deps": false,
    "issues": [],
    "warnings": [],
    "canvas_methods_used": 6
  },
  "improved_visuals_audio": true,
  "improve_prompt": "You are an expert educational game designer. \nTake the following JavaScript game code and improve ONLY the visuals and audio. \nDo not change the game mechanics or math logic. \nEnhance the visual appeal (colors, animations, backgrounds, characters), avoid overstimulation with sounds and visuals, and add or improve sound effects and background audio. \nRender entirely inside the existing HTML element with ID game-of-the-day-stage. You may create a canvas element inside it (do not include angle brackets in text instructions).\nHave a game area exactly 720px wide by 480px tall.\nBe written in clean, readable JavaScript with proper formatting, indentation, and comments.\nUse modern JavaScript practices and avoid minification.\nInclude proper error handling for audio and resource loading.\nUse ONLY canvas-drawn graphics and Web Audio API - NO external image URLs, NO external audio files, NO external dependencies.\nCreate all visual elements using canvas drawing methods (rect, arc, fillText, etc.).\nGenerate all sounds using Web Audio API oscillators and filters.\nInclude proper error handling for audio context creation.\nOutput only JavaScript code. No extra explanation, no markdown formatting, no code blocks.\nDo not wrap the code in ```javascript or any other markdown formatting.\n\n---\n(function() {\n  // Electricity Math Game for ages 7-9\n  // Renders into element with id \"game-of-the-day-stage\"\n  // All visuals drawn on a canvas sized 720x480\n  // Sounds generated with Web Audio API (oscillators & filters)\n  // Accessible: keyboard controls, aria-live text, visual cues, instructions\n\n  // -----------------------\n  // Setup DOM and Canvas\n  // -----------------------\n  const container = document.getElementById('game-of-the-day-stage');\n  if (!container) {\n    console.error('Game container element with id \"game-of-the-day-stage\" not found.');\n    return;\n  }\n\n  // Clear container and prepare\n  container.innerHTML = '';\n  container.style.position = 'relative';\n  container.setAttribute('role', 'application');\n  container.setAttribute('aria-label', 'Electricity math game for children. Use number keys 1-3 to choose answers.');\n\n  // Create canvas\n  const canvas = document.createElement('canvas');\n  canvas.width = 720;\n  canvas.height = 480;\n  canvas.style.width = '720px';\n  canvas.style.height = '480px';\n  canvas.setAttribute('role', 'img');\n  canvas.setAttribute('aria-label', 'Interactive canvas showing the electricity game.');\n  container.appendChild(canvas);\n  const ctx = canvas.getContext('2d');\n\n  // Hidden live region for screen readers\n  const live = document.createElement('div');\n  live.setAttribute('aria-live', 'polite');\n  live.style.position = 'absolute';\n  live.style.left = '-9999px';\n  live.style.width = '1px';\n  live.style.height = '1px';\n  live.style.overflow = 'hidden';\n  container.appendChild(live);\n\n  // For instructions visible on canvas but also as text for screen readers\n  function announce(text) {\n    try {\n      live.textContent = text;\n    } catch (e) {\n      // ignore\n    }\n  }\n\n  // -----------------------\n  // Audio setup & helpers\n  // -----------------------\n  let audioEnabled = false;\n  let audioContext = null;\n  let bgGain = null;\n  let bgOsc = null;\n  let bgRunning = false;\n\n  function tryCreateAudioContext() {\n    if (audioContext) return audioContext;\n    try {\n      const AC = window.AudioContext || window.webkitAudioContext;\n      if (!AC) throw new Error('Web Audio API not supported');\n      audioContext = new AC();\n      audioEnabled = true;\n    } catch (err) {\n      console.warn('Audio context creation failed or not allowed yet:', err);\n      audioContext = null;\n      audioEnabled = false;\n    }\n    return audioContext;\n  }\n\n  // Create/enable audio on user gesture if it wasn't allowed initially\n  function ensureAudioOnUserGesture() {\n    if (audioContext) return true;\n    try {\n      tryCreateAudioContext();\n      if (!audioContext) {\n        // Try to resume on gesture\n        const AC = window.AudioContext || window.webkitAudioContext;\n        if (AC) {\n          audioContext = new AC();\n          audioEnabled = true;\n        }\n      }\n    } catch (e) {\n      console.warn('Could not enable audio on gesture:', e);\n      audioEnabled = false;\n    }\n    return audioEnabled;\n  }\n\n  // Play a tone with envelope. type: 'sine','square','sawtooth','triangle'\n  function playTone(frequency = 440, duration = 0.3, type = 'sine', volume = 0.08) {\n    if (!audioContext) return;\n    try {\n      const now = audioContext.currentTime;\n      const osc = audioContext.createOscillator();\n      const gain = audioContext.createGain();\n      osc.type = type;\n      osc.frequency.value = frequency;\n      gain.gain.value = 0.0001;\n      osc.connect(gain);\n      // gentle character with a filter\n      const filter = audioContext.createBiquadFilter();\n      filter.type = 'lowpass';\n      filter.frequency.value = Math.max(600, frequency * 2);\n      gain.connect(filter);\n      filter.connect(audioContext.destination);\n\n      // Envelope\n      gain.gain.cancelScheduledValues(now);\n      gain.gain.setValueAtTime(0.0001, now);\n      gain.gain.exponentialRampToValueAtTime(volume, now + 0.02);\n      gain.gain.exponentialRampToValueAtTime(0.0001, now + duration);\n\n      osc.start(now);\n      osc.stop(now + duration + 0.05);\n\n      // cleanup\n      osc.onended = () => {\n        try {\n          osc.disconnect();\n          gain.disconnect();\n          filter.disconnect();\n        } catch (e) {}\n      };\n    } catch (e) {\n      console.warn('Error playing tone:', e);\n    }\n  }\n\n  function playCorrectSound() {\n    if (!ensureAudioOnUserGesture()) return;\n    // small cheerful arpeggio\n    playTone(880, 0.12, 'sine', 0.06);\n    setTimeout(() => playTone(1100, 0.15, 'triangle', 0.06), 120);\n    setTimeout(() => playTone(1320, 0.22, 'sine', 0.06), 260);\n  }\n\n  function playIncorrectSound() {\n    if (!ensureAudioOnUserGesture()) return;\n    // low buzz and quick thud\n    playTone(120, 0.25, 'sawtooth', 0.08);\n    setTimeout(() => playTone(80, 0.18, 'sine', 0.06), 200);\n  }\n\n  function startBackgroundHum() {\n    if (!ensureAudioOnUserGesture()) return;\n    if (!audioContext || bgRunning) return;\n    try {\n      bgOsc = audioContext.createOscillator();\n      const lfo = audioContext.createOscillator();\n      const lfoGain = audioContext.createGain();\n      bgGain = audioContext.createGain();\n\n      bgOsc.type = 'sine';\n      bgOsc.frequency.value = 80; // low hum\n      bgGain.gain.value = 0.02;\n\n      lfo.type = 'sine';\n      lfo.frequency.value = 0.12; // gentle wobble\n      lfoGain.gain.value = 0.015;\n\n      lfo.connect(lfoGain);\n      lfoGain.connect(bgGain.gain);\n      bgOsc.connect(bgGain);\n      bgGain.connect(audioContext.destination);\n\n      bgOsc.start();\n      lfo.start();\n      bgRunning = true;\n    } catch (e) {\n      console.warn('Background hum failed:', e);\n      bgRunning = false;\n    }\n  }\n\n  function stopBackgroundHum() {\n    if (!bgRunning || !audioContext) return;\n    try {\n      if (bgOsc) {\n        bgOsc.stop();\n        bgOsc.disconnect();\n      }\n      bgOsc = null;\n      bgRunning = false;\n    } catch (e) {\n      // ignore\n    }\n  }\n\n  // -----------------------\n  // Game Variables & State\n  // -----------------------\n  const GAME_W = canvas.width;\n  const GAME_H = canvas.height;\n\n  let running = true;\n  let lastTime = performance.now();\n\n  // Characters\n  const characters = {\n    drVolt: { x: 120, y: 120 },\n    sparky: { x: 600, y: 120 }\n  };\n\n  // Game progression\n  let score = 0;\n  let lives = 3;\n  let round = 0;\n  let currentQuestion = null;\n  let choices = [];\n  let chosenIndex = -1;\n  let feedbackTimer = 0;\n  let feedbackState = null; // 'correct'|'incorrect'|null\n  let roundsToLevelUp = 5;\n  let difficulty = 1;\n\n  // Animation elements\n  const sparks = []; // active spark animations\n  const floatingElectrons = []; // ambient floating dots\n\n  // Visual settings for accessibility\n  const highContrast = false;\n\n  // Create ambient floating electrons\n  for (let i = 0; i < 14; i++) {\n    floatingElectrons.push({\n      x: Math.random() * GAME_W,\n      y: Math.random() * GAME_H,\n      r: 3 + Math.random() * 5,\n      vx: -0.3 + Math.random() * 0.6,\n      vy: -0.2 + Math.random() * 0.4,\n      hue: 180 + Math.random() * 80\n    });\n  }\n\n  // -----------------------\n  // Math Question Generator\n  // -----------------------\n  function newQuestion() {\n    round++;\n    if ((round - 1) % roundsToLevelUp === 0 && round > 1) {\n      difficulty++;\n    }\n    // Determine problem type: addition or subtraction\n    const add = Math.random() < 0.6;\n    let a, b, correct;\n    if (difficulty === 1) {\n      a = Math.floor(Math.random() * 10) + 1; // 1-10\n      b = Math.floor(Math.random() * 10) + 1;\n    } else if (difficulty === 2) {\n      a = Math.floor(Math.random() * 20) + 1; // 1-20\n      b = Math.floor(Math.random() * 20) + 1;\n    } else {\n      a = Math.floor(Math.random() * 40) + 1; // 1-40\n      b = Math.floor(Math.random() * 40) + 1;\n    }\n\n    if (add) {\n      correct = a + b;\n      currentQuestion = { left: a, right: b, op: '+', correct };\n    } else {\n      // ensure non-negative\n      if (a < b) [a, b] = [b, a];\n      correct = a - b;\n      currentQuestion = { left: a, right: b, op: '-', correct };\n    }\n\n    // Create 3 choices: one correct, two distractors\n    const distractors = new Set();\n    while (distractors.size < 2) {\n      let delta = Math.floor(Math.random() * Math.max(3, Math.ceil(correct * 0.3 + 1))) + 1;\n      if (Math.random() < 0.5) delta = -delta;\n      const val = Math.max(0, correct + delta);\n      if (val !== correct) distractors.add(val);\n    }\n    choices = [currentQuestion.correct, ...Array.from(distractors)];\n    // Shuffle\n    for (let i = choices.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [choices[i], choices[j]] = [choices[j], choices[i]];\n    }\n    chosenIndex = -1;\n    feedbackState = null;\n    feedbackTimer = 0;\n    announce(`New question: ${currentQuestion.left} ${currentQuestion.op} ${currentQuestion.right}. Choose 1, 2, or 3.`);\n  }\n\n  // -----------------------\n  // Interaction Handling\n  // -----------------------\n  function handleChoice(index) {\n    if (!currentQuestion) return;\n    if (feedbackState) return; // wait until feedback finishes\n    chosenIndex = index;\n    const value = choices[index];\n    if (value === currentQuestion.correct) {\n      // correct\n      score += 10 * difficulty;\n      playCorrectSound();\n      feedbackState = 'correct';\n      feedbackTimer = 0;\n      // create spark animation from battery to bulb\n      sparks.push({\n        x: 120,\n        y: 220,\n        tx: 540,\n        ty: 220 + index * 90,\n        t: 0,\n        color: 'gold'\n      });\n      announce('Correct! The lamp lights up.');\n      // small particle burst\n      for (let i = 0; i < 6; i++) {\n        sparks.push({\n          x: 540,\n          y: 220 + index * 90,\n          vx: (Math.random() - 0.5) * 4,\n          vy: (Math.random() - 0.8) * 4,\n          life: 0.6 + Math.random() * 0.6,\n          color: 'rgba(255,220,120,0.9)'\n        });\n      }\n      // prepare next question after a short delay\n      setTimeout(() => {\n        newQuestion();\n      }, 1000);\n    } else {\n      // incorrect\n      lives = Math.max(0, lives - 1);\n      playIncorrectSound();\n      feedbackState = 'incorrect';\n      feedbackTimer = 0;\n      announce('Oops, that was not right. Try the next one.');\n      // fizzle sparks\n      for (let i = 0; i < 5; i++) {\n        sparks.push({\n          x: 540,\n          y: 220 + index * 90,\n          vx: (Math.random() - 0.5) * 3,\n          vy: (Math.random() - 0.5) * 3,\n          life: 0.5 + Math.random() * 0.4,\n          color: 'rgba(200,80,80,0.9)'\n        });\n      }\n      // if no lives left, end game\n      if (lives <= 0) {\n        setTimeout(() => {\n          endGame();\n        }, 700);\n      } else {\n        // continue with new question\n        setTimeout(() => {\n          newQuestion();\n        }, 900);\n      }\n    }\n  }\n\n  // Mouse / touch handling\n  canvas.addEventListener('click', function(evt) {\n    const rect = canvas.getBoundingClientRect();\n    const x = (evt.clientX - rect.left) * (canvas.width / rect.width);\n    const y = (evt.clientY - rect.top) * (canvas.height / rect.height);\n    // If clicked on speaker icon\n    if (x >= 650 && x <= 692 && y >= 10 && y <= 52) {\n      audioEnabled = !audioEnabled;\n      if (audioEnabled) {\n        ensureAudioOnUserGesture();\n        startBackgroundHum();\n        announce('Sound enabled');\n      } else {\n        stopBackgroundHum();\n        announce('Sound muted');\n      }\n      return;\n    }\n\n    // Bulbs area on right side at positions 220 + index * 90\n    for (let i = 0; i < 3; i++) {\n      const bx = 520;\n      const by = 220 + i * 90;\n      const br = 40;\n      if ((x - bx) * (x - bx) + (y - by) * (y - by) <= br * br) {\n        handleChoice(i);\n        return;\n      }\n    }\n    // Click on battery area to enable audio if needed\n    if (!audioContext) {\n      ensureAudioOnUserGesture();\n      if (audioEnabled) {\n        startBackgroundHum();\n      }\n    }\n  });\n\n  // Keyboard controls\n  window.addEventListener('keydown', (e) => {\n    if (e.repeat) return;\n    // Allow number keys 1,2,3 or keys Q,W,E for left-handed\n    if (e.key === '1' || e.key === 'q' || e.key === 'Q') {\n      handleChoice(0);\n      e.preventDefault();\n    } else if (e.key === '2' || e.key === 'w' || e.key === 'W') {\n      handleChoice(1);\n      e.preventDefault();\n    } else if (e.key === '3' || e.key === 'e' || e.key === 'E') {\n      handleChoice(2);\n      e.preventDefault();\n    } else if (e.key === 'm' || e.key === 'M') {\n      audioEnabled = !audioEnabled;\n      if (audioEnabled) {\n        ensureAudioOnUserGesture();\n        startBackgroundHum();\n        announce('Sound enabled');\n      } else {\n        stopBackgroundHum();\n        announce('Sound muted');\n      }\n    } else if (e.key === 'Enter') {\n      if (!currentQuestion) {\n        startGame();\n      } else if (!feedbackState) {\n        // If no feedback, do nothing\n      }\n    }\n  });\n\n  // -----------------------\n  // Drawing Functions\n  // -----------------------\n  function drawBackground() {\n    // soft gradient sky\n    const g = ctx.createLinearGradient(0, 0, 0, GAME_H);\n    g.addColorStop(0, '#eaf7ff');\n    g.addColorStop(1, '#f7fbff');\n    ctx.fillStyle = g;\n    ctx.fillRect(0, 0, GAME_W, GAME_H);\n\n    // wacky hills\n    drawWavyHills();\n    // floating electrons\n    for (const e of floatingElectrons) {\n      ctx.beginPath();\n      ctx.fillStyle = `hsla(${e.hue},70%,60%,0.18)`;\n      ctx.arc(e.x, e.y, e.r, 0, Math.PI * 2);\n      ctx.fill();\n    }\n  }\n\n  function drawWavyHills() {\n    // simple wavy shapes for interest\n    ctx.save();\n    ctx.globalAlpha = 0.7;\n    ctx.fillStyle = '#dff6e3';\n    ctx.beginPath();\n    ctx.moveTo(0, 360);\n    ctx.quadraticCurveTo(180, 320, 360, 360);\n    ctx.quadraticCurveTo(540, 400, 720, 360);\n    ctx.lineTo(720, 480);\n    ctx.lineTo(0, 480);\n    ctx.closePath();\n    ctx.fill();\n\n    ctx.fillStyle = '#fff7e6';\n    ctx.beginPath();\n    ctx.moveTo(0, 420);\n    ctx.quadraticCurveTo(240, 380, 480, 420);\n    ctx.quadraticCurveTo(600, 440, 720, 420);\n    ctx.lineTo(720, 480);\n    ctx.lineTo(0, 480);\n    ctx.closePath();\n    ctx.globalAlpha = 0.6;\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  function drawCharacters() {\n    // Dr. Volt (battery scientist)\n    const x = characters.drVolt.x;\n    const y = characters.drVolt.y;\n    ctx.save();\n    ctx.translate(x, y);\n    // body (battery)\n    ctx.fillStyle = '#ffe680';\n    ctx.strokeStyle = '#b38b00';\n    ctx.lineWidth = 3;\n    roundRect(ctx, -50, -30, 100, 120, 12, true, true);\n    // terminals\n    ctx.fillStyle = '#ffd27a';\n    ctx.fillRect(-14, -36, 28, 8);\n    // eyes and smile\n    ctx.fillStyle = '#333';\n    ctx.beginPath();\n    ctx.arc(-18, 10, 6, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.beginPath();\n    ctx.arc(18, 10, 6, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.strokeStyle = '#333';\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.moveTo(-22, 28);\n    ctx.quadraticCurveTo(0, 40, 22, 28);\n    ctx.stroke();\n    // lab goggles\n    ctx.strokeStyle = '#5ec8ff';\n    ctx.lineWidth = 3;\n    ctx.strokeRect(-34, -4, 68, 18);\n    ctx.restore();\n\n    // Sparky (lamp)\n    const sx = characters.sparky.x;\n    const sy = characters.sparky.y;\n    ctx.save();\n    ctx.translate(sx, sy);\n    // bulb\n    ctx.beginPath();\n    ctx.fillStyle = '#fff4b8';\n    ctx.strokeStyle = '#f6c84a';\n    ctx.lineWidth = 3;\n    ctx.ellipse(0, 20, 36, 44, 0, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.stroke();\n\n    // filament smiley\n    ctx.strokeStyle = '#b36b00';\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.moveTo(-10, 10);\n    ctx.quadraticCurveTo(0, 22, 10, 10);\n    ctx.stroke();\n\n    // base\n    ctx.fillStyle = '#b7c9d9';\n    ctx.fillRect(-20, 60, 40, 18);\n    ctx.restore();\n\n    // small labels\n    ctx.fillStyle = '#333';\n    ctx.font = '14px Arial';\n    ctx.fillText('Dr. Volt', 70, 70);\n    ctx.fillText('Sparky', 560, 70);\n  }\n\n  function drawMachineAndChoices() {\n    // left battery\n    const bx = 120, by = 220;\n    ctx.save();\n    // battery box\n    roundRect(ctx, bx - 60, by - 30, 120, 60, 8, true, true);\n    ctx.fillStyle = '#fff';\n    ctx.font = '18px Arial';\n    ctx.fillStyle = '#333';\n    ctx.fillText('Power Plant', bx - 50, by + 6);\n    // little lightning icon\n    ctx.fillStyle = '#ffd24d';\n    ctx.beginPath();\n    ctx.moveTo(bx + 40, by - 18);\n    ctx.lineTo(bx + 26, by - 6);\n    ctx.lineTo(bx + 34, by - 6);\n    ctx.lineTo(bx + 18, by + 12);\n    ctx.lineTo(bx + 32, by - 8);\n    ctx.lineTo(bx + 24, by - 8);\n    ctx.closePath();\n    ctx.fill();\n    ctx.restore();\n\n    // three wires to bulbs\n    for (let i = 0; i < 3; i++) {\n      const y = 220 + i * 90;\n      drawCurvyWire(180, 220, 480, y, i);\n    }\n\n    // bulbs on right\n    for (let i = 0; i < 3; i++) {\n      const cx = 540, cy = 220 + i * 90;\n      drawBulb(cx, cy, 40, choices[i], i);\n    }\n\n    // Show question panel\n    ctx.save();\n    ctx.fillStyle = 'rgba(255,255,255,0.9)';\n    roundRect(ctx, 240, 30, 240, 90, 12, true, true);\n    ctx.fillStyle = '#333';\n    ctx.font = '22px Arial';\n    if (currentQuestion) {\n      ctx.fillText(`Q: ${currentQuestion.left} ${currentQuestion.op} ${currentQuestion.right} = ?`, 260, 62);\n      ctx.font = '18px Arial';\n      ctx.fillText('Pick the right lamp: 1, 2, or 3', 260, 90);\n    } else {\n      ctx.fillText('Press Enter to start', 270, 62);\n      ctx.font = '16px Arial';\n      ctx.fillText('Help Dr. Volt light the lamps by solving sums!', 260, 90);\n    }\n    ctx.restore();\n  }\n\n  function drawBulb(x, y, r, label, index) {\n    ctx.save();\n    // Outer glow if selected or correct/incorrect\n    let lit = false;\n    if (feedbackState === 'correct' && chosenIndex === index) lit = true;\n    // Sphere\n    ctx.beginPath();\n    ctx.fillStyle = lit ? '#fff9c4' : '#f7f7f9';\n    ctx.ellipse(x, y, r, r + 8, 0, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = lit ? '#f6c84a' : '#d1d7df';\n    ctx.stroke();\n\n    // If it's the chosen index during incorrect feedback, show red ring\n    if (feedbackState === 'incorrect' && chosenIndex === index) {\n      ctx.strokeStyle = 'rgba(220,80,80,0.9)';\n      ctx.lineWidth = 5;\n      ctx.beginPath();\n      ctx.ellipse(x, y, r + 6, r + 14, 0, 0, Math.PI * 2);\n      ctx.stroke();\n    }\n\n    // filaments\n    ctx.strokeStyle = '#b36b00';\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.moveTo(x - 8, y + 4);\n    ctx.quadraticCurveTo(x, y - 8, x + 8, y + 4);\n    ctx.stroke();\n\n    // base\n    ctx.fillStyle = '#b7c9d9';\n    ctx.fillRect(x - 22, y + r + 6, 44, 16);\n\n    // label\n    ctx.fillStyle = '#222';\n    ctx.font = '18px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText(String(label), x, y + 4);\n\n    // draw number index (1-3)\n    ctx.font = '12px Arial';\n    ctx.fillStyle = '#555';\n    ctx.fillText(String(index + 1), x + r + 18, y + 4);\n\n    ctx.restore();\n  }\n\n  function drawCurvyWire(sx, sy, tx, ty, i) {\n    ctx.save();\n    ctx.lineWidth = 8;\n    const hue = 190 + i * 30;\n    ctx.strokeStyle = `hsl(${hue},70%,45%)`;\n    ctx.beginPath();\n    ctx.moveTo(sx, sy);\n    const mx = (sx + tx) / 2 + (i - 1) * 30;\n    const my = (sy + ty) / 2 + (i - 1) * 10;\n    ctx.quadraticCurveTo(mx, my, tx - 40, ty);\n    ctx.stroke();\n\n    // little electrons traveling along wire as animated dots\n    const t = (performance.now() / 800 + i * 0.4) % 1;\n    const pos = pointOnQuadratic(sx, sy, mx, my, tx - 40, ty, t);\n    ctx.beginPath();\n    ctx.fillStyle = `hsla(${hue},80%,60%,0.95)`;\n    ctx.arc(pos.x, pos.y, 6, 0, Math.PI * 2);\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  function drawHUD() {\n    // top-left panel for score and lives\n    ctx.save();\n    ctx.fillStyle = 'rgba(255,255,255,0.92)';\n    roundRect(ctx, 10, 10, 200, 64, 10, true, true);\n    ctx.fillStyle = '#333';\n    ctx.font = '18px Arial';\n    ctx.fillText(`Score: ${score}`, 24, 36);\n    ctx.fillText(`Lives: ${lives}`, 24, 58);\n\n    // speaker icon top-right (visual cue for audio)\n    ctx.fillStyle = audioEnabled ? '#ffd24d' : '#d0d0d0';\n    ctx.strokeStyle = '#333';\n    roundRect(ctx, 650, 10, 42, 42, 8, true, true);\n    ctx.fillStyle = '#333';\n    // draw simplified speaker\n    ctx.beginPath();\n    ctx.moveTo(656, 22);\n    ctx.lineTo(668, 22);\n    ctx.lineTo(680, 14);\n    ctx.lineTo(680, 42);\n    ctx.lineTo(668, 34);\n    ctx.lineTo(656, 34);\n    ctx.closePath();\n    ctx.fill();\n\n    if (audioEnabled) {\n      ctx.beginPath();\n      ctx.strokeStyle = '#ffeb99';\n      ctx.lineWidth = 2;\n      ctx.arc(690, 30, 8, -0.8, 0.8);\n      ctx.stroke();\n    } else {\n      ctx.beginPath();\n      ctx.strokeStyle = '#777';\n      ctx.lineWidth = 2;\n      ctx.moveTo(682, 22);\n      ctx.lineTo(698, 38);\n      ctx.stroke();\n    }\n    ctx.restore();\n\n    // bottom instruction footer\n    ctx.save();\n    ctx.fillStyle = 'rgba(255,255,255,0.9)';\n    roundRect(ctx, 0, GAME_H - 52, GAME_W, 52, 0, true, false);\n    ctx.fillStyle = '#333';\n    ctx.font = '16px Arial';\n    ctx.fillText('Use keys 1-3 or click a lamp. Press M to mute/unmute. Press Enter to start.', 18, GAME_H - 22);\n    ctx.restore();\n  }\n\n  // Helpers: draw rounded rectangle\n  function roundRect(ctx, x, y, w, h, r, fill, stroke) {\n    if (typeof stroke === 'undefined') stroke = true;\n    if (typeof r === 'undefined') r = 5;\n    ctx.beginPath();\n    ctx.moveTo(x + r, y);\n    ctx.arcTo(x + w, y, x + w, y + h, r);\n    ctx.arcTo(x + w, y + h, x, y + h, r);\n    ctx.arcTo(x, y + h, x, y, r);\n    ctx.arcTo(x, y, x + w, y, r);\n    ctx.closePath();\n    if (fill) ctx.fill();\n    if (stroke) ctx.stroke();\n  }\n\n  // Compute point on quadratic Bezier given t\n  function pointOnQuadratic(x0, y0, cx, cy, x1, y1, t) {\n    const u = 1 - t;\n    const x = u * u * x0 + 2 * u * t * cx + t * t * x1;\n    const y = u * u * y0 + 2 * u * t * cy + t * t * y1;\n    return { x, y };\n  }\n\n  // -----------------------\n  // Spark/Particle Animation\n  // -----------------------\n  function updateSparks(dt) {\n    // sparks can be travel sparks or particles with vx vy life\n    for (let i = sparks.length - 1; i >= 0; i--) {\n      const s = sparks[i];\n      if (s.t !== undefined) {\n        // travel spark\n        s.t += dt * 0.9;\n        if (s.t >= 1) {\n          sparks.splice(i, 1);\n        }\n      } else if (s.life !== undefined) {\n        s.life -= dt;\n        s.x += (s.vx || 0) * 40 * dt;\n        s.y += (s.vy || 0) * 40 * dt;\n        if (s.life <= 0) sparks.splice(i, 1);\n      } else {\n        sparks.splice(i, 1);\n      }\n    }\n  }\n\n  function drawSparks() {\n    for (const s of sparks) {\n      if (s.t !== undefined) {\n        const p = {\n          x: s.x + (s.tx - s.x) * easeOutExpo(s.t),\n          y: s.y + (s.ty - s.y) * easeOutExpo(s.t)\n        };\n        ctx.beginPath();\n        ctx.fillStyle = s.color || 'gold';\n        ctx.arc(p.x, p.y, 6, 0, Math.PI * 2);\n        ctx.fill();\n        // trail\n        ctx.beginPath();\n        ctx.fillStyle = 'rgba(255,255,200,0.3)';\n        ctx.arc(p.x - 8, p.y - 2, 4, 0, Math.PI * 2);\n        ctx.fill();\n      } else if (s.life !== undefined) {\n        const alpha = Math.max(0, s.life / 1.2);\n        ctx.beginPath();\n        ctx.fillStyle = withAlpha(s.color, alpha);\n        ctx.arc(s.x, s.y, 5 + (1 - alpha) * 6, 0, Math.PI * 2);\n        ctx.fill();\n      }\n    }\n  }\n\n  function withAlpha(color, a) {\n    // naive parse for rgba or hex; if rgba return with new alpha; else wrap as rgba( r,g,b,a)\n    if (color.startsWith('rgba')) {\n      return color.replace(/rgba\\(([^,]+),([^,]+),([^,]+),([^)]+)\\)/, `rgba($1,$2,$3,${a})`);\n    }\n    // fallback: return color as is\n    return color;\n  }\n\n  // -----------------------\n  // Game Flow\n  // -----------------------\n  function startGame() {\n    score = 0;\n    lives = 3;\n    round = 0;\n    difficulty = 1;\n    sparks.length = 0;\n    newQuestion();\n    announce('Game started. Solve the questions to light up the lamps!');\n  }\n\n  function endGame() {\n    currentQuestion = null;\n    choices = [];\n    feedbackState = null;\n    announce(`Game over. Your final score is ${score}. Press Enter to play again.`);\n    // show big overlay; let drawing handle it\n  }\n\n  // -----------------------\n  // Utility easing\n  // -----------------------\n  function easeOutExpo(t) {\n    return t === 1 ? 1 : 1 - Math.pow(2, -10 * t);\n  }\n\n  // -----------------------\n  // Main Loop: update & draw\n  // -----------------------\n  function update(dt) {\n    // ambient electrons drift\n    for (const e of floatingElectrons) {\n      e.x += e.vx * dt * 40;\n      e.y += e.vy * dt * 40;\n      if (e.x < -10) e.x = GAME_W + 10;\n      if (e.x > GAME_W + 10) e.x = -10;\n      if (e.y < 40) e.y = GAME_H - 20;\n      if (e.y > GAME_H - 20) e.y = 40;\n    }\n\n    // update sparks\n    updateSparks(dt);\n\n    // feedback timer\n    if (feedbackState) {\n      feedbackTimer += dt;\n      if (feedbackTimer > 1.2) {\n        feedbackState = null;\n        feedbackTimer = 0;\n      }\n    }\n  }\n\n  function draw() {\n    // clear\n    ctx.clearRect(0, 0, GAME_W, GAME_H);\n    drawBackground();\n\n    // machine & bulbs\n    drawMachineAndChoices();\n\n    // draw sparks\n    drawSparks();\n\n    // draw characters & HUD on top\n    drawCharacters();\n    drawHUD();\n\n    // overlay if no lives\n    if (lives <= 0) {\n      ctx.save();\n      ctx.fillStyle = 'rgba(10,10,20,0.6)';\n      ctx.fillRect(0, 0, GAME_W, GAME_H);\n      ctx.fillStyle = '#fff';\n      ctx.font = '36px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText('Oh no! The lights went out!', GAME_W / 2, GAME_H / 2 - 20);\n      ctx.font = '22px Arial';\n      ctx.fillText(`Score: ${score}`, GAME_W / 2, GAME_H / 2 + 14);\n      ctx.font = '18px Arial';\n      ctx.fillText('Press Enter to try again.', GAME_W / 2, GAME_H / 2 + 54);\n      ctx.restore();\n    }\n\n    // help text for audio status\n    if (!audioContext) {\n      ctx.save();\n      ctx.fillStyle = 'rgba(255,255,255,0.95)';\n      roundRect(ctx, 200, 380, 320, 70, 12, true, true);\n      ctx.fillStyle = '#333';\n      ctx.font = '16px Arial';\n      ctx.fillText('Sound is disabled by the browser. Click or press any key to enable sound.', 210, 412);\n      ctx.font = '14px Arial';\n      ctx.fillText('You can mute/unmute with M.', 210, 430);\n      ctx.restore();\n    }\n  }\n\n  function loop(now) {\n    if (!running) return;\n    const dt = Math.min(0.04, (now - lastTime) / 1000);\n    lastTime = now;\n    update(dt);\n    draw();\n    requestAnimationFrame(loop);\n  }\n\n  // -----------------------\n  // Start background and animation\n  // -----------------------\n  // Some browsers require user interaction to start audio. We attempt to create context,\n  // but if it fails we'll enable when user clicks or presses keys.\n  tryCreateAudioContext();\n\n  // start background hum if audio allowed\n  if (audioContext) {\n    audioEnabled = true;\n    startBackgroundHum();\n  } else {\n    audioEnabled = false;\n  }\n\n  // Kick off loop\n  requestAnimationFrame(loop);\n\n  // Provide initial instruction announce\n  announce('Welcome! Press Enter to start the Electricity Math Game. Use keys 1-3 or click lamps to answer.');\n\n  // If Enter pressed while at end of game, restart\n  window.addEventListener('keydown', function(e) {\n    if (e.key === 'Enter') {\n      if (lives <= 0 || !currentQuestion) {\n        startGame();\n      }\n    }\n  });\n\n  // Expose a small API on the container for testing/debugging (non-essential)\n  container._electricGame = {\n    start: startGame,\n    stop: () => (running = false),\n    setAudioEnabled: function(on) {\n      audioEnabled = !!on;\n      if (audioEnabled) {\n        ensureAudioOnUserGesture();\n        startBackgroundHum();\n      } else {\n        stopBackgroundHum();\n      }\n    }\n  };\n\n  // -----------------------\n  // Error handling note for audio\n  // -----------------------\n  // Listen for unhandled audio exceptions to show user-friendly info\n  window.addEventListener('unhandledrejection', (ev) => {\n    console.warn('Unhandled rejection: ', ev.reason);\n  });\n\n  // -----------------------\n  // End of game script\n  // -----------------------\n})();\n---\n",
  "improve_response_tokens": 20331,
  "formatted_code": true,
  "formatting_response_tokens": 22815,
  "final_functionality": {
    "score": 8,
    "max_score": 8,
    "percentage": 100.0,
    "passing": true,
    "issues": [],
    "warnings": []
  }
}