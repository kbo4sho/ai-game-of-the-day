{
  "generated_date": "2025-08-19",
  "generated_timestamp": "2025-08-19T03:16:47.065267",
  "model": "gpt-5-mini",
  "theme": "electricity",
  "prompt": "You are an expert educational game designer. Each day, you will generate a fun, playable math game in JavaScript for children ages 7 to 9, focused on foundational concepts. Today's theme: electricity\n\nThe game must:\n\u2022 Be engaging and fun first by having a primary visually interesting game mechanic, age-appropriate, and suitable for early learners.\n\u2022 Reinforce the math concept through a real-world narratives tied to theme.\n\u2022 Include fun, unique memorable characters tied to the theme.\n\u2022 Use visually calming and interesting and wacky elements.\n\u2022 Include sound, using the Web Audio API for correct/incorrect feedback, gentle background effects, or interactions.\n\u2022 Render entirely inside the existing HTML element with ID game-of-the-day-stage. You may create a <canvas> inside it.\n\u2022 Have a game area exactly 720px wide by 480px tall.\n\u2022 Be written in clean, readable JavaScript with proper formatting, indentation, and comments.\n\u2022 Use modern JavaScript practices and avoid minification.\n\u2022 Include proper error handling for audio and resource loading.\n\u2022 Be accessible: include keyboard controls, text alternatives, visual cues for audio, clear instructions, and error handling.\n\u2022 Use ONLY canvas-drawn graphics and Web Audio API - NO external image URLs, NO external audio files, NO external dependencies.\n\u2022 Create all visual elements using canvas drawing methods (rect, arc, fillText, etc.).\n\u2022 Generate all sounds using Web Audio API oscillators and filters.\n\u2022 Include proper error handling for audio context creation.\n\u2022 Output only JavaScript code. No extra explanation, no markdown formatting, no code blocks, no HTML, no CSS.\n\u2022 Do not wrap the code in ```javascript or any other markdown formatting.",
  "response_tokens": 8975,
  "game_filename": "2025-08-19.js",
  "game_size_bytes": 24001,
  "functionality": {
    "score": 8,
    "max_score": 8,
    "percentage": 100.0,
    "passing": true,
    "issues": [],
    "warnings": []
  },
  "dependencies": {
    "has_external_deps": false,
    "issues": [],
    "warnings": [],
    "canvas_methods_used": 5
  },
  "improved_visuals_audio": true,
  "improve_prompt": "You are an expert educational game designer. \nTake the following JavaScript game code and improve ONLY the visuals and audio. \nDo not change the game mechanics or math logic. \nEnhance the visual appeal (colors, animations, backgrounds, characters), avoid overstimulation with sounds and visuals, and add or improve sound effects and background audio. \nRender entirely inside the existing HTML element with ID game-of-the-day-stage. You may create a <canvas> inside it.\nHave a game area exactly 720px wide by 480px tall.\nBe written in clean, readable JavaScript with proper formatting, indentation, and comments.\nUse modern JavaScript practices and avoid minification.\nInclude proper error handling for audio and resource loading.\nUse ONLY canvas-drawn graphics and Web Audio API - NO external image URLs, NO external audio files, NO external dependencies.\nCreate all visual elements using canvas drawing methods (rect, arc, fillText, etc.).\nGenerate all sounds using Web Audio API oscillators and filters.\nInclude proper error handling for audio context creation.\nOutput only JavaScript code. No extra explanation, no markdown formatting, no code blocks.\nDo not wrap the code in ```javascript or any other markdown formatting.\n\n---\n(function () {\n  // Electricity Math Game for ages 7-9\n  // Render entirely inside element with ID 'game-of-the-day-stage'\n  // Uses canvas for visuals and Web Audio API for sounds (no external resources)\n  // Accessible: keyboard controls, aria labels, on-screen instructions, audio visual cue\n\n  // --- Configuration ---\n  const WIDTH = 720;\n  const HEIGHT = 480;\n  const BATTERY_COUNT = 6;\n  const TARGET_MIN = 5;\n  const TARGET_MAX = 12;\n  const CHAR_COLORS = { sparky: '#FFB86B', amp: '#FFF39A', bolt: '#A0E7E5' };\n  const BG_COLOR = '#0B1020';\n  const TEXT_COLOR = '#E6F0FF';\n\n  // --- Container and Canvas Setup ---\n  const container = document.getElementById('game-of-the-day-stage');\n  if (!container) {\n    console.error('Game container element with id \"game-of-the-day-stage\" not found.');\n    return;\n  }\n  container.innerHTML = '';\n  container.style.fontFamily = 'sans-serif';\n\n  const canvas = document.createElement('canvas');\n  canvas.width = WIDTH;\n  canvas.height = HEIGHT;\n  canvas.tabIndex = 0; // focusable for keyboard\n  canvas.setAttribute('role', 'application');\n  canvas.setAttribute('aria-label', 'Power-Up Math: connect batteries to charge the bulb. Keyboard controls available.');\n  canvas.style.outline = 'none';\n  container.appendChild(canvas);\n\n  // Hidden live region for screen reader updates\n  const srLive = document.createElement('div');\n  srLive.setAttribute('aria-live', 'polite');\n  srLive.style.position = 'absolute';\n  srLive.style.left = '-9999px';\n  container.appendChild(srLive);\n\n  const ctx = canvas.getContext('2d');\n\n  // --- Audio Setup and Utilities ---\n  let audioCtx = null;\n  let masterGain = null;\n  let backgroundGain = null;\n  let backgroundOsc = null;\n  let audioEnabled = true;\n  let audioAvailable = true;\n\n  function initAudioIfNeeded() {\n    if (audioCtx) return;\n    try {\n      const AudioCtx = window.AudioContext || window.webkitAudioContext;\n      audioCtx = new AudioCtx();\n      masterGain = audioCtx.createGain();\n      masterGain.gain.value = 0.9;\n      masterGain.connect(audioCtx.destination);\n\n      // gentle background hum\n      backgroundGain = audioCtx.createGain();\n      backgroundGain.gain.value = 0.05;\n      backgroundGain.connect(masterGain);\n\n      backgroundOsc = audioCtx.createOscillator();\n      backgroundOsc.type = 'sine';\n      backgroundOsc.frequency.value = 110; // low hum\n      const bgFilter = audioCtx.createBiquadFilter();\n      bgFilter.type = 'lowpass';\n      bgFilter.frequency.value = 900;\n      backgroundOsc.connect(bgFilter);\n      bgFilter.connect(backgroundGain);\n      backgroundOsc.start();\n\n      // start muted: will be audible only if audioEnabled true\n      updateAudioGain();\n    } catch (err) {\n      console.warn('AudioContext unavailable:', err);\n      audioAvailable = false;\n      audioCtx = null;\n    }\n  }\n\n  function updateAudioGain() {\n    if (!masterGain) return;\n    masterGain.gain.value = audioEnabled ? 0.9 : 0.0;\n  }\n\n  function safeResumeAudio() {\n    if (!audioCtx) return;\n    if (typeof audioCtx.resume === 'function') {\n      audioCtx.resume().catch((e) => {\n        console.warn('Audio resume failed:', e);\n      });\n    }\n  }\n\n  // play a short tone with envelope\n  function playTone(frequency, type = 'sine', duration = 0.18, gain = 0.12) {\n    if (!audioAvailable) return;\n    try {\n      initAudioIfNeeded();\n      const osc = audioCtx.createOscillator();\n      const g = audioCtx.createGain();\n      const filter = audioCtx.createBiquadFilter();\n      filter.type = 'lowpass';\n      filter.frequency.value = 1200;\n      osc.type = type;\n      osc.frequency.value = frequency;\n      g.gain.setValueAtTime(0.0001, audioCtx.currentTime);\n      g.gain.exponentialRampToValueAtTime(gain, audioCtx.currentTime + 0.02);\n      g.gain.exponentialRampToValueAtTime(0.0001, audioCtx.currentTime + duration);\n      osc.connect(filter);\n      filter.connect(g);\n      g.connect(masterGain);\n      osc.start();\n      osc.stop(audioCtx.currentTime + duration + 0.05);\n    } catch (err) {\n      console.warn('playTone error:', err);\n    }\n  }\n\n  function playCorrect() {\n    if (!audioAvailable) return;\n    try {\n      initAudioIfNeeded();\n      safeResumeAudio();\n      // simple arpeggio\n      playTone(880, 'triangle', 0.12, 0.12);\n      setTimeout(() => playTone(1100, 'sine', 0.12, 0.14), 90);\n      setTimeout(() => playTone(1320, 'sine', 0.18, 0.16), 180);\n    } catch (err) {\n      console.warn('playCorrect error:', err);\n    }\n  }\n\n  function playWrong() {\n    if (!audioAvailable) return;\n    try {\n      initAudioIfNeeded();\n      safeResumeAudio();\n      const now = audioCtx.currentTime;\n      const osc = audioCtx.createOscillator();\n      const g = audioCtx.createGain();\n      osc.type = 'square';\n      osc.frequency.value = 220;\n      g.gain.setValueAtTime(0.0001, now);\n      g.gain.exponentialRampToValueAtTime(0.18, now + 0.01);\n      g.gain.exponentialRampToValueAtTime(0.0001, now + 0.5);\n      osc.connect(g);\n      g.connect(masterGain);\n      osc.start();\n      osc.frequency.setValueAtTime(220, now);\n      osc.frequency.linearRampToValueAtTime(80, now + 0.45);\n      osc.stop(now + 0.55);\n    } catch (err) {\n      console.warn('playWrong error:', err);\n    }\n  }\n\n  function playClick() {\n    playTone(600, 'sine', 0.08, 0.08);\n  }\n\n  // --- Game State ---\n  let batteries = []; // {x,y,r,value,selected,index}\n  let targetNumber = 0;\n  let selectedSum = 0;\n  let score = 0;\n  let round = 0;\n  let message = 'Click batteries or use arrow keys and Enter. Press C to check.';\n  let shakeTimer = 0;\n  let sparkles = [];\n  let keyIndex = 0; // keyboard highlight index\n  let muteIconPulse = 0;\n\n  // --- Utility functions ---\n  function randInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  function shuffle(arr) {\n    for (let i = arr.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n  }\n\n  // Create a battery values list that guarantees at least one subset sums to target\n  function generateValuesForTarget(target) {\n    // Choose how many items in valid subset (1 to 3)\n    const subsetCount = randInt(1, Math.min(3, BATTERY_COUNT));\n    let remain = target;\n    const subset = [];\n    for (let i = 0; i < subsetCount; i++) {\n      const maxAllow = Math.min(6, remain - (subsetCount - i - 1) * 1);\n      const val = randInt(1, Math.max(1, maxAllow));\n      subset.push(val);\n      remain -= val;\n    }\n    // If remain > 0 add to last\n    if (remain > 0) {\n      subset[subset.length - 1] += remain;\n    }\n    // Fill remaining batteries\n    const values = subset.slice();\n    while (values.length < BATTERY_COUNT) {\n      values.push(randInt(1, 6));\n    }\n    shuffle(values);\n    return values;\n  }\n\n  // Generate a round (target and battery positions)\n  function newRound() {\n    round += 1;\n    targetNumber = randInt(TARGET_MIN, TARGET_MAX);\n    const values = generateValuesForTarget(targetNumber);\n    batteries = [];\n    const padding = 30;\n    const areaLeft = 140; // left area reserved for character\n    const gridCols = 3;\n    const gridRows = 2;\n    const cellW = (WIDTH - areaLeft - padding * 2) / gridCols;\n    const cellH = (HEIGHT - padding * 2) / gridRows;\n    let i = 0;\n    for (let r = 0; r < gridRows; r++) {\n      for (let c = 0; c < gridCols; c++) {\n        const x = areaLeft + padding + c * cellW + cellW / 2;\n        const y = padding + r * cellH + cellH / 2;\n        const b = {\n          x,\n          y,\n          r: 26,\n          value: values[i],\n          selected: false,\n          index: i,\n          id: i,\n        };\n        batteries.push(b);\n        i++;\n      }\n    }\n    selectedSum = 0;\n    keyIndex = 0;\n    message = 'Power up the bulb to reach ' + targetNumber + '. Select batteries to add.';\n    srLive.textContent = `Round ${round}. Target ${targetNumber}. ${message}`;\n  }\n\n  // Validate if subset equals target (used when checking)\n  function checkSelection() {\n    if (selectedSum === targetNumber) {\n      score += 1;\n      message = 'Perfect! Amp is charged!';\n      playCorrect();\n      spawnSparkles(batteries.filter((b) => b.selected));\n      setTimeout(() => {\n        newRound();\n      }, 1100);\n    } else {\n      message = `Not quite. Sum is ${selectedSum}. Try again.`;\n      playWrong();\n      shakeTimer = 20;\n    }\n    srLive.textContent = message;\n  }\n\n  function toggleBatterySelection(index) {\n    const b = batteries[index];\n    if (!b) return;\n    b.selected = !b.selected;\n    recalcSum();\n    playClick();\n    srLive.textContent = `Battery ${index + 1} is now ${b.selected ? 'selected' : 'deselected'}. Sum is ${selectedSum}.`;\n  }\n\n  function recalcSum() {\n    selectedSum = batteries.reduce((s, b) => s + (b.selected ? b.value : 0), 0);\n  }\n\n  // Sparkle effect on correct\n  function spawnSparkles(targetBatteries) {\n    for (let i = 0; i < 12; i++) {\n      const b = targetBatteries[i % targetBatteries.length] || batteries[0];\n      sparkles.push({\n        x: b.x + randInt(-10, 10),\n        y: b.y + randInt(-10, 10),\n        vx: (Math.random() - 0.5) * 3,\n        vy: -Math.random() * 3 - 1,\n        life: randInt(40, 80),\n        color: '#FFF7A1',\n        size: randInt(2, 5),\n      });\n    }\n  }\n\n  // --- Drawing Functions ---\n  function drawBackground() {\n    // gradient sky\n    const g = ctx.createLinearGradient(0, 0, 0, HEIGHT);\n    g.addColorStop(0, '#091233');\n    g.addColorStop(1, '#0F1A2B');\n    ctx.fillStyle = g;\n    ctx.fillRect(0, 0, WIDTH, HEIGHT);\n\n    // wacky glowing shapes (no images)\n    for (let i = 0; i < 4; i++) {\n      ctx.beginPath();\n      ctx.fillStyle = i % 2 === 0 ? 'rgba(160,231,229,0.06)' : 'rgba(255,184,107,0.04)';\n      const cx = 80 + i * 160 + (Math.sin(Date.now() / 1000 + i) * 12);\n      const cy = 60 + (Math.cos(Date.now() / 1200 + i) * 8);\n      ctx.ellipse(cx, cy, 120, 40, Math.sin(i) * 0.5, 0, Math.PI * 2);\n      ctx.fill();\n    }\n\n    // faint grid lines to feel technical\n    ctx.strokeStyle = 'rgba(255,255,255,0.02)';\n    ctx.lineWidth = 1;\n    for (let x = 0; x < WIDTH; x += 40) {\n      ctx.beginPath();\n      ctx.moveTo(x + (Date.now() / 1200) % 40, 0);\n      ctx.lineTo(x + (Date.now() / 1200) % 40, HEIGHT);\n      ctx.stroke();\n    }\n  }\n\n  function drawCharacters() {\n    // Sparky the Squirrel electrician left\n    const sparkyX = 80;\n    const sparkyY = 200;\n    ctx.save();\n    // body\n    ctx.fillStyle = CHAR_COLORS.sparky;\n    ctx.beginPath();\n    ctx.ellipse(sparkyX, sparkyY, 52, 66, 0.2, 0, Math.PI * 2);\n    ctx.fill();\n    // tail wacky\n    ctx.fillStyle = '#FF7A59';\n    ctx.beginPath();\n    ctx.ellipse(sparkyX - 50, sparkyY - 10, 24, 42, -0.6, 0, Math.PI * 2);\n    ctx.fill();\n    // eyes\n    ctx.fillStyle = '#111';\n    ctx.beginPath();\n    ctx.arc(sparkyX + 14, sparkyY - 10, 6, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.beginPath();\n    ctx.arc(sparkyX - 6, sparkyY - 6, 5, 0, Math.PI * 2);\n    ctx.fill();\n    // helmet\n    ctx.fillStyle = '#C6E4FF';\n    ctx.fillRect(sparkyX - 34, sparkyY - 52, 68, 16);\n    ctx.restore();\n\n    // Amp the Bulb center-top\n    const ampX = WIDTH - 170;\n    const ampY = 110;\n    ctx.save();\n    // bulb body\n    const bulbLight = Math.max(0.2, selectedSum / Math.max(targetNumber, 1));\n    const bulbGlow = 0.1 + bulbLight * 0.6;\n    const bulbColor = `rgba(255,244,150,${0.8})`;\n    ctx.beginPath();\n    ctx.fillStyle = bulbColor;\n    ctx.ellipse(ampX, ampY, 38 + bulbLight * 8, 50 + bulbLight * 10, 0, 0, Math.PI * 2);\n    ctx.fill();\n    // filament simple\n    ctx.strokeStyle = '#FFB84D';\n    ctx.lineWidth = 3;\n    ctx.beginPath();\n    ctx.moveTo(ampX - 8, ampY);\n    ctx.quadraticCurveTo(ampX, ampY + 8, ampX + 8, ampY);\n    ctx.stroke();\n    // base\n    ctx.fillStyle = '#9AA6B2';\n    ctx.fillRect(ampX - 22, ampY + 45, 44, 12);\n    // eyes\n    ctx.fillStyle = '#111';\n    ctx.beginPath();\n    ctx.arc(ampX - 12, ampY - 4, 3, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.beginPath();\n    ctx.arc(ampX + 8, ampY - 6, 3, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.restore();\n\n    // Bolt the Cloud top-left wacky\n    const boltX = WIDTH - 90;\n    const boltY = HEIGHT - 70;\n    ctx.save();\n    ctx.fillStyle = CHAR_COLORS.bolt;\n    ctx.beginPath();\n    ctx.ellipse(boltX, boltY, 60, 32, 0.2, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.fillStyle = '#B4FFF7';\n    ctx.beginPath();\n    ctx.ellipse(boltX - 30, boltY - 10, 30, 18, 0.2, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.beginPath();\n    ctx.fillStyle = '#111';\n    ctx.fillRect(boltX - 16, boltY - 8, 8, 6);\n    ctx.restore();\n  }\n\n  function drawBattery(b) {\n    // shadow\n    ctx.beginPath();\n    ctx.fillStyle = 'rgba(0,0,0,0.18)';\n    ctx.ellipse(b.x + 6, b.y + 18, b.r + 8, 10, 0, 0, Math.PI * 2);\n    ctx.fill();\n\n    // battery body\n    ctx.save();\n    ctx.translate(b.x, b.y);\n    // main body\n    const bodyW = b.r * 1.8;\n    const bodyH = b.r * 1.1;\n    ctx.fillStyle = b.selected ? '#FFD86B' : '#CFE9FF';\n    ctx.beginPath();\n    ctx.roundRect(-bodyW / 2, -bodyH / 2, bodyW, bodyH, 8);\n    ctx.fill();\n    // top terminal\n    ctx.fillStyle = '#B0C6FF';\n    ctx.fillRect(-12, -bodyH / 2 - 10, 24, 10);\n    // number\n    ctx.fillStyle = '#07203E';\n    ctx.font = 'bold 18px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillText(String(b.value), 0, 0);\n    ctx.restore();\n\n    // highlight when keyboard selected\n    if (b.index === keyIndex) {\n      ctx.strokeStyle = 'rgba(255,255,255,0.6)';\n      ctx.lineWidth = 3;\n      ctx.beginPath();\n      ctx.ellipse(b.x, b.y, b.r + 8, b.r + 8, 0, 0, Math.PI * 2);\n      ctx.stroke();\n    }\n\n    // show small bolt line if selected\n    if (b.selected) {\n      ctx.strokeStyle = '#FFF29B';\n      ctx.lineWidth = 3;\n      ctx.beginPath();\n      ctx.moveTo(b.x + 6, b.y - 6);\n      ctx.lineTo(b.x - 6, b.y + 2);\n      ctx.lineTo(b.x + 6, b.y + 2);\n      ctx.stroke();\n    }\n  }\n\n  function drawConnections() {\n    // draw zigzag wires from selected batteries to bulb\n    const bulbX = WIDTH - 170;\n    const bulbY = 110;\n    batteries.forEach((b) => {\n      if (!b.selected) return;\n      ctx.save();\n      ctx.strokeStyle = '#FFF99C';\n      ctx.lineWidth = 3;\n      ctx.beginPath();\n      ctx.moveTo(b.x, b.y + 18);\n      // create a zigzag path\n      const midX = (b.x + bulbX) / 2 + (Math.sin(b.index + Date.now() / 200) * 10);\n      const midY = (b.y + bulbY) / 2 + (Math.cos(b.index + Date.now() / 300) * 6);\n      ctx.lineTo(midX - 10, midY - 6);\n      ctx.lineTo(midX + 10, midY + 6);\n      ctx.lineTo(bulbX - 10, bulbY + 30);\n      ctx.stroke();\n      ctx.restore();\n    });\n  }\n\n  function drawHUD() {\n    // top bar\n    ctx.fillStyle = 'rgba(255,255,255,0.02)';\n    ctx.fillRect(0, 0, WIDTH, 46);\n    // target\n    ctx.fillStyle = TEXT_COLOR;\n    ctx.font = 'bold 22px sans-serif';\n    ctx.textAlign = 'left';\n    ctx.fillText(`Target: ${targetNumber}`, 18, 30);\n    ctx.font = '16px sans-serif';\n    ctx.fillStyle = '#A9C2E6';\n    ctx.fillText(`Sum: ${selectedSum}`, 150, 30);\n    ctx.fillText(`Score: ${score}`, 250, 30);\n    ctx.fillText(`Round: ${round}`, 340, 30);\n\n    // instructions\n    ctx.font = '13px sans-serif';\n    ctx.fillStyle = '#C9E0FF';\n    ctx.fillText(message, 18, HEIGHT - 18);\n\n    // audio icon (visual cue)\n    const iconX = WIDTH - 48;\n    const iconY = 18;\n    ctx.save();\n    // box\n    ctx.beginPath();\n    ctx.fillStyle = audioAvailable ? (audioEnabled ? '#9EE6A1' : '#FFD6A5') : '#666';\n    ctx.roundRect(iconX - 18, iconY - 12, 36, 24, 6);\n    ctx.fill();\n    // speaker glyph\n    ctx.fillStyle = '#1A2230';\n    ctx.beginPath();\n    ctx.moveTo(iconX - 8, iconY + 6);\n    ctx.lineTo(iconX - 2, iconY + 6);\n    ctx.lineTo(iconX + 2, iconY + 12);\n    ctx.lineTo(iconX + 2, iconY - 12);\n    ctx.lineTo(iconX - 2, iconY - 6);\n    ctx.lineTo(iconX - 8, iconY - 6);\n    ctx.closePath();\n    ctx.fill();\n    // waves for sound on\n    if (audioAvailable && audioEnabled) {\n      ctx.strokeStyle = '#1A2230';\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      ctx.arc(iconX + 6, iconY - 2, 8 + Math.sin(muteIconPulse) * 1.8, -0.7, 0.7);\n      ctx.stroke();\n    } else if (audioAvailable && !audioEnabled) {\n      ctx.strokeStyle = '#1A2230';\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      ctx.moveTo(iconX + 8, iconY - 10);\n      ctx.lineTo(iconX - 8, iconY + 10);\n      ctx.stroke();\n    } else {\n      ctx.fillStyle = '#333';\n      ctx.font = '10px sans-serif';\n      ctx.fillText('NoAudio', iconX - 16, iconY + 4);\n    }\n    ctx.restore();\n  }\n\n  function drawSparkles() {\n    for (let i = sparkles.length - 1; i >= 0; i--) {\n      const s = sparkles[i];\n      ctx.fillStyle = s.color;\n      ctx.globalAlpha = Math.max(0, s.life / 80);\n      ctx.beginPath();\n      ctx.arc(s.x, s.y, s.size, 0, Math.PI * 2);\n      ctx.fill();\n      ctx.globalAlpha = 1;\n      s.x += s.vx;\n      s.y += s.vy;\n      s.vy += 0.08;\n      s.life -= 1;\n      if (s.life <= 0) sparkles.splice(i, 1);\n    }\n  }\n\n  // --- Main Render Loop ---\n  function render() {\n    ctx.clearRect(0, 0, WIDTH, HEIGHT);\n    if (shakeTimer > 0) {\n      const shakeX = Math.sin(shakeTimer * 3) * 6;\n      ctx.save();\n      ctx.translate(shakeX, 0);\n    }\n\n    drawBackground();\n    drawCharacters();\n\n    // draw batteries and connections\n    drawConnections();\n    batteries.forEach(drawBattery);\n    drawSparkles();\n\n    if (shakeTimer > 0) {\n      ctx.restore();\n      shakeTimer--;\n    }\n\n    drawHUD();\n\n    // draw check button hint\n    ctx.font = '12px sans-serif';\n    ctx.fillStyle = '#E8F4FF';\n    ctx.textAlign = 'right';\n    ctx.fillText('Keys: Arrow keys / Enter select, C check, M mute, R reset', WIDTH - 10, HEIGHT - 10);\n\n    muteIconPulse += 0.12;\n    requestAnimationFrame(render);\n  }\n\n  // --- Input Handling ---\n  function getBatteryAt(x, y) {\n    for (const b of batteries) {\n      const dx = x - b.x;\n      const dy = y - b.y;\n      if (dx * dx + dy * dy <= (b.r + 8) * (b.r + 8)) return b;\n    }\n    return null;\n  }\n\n  canvas.addEventListener('pointerdown', (ev) => {\n    ev.preventDefault();\n    // ensure audio initialised on user gesture\n    try {\n      initAudioIfNeeded();\n      safeResumeAudio();\n    } catch (e) {\n      // handled elsewhere\n    }\n    const rect = canvas.getBoundingClientRect();\n    const x = ev.clientX - rect.left;\n    const y = ev.clientY - rect.top;\n    // if clicked on audio icon?\n    const iconX = WIDTH - 48;\n    const iconY = 18;\n    if (x >= iconX - 18 && x <= iconX + 18 && y >= iconY - 12 && y <= iconY + 12) {\n      if (audioAvailable) {\n        audioEnabled = !audioEnabled;\n        updateAudioGain();\n        playClick();\n        message = audioEnabled ? 'Audio on' : 'Audio off';\n        srLive.textContent = message;\n      } else {\n        message = 'Audio not available on this device.';\n        srLive.textContent = message;\n      }\n      return;\n    }\n\n    const b = getBatteryAt(x, y);\n    if (b) {\n      toggleBatterySelection(b.index);\n    } else {\n      // clicking other area toggles nothing but plays a click\n      playClick();\n    }\n  });\n\n  // keyboard controls\n  canvas.addEventListener('keydown', (ev) => {\n    if (ev.key === 'ArrowRight' || ev.key === 'ArrowDown') {\n      keyIndex = (keyIndex + 1) % batteries.length;\n      playClick();\n      recalcSum();\n      ev.preventDefault();\n    } else if (ev.key === 'ArrowLeft' || ev.key === 'ArrowUp') {\n      keyIndex = (keyIndex - 1 + batteries.length) % batteries.length;\n      playClick();\n      recalcSum();\n      ev.preventDefault();\n    } else if (ev.key === 'Enter' || ev.key === ' ') {\n      toggleBatterySelection(keyIndex);\n      ev.preventDefault();\n    } else if (ev.key.toLowerCase() === 'c') {\n      checkSelection();\n      ev.preventDefault();\n    } else if (ev.key.toLowerCase() === 'r') {\n      newRound();\n      playClick();\n      ev.preventDefault();\n    } else if (ev.key.toLowerCase() === 'm') {\n      if (audioAvailable) {\n        audioEnabled = !audioEnabled;\n        updateAudioGain();\n        playClick();\n        message = audioEnabled ? 'Audio on' : 'Audio off';\n        srLive.textContent = message;\n      }\n      ev.preventDefault();\n    }\n  });\n\n  // focus handling for keyboard users\n  canvas.addEventListener('focus', () => {\n    canvas.style.boxShadow = '0 0 6px rgba(200,230,255,0.4)';\n  });\n  canvas.addEventListener('blur', () => {\n    canvas.style.boxShadow = 'none';\n  });\n\n  // Provide accessible start button inside canvas (drawn) - but require first click to begin audio on some browsers\n  // initial prompt overlay until user interacts (click or key)\n  let waitingForInteraction = true;\n  function drawStartOverlay() {\n    ctx.fillStyle = 'rgba(4,6,12,0.75)';\n    ctx.fillRect(40, 70, WIDTH - 80, HEIGHT - 140);\n    ctx.fillStyle = '#FFF';\n    ctx.font = 'bold 26px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Power-Up Math!', WIDTH / 2, HEIGHT / 2 - 40);\n    ctx.font = '16px sans-serif';\n    ctx.fillText('Help Sparky connect batteries to charge Amp the Bulb.', WIDTH / 2, HEIGHT / 2 - 10);\n    ctx.font = '14px sans-serif';\n    ctx.fillText('Select batteries so their numbers add up to the target.', WIDTH / 2, HEIGHT / 2 + 18);\n    ctx.fillStyle = '#F3F5FF';\n    ctx.fillRect(WIDTH / 2 - 80, HEIGHT / 2 + 40, 160, 40);\n    ctx.fillStyle = '#0A1220';\n    ctx.font = 'bold 16px sans-serif';\n    ctx.fillText('Click to Start', WIDTH / 2, HEIGHT / 2 + 68);\n    ctx.font = '12px sans-serif';\n    ctx.fillStyle = '#E0E8F9';\n    ctx.fillText('Keyboard: Arrows+Enter, C=Check, M=Mute, R=Reset', WIDTH / 2, HEIGHT / 2 + 110);\n  }\n\n  // Listen for first interaction to initialize audio and start\n  function onFirstInteraction() {\n    if (!waitingForInteraction) return;\n    try {\n      initAudioIfNeeded();\n      safeResumeAudio();\n    } catch (e) {\n      // ignore\n    }\n    waitingForInteraction = false;\n    // slight welcome sound\n    playTone(520, 'sine', 0.12, 0.08);\n    canvas.removeEventListener('pointerdown', onFirstInteraction);\n    canvas.removeEventListener('keydown', onFirstInteraction);\n    // start game\n    newRound();\n    requestAnimationFrame(render);\n  }\n\n  canvas.addEventListener('pointerdown', onFirstInteraction);\n  canvas.addEventListener('keydown', onFirstInteraction);\n\n  // Add helpful instructions if audio fails\n  if (!window.AudioContext && !window.webkitAudioContext) {\n    audioAvailable = false;\n    message = 'Audio not supported in this browser. Use keyboard or mouse to play.';\n    srLive.textContent = message;\n  }\n\n  // Canvas polyfill for roundRect in older browsers\n  if (typeof CanvasRenderingContext2D.prototype.roundRect !== 'function') {\n    CanvasRenderingContext2D.prototype.roundRect = function (x, y, w, h, r) {\n      if (typeof r === 'number') r = { tl: r, tr: r, br: r, bl: r };\n      else {\n        var defaultRadius = { tl: 0, tr: 0, br: 0, bl: 0 };\n        for (var side in defaultRadius) {\n          r[side] = r[side] || defaultRadius[side];\n        }\n      }\n      this.beginPath();\n      this.moveTo(x + r.tl, y);\n      this.lineTo(x + w - r.tr, y);\n      this.quadraticCurveTo(x + w, y, x + w, y + r.tr);\n      this.lineTo(x + w, y + h - r.br);\n      this.quadraticCurveTo(x + w, y + h, x + w - r.br, y + h);\n      this.lineTo(x + r.bl, y + h);\n      this.quadraticCurveTo(x, y + h, x, y + h - r.bl);\n      this.lineTo(x, y + r.tl);\n      this.quadraticCurveTo(x, y, x + r.tl, y);\n      this.closePath();\n    };\n  }\n\n  // Initial draw while waiting for interaction\n  function initialDrawLoop() {\n    ctx.clearRect(0, 0, WIDTH, HEIGHT);\n    drawBackground();\n    drawCharacters();\n    batteries.forEach(drawBattery);\n    drawHUD();\n    drawStartOverlay();\n    requestAnimationFrame(initialDrawLoop);\n  }\n  initialDrawLoop();\n\n  // Ensure keyboard focus\n  setTimeout(() => {\n    try {\n      canvas.focus();\n    } catch (e) {}\n  }, 300);\n\n  // Expose some state for debugging in console (safe)\n  window.powerUpMath = {\n    newRound,\n    toggleAudio: () => {\n      if (!audioAvailable) return;\n      audioEnabled = !audioEnabled;\n      updateAudioGain();\n    },\n  };\n})();\n---\n",
  "improve_response_tokens": 17860,
  "formatted_code": true,
  "formatting_response_tokens": 19768,
  "final_functionality": {
    "score": 8,
    "max_score": 8,
    "percentage": 100.0,
    "passing": true,
    "issues": [],
    "warnings": []
  }
}