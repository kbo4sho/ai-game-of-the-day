{
  "generated_date": "2025-09-20",
  "generated_timestamp": "2025-09-20T00:27:07.831405",
  "model": "gpt-5-mini",
  "theme": "machines",
  "prompt": "You are an expert educational game designer. You will generate a fun, playable math game in JavaScript for children ages 7 to 9, focused on foundational concepts presented in a way that is engaging and fun. Today's theme: machines\n\nThe game must:\n\u2022 Be beatable.\n\u2022 Use visually calming and interesting and wacky elements.\n\u2022 Include sound, using the Web Audio API for correct/incorrect feedback, gentle background effects, or interactions. Use an audio context.\n\u2022 Render entirely inside the existing HTML element with ID game-of-the-day-stage. You may create a canvas element inside it .\n\u2022 Have a game area exactly 720px wide by 480px tall.\n\u2022 Be written in clean, readable JavaScript with proper formatting, indentation, and comments.\n\u2022 Use modern JavaScript practices and avoid minification.\n\u2022 Include proper error handling for audio and resource loading.\n\u2022 Be accessible: include keyboard controls, text alternatives, visual cues for audio, clear instructions, and error handling.\n\u2022 Use ONLY canvas-drawn graphics or 3js and Web Audio API - NO external image URLs, NO external audio files, NO external dependencies.\n\u2022 Create all visual elements using canvas drawing methods (rect, arc, fillText, etc.) or 3js.\n\u2022 Generate all sounds using Web Audio API oscillators and filters.\n\u2022 Include proper error handling for audio context creation.\n\u2022 Output only JavaScript code. No extra explanation, no markdown formatting, no code blocks, no HTML, no CSS.\n\u2022 Do not wrap the code in ```javascript or any other markdown formatting.",
  "response_tokens": 9896,
  "game_filename": "2025-09-20.js",
  "game_size_bytes": 30137,
  "functionality": {
    "score": 8,
    "max_score": 8,
    "percentage": 100.0,
    "passing": true,
    "issues": [],
    "warnings": []
  },
  "dependencies": {
    "has_external_deps": false,
    "issues": [],
    "warnings": [],
    "canvas_methods_used": 5
  },
  "improved_visuals_audio": true,
  "improve_prompt": "You are an expert educational game designer. \nTake the following JavaScript game code and improve ONLY the visuals and audio. \nDo not change the game mechanics or math logic. \nEnhance the visual appeal (colors, animations, backgrounds, characters), avoid overstimulation with sounds and visuals, and add or improve sound effects and background audio. \nRender entirely inside the existing HTML element with ID game-of-the-day-stage. You may create a canvas element inside it (do not include angle brackets in text instructions).\nHave a game area exactly 720px wide by 480px tall.\nBe written in clean, readable JavaScript with proper formatting, indentation, and comments.\nUse modern JavaScript practices and avoid minification.\nInclude proper error handling for audio and resource loading.\nUse ONLY canvas-drawn graphics and Web Audio API - NO external image URLs, NO external audio files, NO external dependencies.\nCreate all visual elements using canvas drawing methods (rect, arc, fillText, etc.).\nGenerate all sounds using Web Audio API oscillators and filters.\nInclude proper error handling for audio context creation.\nOutput only JavaScript code. No extra explanation, no markdown formatting, no code blocks.\nDo not wrap the code in ```javascript or any other markdown formatting.\n\n---\n// Machine Math \u2014 JavaScript game for ages 7-9\n// Renders inside the element with ID \"game-of-the-day-stage\"\n// Creates a 720x480 canvas, uses Web Audio API oscillators, accessible controls, keyboard + mouse input.\n// All visuals drawn with Canvas API. No external resources.\n\n(() => {\n  // Configuration\n  const WIDTH = 720;\n  const HEIGHT = 480;\n  const ROUNDS = 5;\n  const DIAL_MIN = 0;\n  const DIAL_MAX = 12; // kid-friendly range\n  const FONT = \"16px 'Segoe UI', Roboto, Arial, sans-serif\";\n\n  // Find container\n  const container = document.getElementById(\"game-of-the-day-stage\");\n  if (!container) {\n    console.error(\"Game container with ID 'game-of-the-day-stage' not found.\");\n    return;\n  }\n\n  // Clear container and create canvas\n  container.innerHTML = \"\";\n  container.style.position = \"relative\";\n\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = WIDTH;\n  canvas.height = HEIGHT;\n  canvas.setAttribute(\"role\", \"img\");\n  canvas.setAttribute(\"aria-label\", \"Machine Math: interactive math game with dials and gears\");\n  container.appendChild(canvas);\n\n  // Accessible live region (visually hidden but inside container)\n  const liveRegion = document.createElement(\"div\");\n  liveRegion.setAttribute(\"aria-live\", \"polite\");\n  liveRegion.setAttribute(\"aria-atomic\", \"true\");\n  liveRegion.style.position = \"absolute\";\n  liveRegion.style.left = \"-9999px\";\n  liveRegion.style.width = \"1px\";\n  liveRegion.style.height = \"1px\";\n  container.appendChild(liveRegion);\n\n  const ctx = canvas.getContext(\"2d\");\n\n  // Utility\n  const clamp = (v, a, b) => Math.max(a, Math.min(b, v));\n  const randInt = (a, b) => Math.floor(Math.random() * (b - a + 1)) + a;\n\n  // Audio Manager with error handling\n  class AudioManager {\n    constructor() {\n      this.enabled = true;\n      this.ctx = null;\n      this.bgGain = null;\n      this.bgOsc = null;\n      this.lfo = null;\n      this.muted = false;\n      this.initialized = false;\n      try {\n        const AudioCtx = window.AudioContext || window.webkitAudioContext;\n        if (!AudioCtx) throw new Error(\"Web Audio API not supported\");\n        this.ctx = new AudioCtx();\n      } catch (e) {\n        console.warn(\"Audio initialization failed:\", e);\n        this.enabled = false;\n        this.ctx = null;\n      }\n    }\n\n    async ensureInitialized() {\n      if (!this.enabled || !this.ctx) return false;\n      if (this.initialized) return true;\n      try {\n        // Resume if suspended; user gesture may be required\n        if (this.ctx.state === \"suspended\") {\n          try {\n            await this.ctx.resume();\n          } catch (e) {\n            console.warn(\"AudioContext resume failed:\", e);\n          }\n        }\n        // Create gentle background hum\n        this.bgOsc = this.ctx.createOscillator();\n        this.bgOsc.type = \"sine\";\n        this.bgOsc.frequency.value = 60; // low hum\n        this.bgGain = this.ctx.createGain();\n        this.bgGain.gain.value = 0.02; // very gentle\n        // subtle filter for warmth\n        const filter = this.ctx.createBiquadFilter();\n        filter.type = \"lowpass\";\n        filter.frequency.value = 800;\n\n        // LFO for slow wobble\n        this.lfo = this.ctx.createOscillator();\n        this.lfo.type = \"sine\";\n        this.lfo.frequency.value = 0.08;\n        const lfoGain = this.ctx.createGain();\n        lfoGain.gain.value = 12;\n        this.lfo.connect(lfoGain);\n        lfoGain.connect(this.bgOsc.frequency);\n\n        this.bgOsc.connect(filter);\n        filter.connect(this.bgGain);\n        this.bgGain.connect(this.ctx.destination);\n\n        this.bgOsc.start();\n        this.lfo.start();\n\n        this.initialized = true;\n        return true;\n      } catch (e) {\n        console.warn(\"Audio background setup failed:\", e);\n        this.enabled = false;\n        return false;\n      }\n    }\n\n    async playTone({ type = \"sine\", freq = 440, duration = 0.25, volume = 0.15, attack = 0.01, release = 0.1, detune = 0 }) {\n      if (!this.enabled || !this.ctx) return;\n      try {\n        if (this.ctx.state === \"suspended\") {\n          try {\n            await this.ctx.resume();\n          } catch (e) {\n            // ignore\n          }\n        }\n        const now = this.ctx.currentTime;\n        const osc = this.ctx.createOscillator();\n        const gain = this.ctx.createGain();\n        osc.type = type;\n        osc.frequency.value = freq;\n        osc.detune.value = detune;\n        gain.gain.setValueAtTime(0.0001, now);\n        gain.gain.linearRampToValueAtTime(volume, now + attack);\n        gain.gain.linearRampToValueAtTime(0.0001, now + attack + duration + release);\n        osc.connect(gain);\n        gain.connect(this.ctx.destination);\n        osc.start(now);\n        osc.stop(now + attack + duration + release + 0.05);\n      } catch (e) {\n        console.warn(\"playTone error\", e);\n      }\n    }\n\n    // Correct melody: simple ascending notes\n    async playCorrect() {\n      if (!this.enabled) return;\n      await this.ensureInitialized();\n      const melody = [523, 659, 784]; // C5, E5, G5\n      let t = 0;\n      for (let i = 0; i < melody.length; i++) {\n        setTimeout(() => this.playTone({ type: \"triangle\", freq: melody[i], duration: 0.18, volume: 0.12 }), t * 1000);\n        t += 0.18;\n      }\n    }\n\n    // Wrong: a short buzz\n    async playWrong() {\n      if (!this.enabled) return;\n      await this.ensureInitialized();\n      // Create a quick descending buzz by detune\n      this.playTone({ type: \"sawtooth\", freq: 220, duration: 0.18, volume: 0.12, detune: 0 });\n      setTimeout(() => this.playTone({ type: \"sawtooth\", freq: 170, duration: 0.14, volume: 0.09 }), 160);\n    }\n\n    async playClick() {\n      if (!this.enabled) return;\n      await this.ensureInitialized();\n      this.playTone({ type: \"square\", freq: 880, duration: 0.06, volume: 0.06 });\n    }\n\n    async toggleMute() {\n      if (!this.enabled || !this.ctx) return;\n      // Toggle background gain\n      if (!this.initialized) await this.ensureInitialized();\n      if (!this.bgGain) return;\n      if (!this.muted) {\n        this.bgGain.gain.setValueAtTime(0.0001, this.ctx.currentTime);\n        this.muted = true;\n      } else {\n        this.bgGain.gain.setValueAtTime(0.02, this.ctx.currentTime);\n        this.muted = false;\n      }\n    }\n  }\n\n  const audio = new AudioManager();\n\n  // Game model\n  class Game {\n    constructor(ctx, width, height, audio) {\n      this.ctx = ctx;\n      this.width = width;\n      this.height = height;\n      this.audio = audio;\n\n      this.round = 0;\n      this.score = 0;\n      this.attempts = 0;\n      this.maxAttempts = 3;\n      this.state = \"intro\"; // intro, playing, success, finished\n      this.dials = [0, 0];\n      this.selectedDial = 0;\n      this.operation = \"+\"; // \"+\", \"-\", \"\u00d7\"\n      this.target = 0;\n      this.solution = [0, 0]; // correct values\n      this.timeStart = 0;\n      this.hintsUsed = 0;\n      this.roundsTotal = ROUNDS;\n      this.gearAngle = 0;\n      this.animTime = 0;\n      this.audioAvailable = !!(this.audio && this.audio.enabled);\n\n      // bind events\n      this.keysDown = {};\n      this.lastInputTime = Date.now();\n\n      // pre-generate rounds\n      this.roundSpecs = [];\n      this.generateRounds();\n\n      // start rendering\n      this.loop = this.loop.bind(this);\n      requestAnimationFrame(this.loop);\n    }\n\n    generateRounds() {\n      this.roundSpecs = [];\n      for (let i = 0; i < this.roundsTotal; i++) {\n        const ops = [\"+\", \"-\", \"\u00d7\"];\n        const op = ops[randInt(0, ops.length - 1)];\n        let a, b;\n        if (op === \"+\") {\n          a = randInt(0, 12);\n          b = randInt(0, 12);\n        } else if (op === \"-\") {\n          a = randInt(0, 12);\n          b = randInt(0, a); // ensure non-negative\n        } else if (op === \"\u00d7\") {\n          // keep multiplication small\n          a = randInt(0, 6);\n          b = randInt(0, 6);\n        }\n        const target = this.computeOp(a, b, op);\n        this.roundSpecs.push({ op, a, b, target });\n      }\n    }\n\n    startRound(index) {\n      this.round = index;\n      const spec = this.roundSpecs[index];\n      this.operation = spec.op;\n      this.target = spec.target;\n      this.solution = [spec.a, spec.b];\n      // choose random starting dial values different from solution to encourage play\n      this.dials = [randInt(DIAL_MIN, DIAL_MAX), randInt(DIAL_MIN, DIAL_MAX)];\n      if (this.dials[0] === this.solution[0] && this.dials[1] === this.solution[1]) {\n        // nudge one\n        this.dials[1] = clamp(this.dials[1] + 1, DIAL_MIN, DIAL_MAX);\n      }\n      this.selectedDial = 0;\n      this.attempts = 0;\n      this.hintsUsed = 0;\n      this.timeStart = performance.now();\n      this.state = \"playing\";\n      liveRegion.textContent = `Round ${index + 1} started. Target is ${this.target}. Operation ${this.operation}. Use arrow keys or click dials to adjust. Press Enter to submit.`;\n      try { this.audio.playClick(); } catch (e) {}\n    }\n\n    computeOp(a, b, op) {\n      if (op === \"+\") return a + b;\n      if (op === \"-\") return a - b;\n      return a * b;\n    }\n\n    selectDial(idx) {\n      if (this.state !== \"playing\") return;\n      this.selectedDial = idx;\n      liveRegion.textContent = `Selected dial ${idx + 1}. Value ${this.dials[idx]}. Use up/down keys to change.`;\n      try { this.audio.playClick(); } catch (e) {}\n    }\n\n    changeSelected(delta) {\n      if (this.state !== \"playing\") return;\n      this.dials[this.selectedDial] = clamp(this.dials[this.selectedDial] + delta, DIAL_MIN, DIAL_MAX);\n      liveRegion.textContent = `Dial ${this.selectedDial + 1} is now ${this.dials[this.selectedDial]}.`;\n      try { this.audio.playClick(); } catch (e) {}\n    }\n\n    submitAttempt() {\n      if (this.state !== \"playing\") return;\n      this.attempts++;\n      const result = this.computeOp(this.dials[0], this.dials[1], this.operation);\n      if (result === this.target) {\n        // correct\n        this.score++;\n        this.state = \"success\";\n        liveRegion.textContent = `Correct! Round ${this.round + 1} solved.`;\n        try { this.audio.playCorrect(); } catch (e) {}\n        // proceed after short delay\n        setTimeout(() => {\n          if (this.round + 1 < this.roundsTotal) {\n            this.startRound(this.round + 1);\n          } else {\n            this.state = \"finished\";\n            liveRegion.textContent = `All rounds complete! Score ${this.score} out of ${this.roundsTotal}. Press Enter to play again.`;\n          }\n        }, 900);\n      } else {\n        // wrong\n        try { this.audio.playWrong(); } catch (e) {}\n        liveRegion.textContent = `Not quite. You made ${result}. Try again. Attempts left ${this.maxAttempts - this.attempts}.`;\n        if (this.attempts >= this.maxAttempts) {\n          // reveal solution and advance\n          this.state = \"success\";\n          liveRegion.textContent = `No attempts left. The solution was ${this.solution[0]} ${this.operation} ${this.solution[1]} = ${this.target}.`;\n          setTimeout(() => {\n            if (this.round + 1 < this.roundsTotal) {\n              this.startRound(this.round + 1);\n            } else {\n              this.state = \"finished\";\n              liveRegion.textContent = `Finished. Score ${this.score} out of ${this.roundsTotal}. Press Enter to play again.`;\n            }\n          }, 1200);\n        }\n      }\n    }\n\n    useHint() {\n      if (this.state !== \"playing\") return;\n      // reveal one dial to correct value\n      const which = Math.random() < 0.5 ? 0 : 1;\n      this.dials[which] = this.solution[which];\n      this.hintsUsed++;\n      liveRegion.textContent = `Hint used: dial ${which + 1} set to ${this.dials[which]}.`;\n      try { this.audio.playClick(); } catch (e) {}\n    }\n\n    restart() {\n      this.score = 0;\n      this.round = 0;\n      this.generateRounds();\n      this.startRound(0);\n    }\n\n    // Input handlers\n    handleKeyDown(e) {\n      if (this.state === \"intro\" && (e.key === \"Enter\" || e.key === \" \")) {\n        // try to initialize audio on user gesture\n        this.audio.ensureInitialized().then(() => {}).catch(() => {});\n        this.startRound(0);\n        return e.preventDefault();\n      }\n      if (this.state === \"finished\" && (e.key === \"Enter\" || e.key === \" \")) {\n        this.restart();\n        return e.preventDefault();\n      }\n      if (e.key === \"Tab\") {\n        // cycle selection\n        e.preventDefault();\n        this.selectedDial = (this.selectedDial + 1) % this.dials.length;\n        liveRegion.textContent = `Selected dial ${this.selectedDial + 1}. Value ${this.dials[this.selectedDial]}.`;\n        try { this.audio.playClick(); } catch (err) {}\n        return;\n      }\n      if (this.state !== \"playing\") return;\n      if ([\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\", \"Enter\", \" \"].includes(e.key)) {\n        e.preventDefault();\n      }\n      switch (e.key) {\n        case \"ArrowUp\":\n          this.changeSelected(+1);\n          break;\n        case \"ArrowDown\":\n          this.changeSelected(-1);\n          break;\n        case \"ArrowLeft\":\n          this.selectedDial = (this.selectedDial + this.dials.length - 1) % this.dials.length;\n          liveRegion.textContent = `Selected dial ${this.selectedDial + 1}. Value ${this.dials[this.selectedDial]}.`;\n          try { this.audio.playClick(); } catch (err) {}\n          break;\n        case \"ArrowRight\":\n          this.selectedDial = (this.selectedDial + 1) % this.dials.length;\n          liveRegion.textContent = `Selected dial ${this.selectedDial + 1}. Value ${this.dials[this.selectedDial]}.`;\n          try { this.audio.playClick(); } catch (err) {}\n          break;\n        case \"Enter\":\n        case \" \":\n          this.submitAttempt();\n          break;\n        case \"h\":\n        case \"H\":\n          this.useHint();\n          break;\n        case \"m\":\n        case \"M\":\n          this.audio.toggleMute();\n          liveRegion.textContent = `Sound ${this.audio.muted ? \"muted\" : \"unmuted\"}.`;\n          break;\n        default:\n          break;\n      }\n    }\n\n    // Mouse interactions: click on dial or buttons\n    handleMouseDown(x, y) {\n      // detect dial circles\n      // left dial center at (200, 280), right dial at (360, 280)\n      const left = { x: 200, y: 280, r: 46 };\n      const right = { x: 360, y: 280, r: 46 };\n      if (this.pointInCircle(x, y, left)) {\n        this.selectDial(0);\n        return;\n      }\n      if (this.pointInCircle(x, y, right)) {\n        this.selectDial(1);\n        return;\n      }\n      // submit button area\n      if (x >= 520 && x <= 660 && y >= 240 && y <= 300) {\n        this.submitAttempt();\n        return;\n      }\n      // hint button\n      if (x >= 520 && x <= 660 && y >= 310 && y <= 360) {\n        this.useHint();\n        return;\n      }\n      // speaker icon area top-right\n      if (x >= 660 && x <= 700 && y >= 10 && y <= 50) {\n        this.audio.toggleMute();\n        liveRegion.textContent = `Sound ${this.audio.muted ? \"muted\" : \"unmuted\"}.`;\n        return;\n      }\n      // click dial arrows (small)\n      // up arrow for left dial\n      if (x >= 170 && x <= 230 && y >= 220 && y <= 250) {\n        this.selectedDial = 0;\n        this.changeSelected(+1);\n        return;\n      }\n      if (x >= 330 && x <= 390 && y >= 220 && y <= 250) {\n        this.selectedDial = 1;\n        this.changeSelected(+1);\n        return;\n      }\n      if (x >= 170 && x <= 230 && y >= 330 && y <= 360) {\n        this.selectedDial = 0;\n        this.changeSelected(-1);\n        return;\n      }\n      if (x >= 330 && x <= 390 && y >= 330 && y <= 360) {\n        this.selectedDial = 1;\n        this.changeSelected(-1);\n        return;\n      }\n    }\n\n    pointInCircle(px, py, circle) {\n      const dx = px - circle.x;\n      const dy = py - circle.y;\n      return dx * dx + dy * dy <= circle.r * circle.r;\n    }\n\n    // Drawing helpers\n    drawBackground() {\n      const g = this.ctx.createLinearGradient(0, 0, 0, this.height);\n      g.addColorStop(0, \"#eaf6ff\");\n      g.addColorStop(1, \"#f4fbf6\");\n      this.ctx.fillStyle = g;\n      this.ctx.fillRect(0, 0, this.width, this.height);\n\n      // Soft polka dots (wacky machines)\n      for (let i = 0; i < 6; i++) {\n        this.ctx.fillStyle = `rgba(220,230,250,${0.08 + 0.02 * (i % 3)})`;\n        const rx = (i * 120 + (this.animTime * 30)) % this.width;\n        this.ctx.beginPath();\n        this.ctx.arc(rx, 60 + (i % 2) * 40, 30 + (i % 3) * 6, 0, Math.PI * 2);\n        this.ctx.fill();\n      }\n    }\n\n    drawMachineFrame() {\n      // base plate\n      this.ctx.fillStyle = \"#dde4f2\";\n      this.ctx.fillRect(60, 120, 600, 300);\n      // rounded control box\n      this.ctx.fillStyle = \"#cfe3d6\";\n      roundRect(this.ctx, 80, 140, 560, 260, 12);\n      this.ctx.fill();\n\n      // Pipes\n      this.ctx.strokeStyle = \"#b7c6c9\";\n      this.ctx.lineWidth = 8;\n      this.ctx.beginPath();\n      this.ctx.moveTo(80, 240);\n      this.ctx.lineTo(140, 240);\n      this.ctx.lineTo(140, 200);\n      this.ctx.lineTo(200, 200);\n      this.ctx.stroke();\n\n      this.ctx.beginPath();\n      this.ctx.moveTo(420, 200);\n      this.ctx.lineTo(500, 200);\n      this.ctx.lineTo(500, 240);\n      this.ctx.lineTo(660, 240);\n      this.ctx.stroke();\n    }\n\n    drawGears() {\n      // left gear near left pipe\n      this.drawGear(160, 180, 36, 12, \"#f2c94c\", this.gearAngle);\n      // center gear\n      this.drawGear(300, 160, 48, 14, \"#ff9478\", -this.gearAngle * 0.8);\n      // right gear small\n      this.drawGear(500, 180, 30, 10, \"#7bd389\", this.gearAngle * 1.2);\n    }\n\n    drawGear(cx, cy, radius, teeth, color, angle) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.translate(cx, cy);\n      ctx.rotate(angle);\n      // body\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.arc(0, 0, radius - 6, 0, Math.PI * 2);\n      ctx.fill();\n      // teeth\n      ctx.fillStyle = shadeColor(color, -10);\n      for (let i = 0; i < teeth; i++) {\n        ctx.save();\n        ctx.rotate((i / teeth) * Math.PI * 2);\n        ctx.beginPath();\n        ctx.rect(radius - 6, -4, 10, 8);\n        ctx.fill();\n        ctx.restore();\n      }\n      // center bolt\n      ctx.fillStyle = \"#3b3b3b\";\n      ctx.beginPath();\n      ctx.arc(0, 0, Math.max(6, radius * 0.18), 0, Math.PI * 2);\n      ctx.fill();\n      ctx.restore();\n    }\n\n    drawDials() {\n      // positions\n      const left = { x: 200, y: 280 };\n      const right = { x: 360, y: 280 };\n      [left, right].forEach((pos, idx) => {\n        // outer ring\n        this.ctx.save();\n        this.ctx.translate(pos.x, pos.y);\n        const sel = idx === this.selectedDial && this.state === \"playing\";\n        this.ctx.beginPath();\n        this.ctx.fillStyle = sel ? \"#fffef2\" : \"#ffffff\";\n        this.ctx.strokeStyle = sel ? \"#3b82f6\" : \"#c9d6db\";\n        this.ctx.lineWidth = sel ? 4 : 2;\n        this.ctx.arc(0, 0, 46, 0, Math.PI * 2);\n        this.ctx.fill();\n        this.ctx.stroke();\n        // numbers markings\n        this.ctx.fillStyle = \"#4a4a4a\";\n        this.ctx.font = \"bold 20px monospace\";\n        this.ctx.textAlign = \"center\";\n        this.ctx.textBaseline = \"middle\";\n        this.ctx.fillText(String(this.dials[idx]), 0, 0);\n        // knob small circle\n        this.ctx.fillStyle = \"#a3b5c6\";\n        this.ctx.beginPath();\n        this.ctx.arc(20, -20, 8, 0, Math.PI * 2);\n        this.ctx.fill();\n\n        // up arrow\n        this.ctx.fillStyle = \"#6b7d89\";\n        this.ctx.beginPath();\n        this.ctx.moveTo(-30, -40);\n        this.ctx.lineTo(-10, -52);\n        this.ctx.lineTo(-10, -28);\n        this.ctx.closePath();\n        this.ctx.fill();\n        // down arrow\n        this.ctx.beginPath();\n        this.ctx.moveTo(-30, 40);\n        this.ctx.lineTo(-10, 52);\n        this.ctx.lineTo(-10, 28);\n        this.ctx.closePath();\n        this.ctx.fill();\n\n        // accessible text near dial\n        this.ctx.restore();\n      });\n    }\n\n    drawControls() {\n      // Operation display\n      this.ctx.fillStyle = \"#232323\";\n      this.ctx.font = \"bold 30px sans-serif\";\n      this.ctx.textAlign = \"center\";\n      this.ctx.fillText(this.operation, 280, 140);\n\n      // Target window\n      this.ctx.fillStyle = \"#ffffff\";\n      roundRect(this.ctx, 470, 120, 190, 80, 10);\n      this.ctx.fillStyle = \"#ddeffb\";\n      roundRect(this.ctx, 472, 122, 186, 76, 8);\n      this.ctx.fillStyle = \"#243b55\";\n      this.ctx.font = \"bold 28px monospace\";\n      this.ctx.textAlign = \"center\";\n      this.ctx.fillText(\"Target\", 565, 145);\n      this.ctx.font = \"bold 34px monospace\";\n      this.ctx.fillStyle = \"#0b2b2e\";\n      this.ctx.fillText(String(this.target), 565, 180);\n\n      // Submit button\n      roundRect(this.ctx, 520, 240, 140, 60, 10);\n      this.ctx.fillStyle = \"#96c8ff\";\n      roundRect(this.ctx, 522, 242, 136, 56, 8);\n      this.ctx.fillStyle = \"#083d77\";\n      this.ctx.font = \"bold 18px sans-serif\";\n      this.ctx.textAlign = \"center\";\n      this.ctx.fillText(\"Engage Machine\", 590, 272);\n\n      // Hint button\n      roundRect(this.ctx, 520, 310, 140, 46, 8);\n      this.ctx.fillStyle = \"#fff3c7\";\n      roundRect(this.ctx, 522, 312, 136, 42, 6);\n      this.ctx.fillStyle = \"#6b4f1d\";\n      this.ctx.font = \"bold 16px sans-serif\";\n      this.ctx.fillText(\"Hint (H)\", 590, 336);\n\n      // Speaker icon\n      this.ctx.save();\n      this.ctx.translate(680, 30);\n      this.ctx.fillStyle = this.audio.muted ? \"#9a9a9a\" : \"#1f6f8b\";\n      this.ctx.beginPath();\n      this.ctx.moveTo(-18, -8);\n      this.ctx.lineTo(-6, -8);\n      this.ctx.lineTo(6, -16);\n      this.ctx.lineTo(6, 16);\n      this.ctx.lineTo(-6, 8);\n      this.ctx.lineTo(-18, 8);\n      this.ctx.closePath();\n      this.ctx.fill();\n      // sound waves\n      this.ctx.strokeStyle = this.audio.muted ? \"#b6b6b6\" : \"#1f6f8b\";\n      this.ctx.lineWidth = 2;\n      this.ctx.beginPath();\n      this.ctx.arc(12, 0, 8, -0.6, 0.6);\n      this.ctx.stroke();\n      this.ctx.beginPath();\n      this.ctx.arc(16, 0, 12, -0.6, 0.6);\n      this.ctx.stroke();\n      this.ctx.restore();\n\n      // Instructions\n      this.ctx.fillStyle = \"#123240\";\n      this.ctx.font = \"14px sans-serif\";\n      this.ctx.textAlign = \"left\";\n      this.ctx.fillText(\"Controls: Tab to switch, Arrow keys to change, Enter to submit, H for hint, M to mute.\", 20, 30);\n\n      // Round & Score\n      this.ctx.fillStyle = \"#0f3b3e\";\n      this.ctx.font = \"bold 16px sans-serif\";\n      this.ctx.fillText(`Round ${Math.min(this.round + 1, this.roundsTotal)} / ${this.roundsTotal}`, 20, 55);\n      this.ctx.fillText(`Score: ${this.score}`, 20, 75);\n      this.ctx.fillText(`Attempts: ${this.attempts} / ${this.maxAttempts}`, 20, 95);\n    }\n\n    drawRobotFriend() {\n      // small friendly robot to make machines wacky\n      const x = 80, y = 200;\n      // body\n      this.ctx.fillStyle = \"#fff\";\n      roundRect(this.ctx, x - 20, y - 50, 80, 80, 8);\n      this.ctx.fillStyle = \"#d8eff2\";\n      roundRect(this.ctx, x - 18, y - 48, 76, 76, 6);\n      // eyes\n      this.ctx.fillStyle = \"#223\";\n      this.ctx.beginPath();\n      this.ctx.arc(x+2, y - 10, 6, 0, Math.PI * 2);\n      this.ctx.fill();\n      this.ctx.beginPath();\n      this.ctx.arc(x+32, y - 10, 6, 0, Math.PI * 2);\n      this.ctx.fill();\n      // mouth\n      this.ctx.strokeStyle = \"#163a45\";\n      this.ctx.lineWidth = 2;\n      this.ctx.beginPath();\n      this.ctx.arc(x+17, y+6, 12, 0.2 * Math.PI, 0.8 * Math.PI);\n      this.ctx.stroke();\n      // antenna\n      this.ctx.strokeStyle = \"#7b9ea0\";\n      this.ctx.lineWidth = 3;\n      this.ctx.beginPath();\n      this.ctx.moveTo(x+17, y - 50);\n      this.ctx.lineTo(x+17, y - 70);\n      this.ctx.stroke();\n      this.ctx.fillStyle = \"#ff6f61\";\n      this.ctx.beginPath();\n      this.ctx.arc(x+17, y - 74, 6, 0, Math.PI * 2);\n      this.ctx.fill();\n    }\n\n    drawAccessibilityInfo() {\n      // Visual cues for audio (small text)\n      this.ctx.fillStyle = \"#2c3e50\";\n      this.ctx.font = \"12px sans-serif\";\n      this.ctx.textAlign = \"right\";\n      const audioState = this.audio.muted ? \"Muted (M to unmute)\" : \"Sound on (M to mute)\";\n      this.ctx.fillText(audioState, this.width - 18, this.height - 12);\n\n      // If audio not available, show warning\n      if (!this.audio.enabled) {\n        this.ctx.fillStyle = \"#8b1e1e\";\n        this.ctx.font = \"bold 14px sans-serif\";\n        this.ctx.textAlign = \"center\";\n        this.ctx.fillText(\"Audio not available in this browser. Visual feedback enabled.\", this.width / 2, this.height - 12);\n      }\n    }\n\n    loop(ts) {\n      this.animTime = ts / 1000;\n      this.gearAngle += 0.01 + 0.003 * Math.sin(this.animTime);\n      // Draw everything\n      this.drawBackground();\n      this.drawMachineFrame();\n      this.drawGears();\n      this.drawDials();\n      this.drawControls();\n      this.drawRobotFriend();\n      this.drawAccessibilityInfo();\n\n      // Draw state-dependent overlays\n      if (this.state === \"intro\") {\n        this.ctx.fillStyle = \"rgba(20,30,40,0.75)\";\n        this.ctx.fillRect(60, 120, 600, 260);\n\n        this.ctx.fillStyle = \"#fff\";\n        this.ctx.font = \"22px sans-serif\";\n        this.ctx.textAlign = \"center\";\n        this.ctx.fillText(\"Welcome to Machine Math!\", this.width / 2, 200);\n        this.ctx.font = \"16px sans-serif\";\n        this.ctx.fillText(\"Adjust the dials to make the machine output match the target number.\", this.width / 2, 230);\n        this.ctx.fillText(\"Operations: +, -, \u00d7. Use keyboard or click. Press Enter to begin.\", this.width / 2, 260);\n\n      } else if (this.state === \"playing\") {\n        // highlight selected dial visually\n        const selPos = this.selectedDial === 0 ? { x: 200, y: 280 } : { x: 360, y: 280 };\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.strokeStyle = \"rgba(59,130,246,0.6)\";\n        this.ctx.lineWidth = 4;\n        this.ctx.arc(selPos.x, selPos.y, 54, 0, Math.PI * 2);\n        this.ctx.stroke();\n        this.ctx.restore();\n      } else if (this.state === \"success\") {\n        // quick celebratory overlay\n        this.ctx.fillStyle = \"rgba(255,255,255,0.7)\";\n        this.ctx.fillRect(120, 160, 480, 160);\n        this.ctx.fillStyle = \"#1a6b4f\";\n        this.ctx.font = \"22px sans-serif\";\n        this.ctx.textAlign = \"center\";\n        this.ctx.fillText(\"Nice work!\", this.width / 2, 210);\n        this.ctx.font = \"18px sans-serif\";\n        this.ctx.fillText(`The answer was ${this.solution[0]} ${this.operation} ${this.solution[1]} = ${this.target}`, this.width / 2, 245);\n      } else if (this.state === \"finished\") {\n        this.ctx.fillStyle = \"rgba(10, 20, 30, 0.85)\";\n        this.ctx.fillRect(80, 120, 560, 240);\n        this.ctx.fillStyle = \"#fff\";\n        this.ctx.font = \"bold 28px sans-serif\";\n        this.ctx.textAlign = \"center\";\n        this.ctx.fillText(\"All Machines Complete!\", this.width / 2, 190);\n        this.ctx.font = \"20px sans-serif\";\n        this.ctx.fillText(`Final Score: ${this.score} / ${this.roundsTotal}`, this.width / 2, 230);\n        this.ctx.font = \"16px sans-serif\";\n        this.ctx.fillText(\"Press Enter to play again. Thanks for playing!\", this.width / 2, 270);\n      }\n\n      // small floating feedback (current dial values)\n      this.ctx.fillStyle = \"#112b2b\";\n      this.ctx.font = \"bold 18px monospace\";\n      this.ctx.textAlign = \"center\";\n      this.ctx.fillText(`${this.dials[0]}   ${this.operation}   ${this.dials[1]} = ?`, 280, 340);\n\n      requestAnimationFrame(this.loop);\n    }\n  }\n\n  // helpers\n  function roundRect(ctx, x, y, w, h, r) {\n    ctx.beginPath();\n    ctx.moveTo(x + r, y);\n    ctx.arcTo(x + w, y, x + w, y + h, r);\n    ctx.arcTo(x + w, y + h, x, y + h, r);\n    ctx.arcTo(x, y + h, x, y, r);\n    ctx.arcTo(x, y, x + w, y, r);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  function shadeColor(hex, percent) {\n    // hex as string like #rrggbb\n    const c = hex.charAt(0) === \"#\" ? hex.substring(1) : hex;\n    const num = parseInt(c, 16);\n    let r = (num >> 16) + percent;\n    let g = ((num >> 8) & 0x00ff) + percent;\n    let b = (num & 0x0000ff) + percent;\n    r = Math.max(Math.min(255, r), 0);\n    g = Math.max(Math.min(255, g), 0);\n    b = Math.max(Math.min(255, b), 0);\n    return \"#\" + (r << 16 | g << 8 | b).toString(16).padStart(6, \"0\");\n  }\n\n  // Instantiate game\n  const game = new Game(ctx, WIDTH, HEIGHT, audio);\n\n  // Event listeners\n  window.addEventListener(\"keydown\", (e) => {\n    game.handleKeyDown(e);\n  });\n\n  canvas.addEventListener(\"mousedown\", (e) => {\n    const rect = canvas.getBoundingClientRect();\n    const x = Math.round((e.clientX - rect.left) * (canvas.width / rect.width));\n    const y = Math.round((e.clientY - rect.top) * (canvas.height / rect.height));\n    // attempt to initialize audio on user gesture\n    if (audio && audio.enabled) {\n      audio.ensureInitialized().catch(() => {});\n    }\n    game.handleMouseDown(x, y);\n  });\n\n  // Touch support for mobile\n  canvas.addEventListener(\"touchstart\", (ev) => {\n    ev.preventDefault();\n    const t = ev.touches[0];\n    const rect = canvas.getBoundingClientRect();\n    const x = Math.round((t.clientX - rect.left) * (canvas.width / rect.width));\n    const y = Math.round((t.clientY - rect.top) * (canvas.height / rect.height));\n    if (audio && audio.enabled) {\n      audio.ensureInitialized().catch(() => {});\n    }\n    game.handleMouseDown(x, y);\n  }, { passive: false });\n\n  // Start with intro live message\n  liveRegion.textContent = \"Welcome to Machine Math! Press Enter to begin. Use Tab to switch dials, arrow keys to change values, Enter to submit, H for hint, M to mute.\";\n\n  // Handle focus for keyboard accessibility\n  canvas.setAttribute(\"tabindex\", \"0\");\n  canvas.style.outline = \"none\";\n  canvas.addEventListener(\"focus\", () => {\n    liveRegion.textContent = \"Canvas focused. \" + liveRegion.textContent;\n  });\n\n  // Try to resume audio on first user gesture globally (best effort)\n  const resumeAudioOnGesture = () => {\n    if (audio && audio.enabled) {\n      audio.ensureInitialized().catch(() => {});\n      window.removeEventListener(\"pointerdown\", resumeAudioOnGesture);\n      window.removeEventListener(\"keydown\", resumeAudioOnGesture);\n    }\n  };\n  window.addEventListener(\"pointerdown\", resumeAudioOnGesture);\n  window.addEventListener(\"keydown\", resumeAudioOnGesture);\n\n  // Provide initial visual tidy-up\n  ctx.clearRect(0, 0, WIDTH, HEIGHT);\n\n})();\n---\n",
  "improve_response_tokens": 21746,
  "formatted_code": true,
  "formatting_response_tokens": 25681,
  "final_functionality": {
    "score": 8,
    "max_score": 8,
    "percentage": 100.0,
    "passing": true,
    "issues": [],
    "warnings": []
  }
}