{
  "generated_date": "2025-09-29",
  "generated_timestamp": "2025-09-29T00:27:42.027199",
  "model": "gpt-5-mini",
  "theme": "machines",
  "prompt": "You are an expert educational game designer. You will generate a fun, playable math game in JavaScript for children ages 7 to 9, focused on foundational concepts presented in a way that is engaging and fun. Today's theme: machines\n\nThe game must:\n\u2022 Be beatable.\n\u2022 Use visually calming and interesting and wacky elements.\n\u2022 Include sound, using the Web Audio API for correct/incorrect feedback, gentle background effects, or interactions. Use an audio context.\n\u2022 Render entirely inside the existing HTML element with ID game-of-the-day-stage. You may create a canvas element inside it .\n\u2022 Have a game area exactly 720px wide by 480px tall.\n\u2022 Be written in clean, readable JavaScript with proper formatting, indentation, and comments.\n\u2022 Use modern JavaScript practices and avoid minification.\n\u2022 Include proper error handling for audio and resource loading.\n\u2022 Be accessible: include keyboard controls, text alternatives, visual cues for audio, clear instructions, and error handling.\n\u2022 Use ONLY canvas-drawn graphics or 3js and Web Audio API - NO external image URLs, NO external audio files, NO external dependencies.\n\u2022 Create all visual elements using canvas drawing methods (rect, arc, fillText, etc.) or 3js.\n\u2022 Generate all sounds using Web Audio API oscillators and filters.\n\u2022 Include proper error handling for audio context creation.\n\u2022 Output only JavaScript code. No extra explanation, no markdown formatting, no code blocks, no HTML, no CSS.\n\u2022 Do not wrap the code in ```javascript or any other markdown formatting.",
  "response_tokens": 9414,
  "game_filename": "2025-09-29.js",
  "game_size_bytes": 28562,
  "functionality": {
    "score": 8,
    "max_score": 8,
    "percentage": 100.0,
    "passing": true,
    "issues": [],
    "warnings": []
  },
  "dependencies": {
    "has_external_deps": false,
    "issues": [],
    "warnings": [],
    "canvas_methods_used": 6
  },
  "improved_visuals_audio": true,
  "improve_prompt": "You are an expert educational game designer. \nTake the following JavaScript game code and improve ONLY the visuals and audio. \nDo not change the game mechanics or math logic. \nEnhance the visual appeal (colors, animations, backgrounds, characters), avoid overstimulation with sounds and visuals, and add or improve sound effects and background audio. \nRender entirely inside the existing HTML element with ID game-of-the-day-stage. You may create a canvas element inside it (do not include angle brackets in text instructions).\nHave a game area exactly 720px wide by 480px tall.\nBe written in clean, readable JavaScript with proper formatting, indentation, and comments.\nUse modern JavaScript practices and avoid minification.\nInclude proper error handling for audio and resource loading.\nUse ONLY canvas-drawn graphics and Web Audio API - NO external image URLs, NO external audio files, NO external dependencies.\nCreate all visual elements using canvas drawing methods (rect, arc, fillText, etc.).\nGenerate all sounds using Web Audio API oscillators and filters.\nInclude proper error handling for audio context creation.\nOutput only JavaScript code. No extra explanation, no markdown formatting, no code blocks.\nDo not wrap the code in ```javascript or any other markdown formatting.\n\n---\n(function () {\n  // Machine Math Game for ages 7-9\n  // Renders inside element with ID \"game-of-the-day-stage\"\n  // Canvas-based graphics and Web Audio API sounds (no external resources)\n  \"use strict\";\n\n  // --- Configuration ---\n  const WIDTH = 720;\n  const HEIGHT = 480;\n  const STAGE_ID = \"game-of-the-day-stage\";\n  const MAX_LEVELS = 5;\n\n  // Levels: each has number of dials and target sum (constructed to be solvable)\n  const LEVELS = [\n    { dials: 2, target: 7 }, // e.g., 2 dials, sum 7\n    { dials: 2, target: 11 },\n    { dials: 3, target: 12 },\n    { dials: 3, target: 18 },\n    { dials: 4, target: 20 }\n  ].slice(0, MAX_LEVELS);\n\n  // --- DOM Setup ---\n  const root = document.getElementById(STAGE_ID);\n  if (!root) {\n    // If the stage element is missing, stop gracefully\n    console.error(`Element with ID \"${STAGE_ID}\" not found.`);\n    return;\n  }\n  // Clear any existing children\n  while (root.firstChild) root.removeChild(root.firstChild);\n\n  // Create canvas\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = WIDTH;\n  canvas.height = HEIGHT;\n  canvas.setAttribute(\"role\", \"img\");\n  canvas.setAttribute(\"aria-label\", \"Machine Math Game canvas\");\n  canvas.style.width = WIDTH + \"px\";\n  canvas.style.height = HEIGHT + \"px\";\n  canvas.tabIndex = 0; // for keyboard focus\n  root.appendChild(canvas);\n  const ctx = canvas.getContext(\"2d\", { alpha: false });\n\n  // Create accessible live region for screen reader updates\n  const liveRegion = document.createElement(\"div\");\n  liveRegion.setAttribute(\"aria-live\", \"polite\");\n  liveRegion.style.position = \"absolute\";\n  liveRegion.style.left = \"-9999px\";\n  liveRegion.style.width = \"1px\";\n  liveRegion.style.height = \"1px\";\n  liveRegion.style.overflow = \"hidden\";\n  root.appendChild(liveRegion);\n\n  // Controls container (visible): Start button and audio toggle\n  const controls = document.createElement(\"div\");\n  controls.style.position = \"relative\";\n  controls.style.width = WIDTH + \"px\";\n  controls.style.marginTop = \"6px\";\n  controls.style.fontFamily = \"sans-serif\";\n  controls.style.fontSize = \"14px\";\n  // Start / Resume button\n  const startButton = document.createElement(\"button\");\n  startButton.textContent = \"Start Game\";\n  startButton.style.marginRight = \"8px\";\n  startButton.setAttribute(\"aria-label\", \"Start the game\");\n  controls.appendChild(startButton);\n  // Audio toggle\n  const audioButton = document.createElement(\"button\");\n  audioButton.textContent = \"Audio: On\";\n  audioButton.setAttribute(\"aria-pressed\", \"true\");\n  audioButton.style.marginRight = \"8px\";\n  audioButton.setAttribute(\"aria-label\", \"Toggle audio on or off\");\n  controls.appendChild(audioButton);\n  // Hint button\n  const hintButton = document.createElement(\"button\");\n  hintButton.textContent = \"Hint\";\n  hintButton.setAttribute(\"aria-label\", \"Show a hint\");\n  controls.appendChild(hintButton);\n  root.appendChild(controls);\n\n  // Instruction text under canvas (visible)\n  const instructions = document.createElement(\"div\");\n  instructions.style.width = WIDTH + \"px\";\n  instructions.style.marginTop = \"8px\";\n  instructions.style.fontFamily = \"sans-serif\";\n  instructions.style.fontSize = \"13px\";\n  instructions.innerHTML =\n    \"Use mouse or keyboard. Left/Right to pick a dial, Up/Down to change values. Enter to submit. Space toggles audio. H shows a hint.\";\n  root.appendChild(instructions);\n\n  // --- Audio Setup ---\n  let audioAllowed = true;\n  let audioCtx = null;\n  let masterGain = null;\n  let bgGain = null;\n  let bgOsc = null;\n  let audioError = false;\n\n  function initAudio() {\n    if (!audioAllowed) return;\n    if (audioCtx) return;\n\n    try {\n      const AC = window.AudioContext || window.webkitAudioContext;\n      if (!AC) {\n        throw new Error(\"Web Audio API not supported\");\n      }\n      audioCtx = new AC();\n      masterGain = audioCtx.createGain();\n      masterGain.gain.value = 0.9;\n      masterGain.connect(audioCtx.destination);\n\n      // Gentle background hum with a slow LFO on gain\n      bgGain = audioCtx.createGain();\n      bgGain.gain.value = 0.04;\n      bgGain.connect(masterGain);\n\n      bgOsc = audioCtx.createOscillator();\n      bgOsc.type = \"sine\";\n      bgOsc.frequency.value = 110; // low warm tone\n      bgOsc.connect(bgGain);\n      // Create a slow LFO to modulate bgGain for gentle breathing\n      const lfo = audioCtx.createOscillator();\n      lfo.type = \"sine\";\n      lfo.frequency.value = 0.25; // slow\n      const lfoGain = audioCtx.createGain();\n      lfoGain.gain.value = 0.02;\n      lfo.connect(lfoGain);\n      lfoGain.connect(bgGain.gain);\n      lfo.start();\n      bgOsc.start();\n    } catch (err) {\n      console.warn(\"Audio initialization failed:\", err);\n      audioError = true;\n      audioAllowed = false;\n      audioCtx = null;\n      masterGain = null;\n      bgGain = null;\n      bgOsc = null;\n      liveRegion.textContent = \"Audio is not available on this device.\";\n    }\n  }\n\n  function safeCreateAudioContextOnGesture() {\n    // Some browsers require resume on user gesture. Try resuming or creating when user clicks Start.\n    try {\n      if (!audioCtx && audioAllowed) {\n        initAudio();\n      } else if (audioCtx && audioCtx.state === \"suspended\") {\n        audioCtx.resume().catch((err) => {\n          console.warn(\"Audio resume failed:\", err);\n        });\n      }\n    } catch (err) {\n      console.warn(\"Audio gesture handling error:\", err);\n    }\n  }\n\n  // Play a short tone using oscillator\n  function playTone({ freq = 440, type = \"sine\", duration = 0.25, vol = 0.12, release = 0.04 } = {}) {\n    if (!audioAllowed || !audioCtx || audioError) return;\n    try {\n      const o = audioCtx.createOscillator();\n      const g = audioCtx.createGain();\n      o.type = type;\n      o.frequency.value = freq;\n      g.gain.value = 0;\n      o.connect(g);\n      g.connect(masterGain);\n      const now = audioCtx.currentTime;\n      // Attack\n      g.gain.cancelScheduledValues(now);\n      g.gain.setValueAtTime(0, now);\n      g.gain.linearRampToValueAtTime(vol, now + 0.01);\n      // Release\n      g.gain.linearRampToValueAtTime(0.0001, now + duration + release);\n      o.start(now);\n      o.stop(now + duration + release + 0.02);\n    } catch (err) {\n      console.warn(\"playTone error:\", err);\n    }\n  }\n\n  // Play success chime (ascending arpeggio)\n  function playSuccess() {\n    if (!audioAllowed || !audioCtx) return;\n    const now = audioCtx.currentTime;\n    const notes = [440, 550, 660];\n    notes.forEach((f, i) => {\n      try {\n        const o = audioCtx.createOscillator();\n        const g = audioCtx.createGain();\n        o.type = \"sine\";\n        o.frequency.value = f;\n        g.gain.value = 0;\n        o.connect(g);\n        g.connect(masterGain);\n        const t = now + i * 0.12;\n        g.gain.setValueAtTime(0, t);\n        g.gain.linearRampToValueAtTime(0.14, t + 0.01);\n        g.gain.linearRampToValueAtTime(0.0001, t + 0.12);\n        o.start(t);\n        o.stop(t + 0.2);\n      } catch (err) {\n        console.warn(\"playSuccess error:\", err);\n      }\n    });\n  }\n\n  function playError() {\n    // Low buzz\n    playTone({ freq: 120, type: \"sawtooth\", duration: 0.32, vol: 0.14, release: 0.06 });\n    // small click after\n    setTimeout(() => {\n      playTone({ freq: 880, type: \"square\", duration: 0.06, vol: 0.05 });\n    }, 260);\n  }\n\n  function playClick() {\n    playTone({ freq: 880, type: \"square\", duration: 0.06, vol: 0.06 });\n  }\n\n  // --- Game State ---\n  let state = {\n    running: false,\n    levelIndex: 0,\n    dials: [], // values for current level\n    selectedDial: 0,\n    attempts: 0,\n    solvedLevels: 0,\n    showHint: false,\n    animT: 0,\n    shakeAmount: 0\n  };\n\n  function startLevel(index) {\n    state.levelIndex = index;\n    const level = LEVELS[index];\n    state.dials = new Array(level.dials).fill(0).map(() => Math.floor(Math.random() * 10));\n    // Ensure solvable: create a solution by adjusting randomly if sum != target, but we want challenge so not pre-solving.\n    // However make sure target is reachable with digit limits: adjust target if needed\n    // For safety, if target can't be achieved with given dials (target > 9*dials or < 0), adjust target to mid-range\n    if (level.target > level.dials * 9 || level.target < 0) {\n      level.target = Math.min(level.dials * 9, Math.max(1, Math.floor((level.dials * 9) / 2)));\n    }\n    state.selectedDial = 0;\n    state.attempts = 0;\n    state.showHint = false;\n    state.animT = 0;\n    state.shakeAmount = 0;\n    liveRegion.textContent = `Level ${index + 1}. Set the dials to add up to ${level.target}.`;\n  }\n\n  // Start game from scratch\n  function startGame() {\n    state.running = true;\n    state.levelIndex = 0;\n    state.solvedLevels = 0;\n    startLevel(0);\n    safeCreateAudioContextOnGesture();\n  }\n\n  // Progress to next level, or show end screen\n  function nextLevel() {\n    state.solvedLevels++;\n    if (state.levelIndex + 1 < LEVELS.length) {\n      startLevel(state.levelIndex + 1);\n    } else {\n      // Finished\n      state.running = false;\n      liveRegion.textContent = \"All machines fixed! Great job!\";\n    }\n  }\n\n  // Hint generator: show one dial value that would help\n  function getHint() {\n    const level = LEVELS[state.levelIndex];\n    const curSum = state.dials.reduce((a, b) => a + b, 0);\n    const remaining = level.target - curSum;\n    if (Math.abs(remaining) <= 9) {\n      // Suggest a change to selected dial if feasible\n      const needed = state.dials[state.selectedDial] + remaining;\n      if (needed >= 0 && needed <= 9) {\n        return `Try setting dial ${state.selectedDial + 1} to ${needed}`;\n      }\n    }\n    // Otherwise suggest a small positive adjustment\n    return `Try changing a dial by ${remaining > 0 ? \"+\" : \"\"}${remaining}`;\n  }\n\n  // Submit attempt: checks sum\n  function submitAttempt() {\n    const level = LEVELS[state.levelIndex];\n    const sum = state.dials.reduce((a, b) => a + b, 0);\n    state.attempts++;\n    if (sum === level.target) {\n      // Success animation and sound\n      playSuccess();\n      state.shakeAmount = 12;\n      setTimeout(() => {\n        state.shakeAmount = 0;\n      }, 320);\n      liveRegion.textContent = `Correct! You fixed machine ${state.levelIndex + 1}.`;\n      // Move to next level after a short delay\n      setTimeout(nextLevel, 800);\n    } else {\n      // Wrong\n      playError();\n      state.shakeAmount = 8;\n      setTimeout(() => {\n        state.shakeAmount = 0;\n      }, 420);\n      liveRegion.textContent = `Not yet. The sum is ${sum}. Try again.`;\n    }\n  }\n\n  // --- Input Handling ---\n  // Mouse: clicking on dials changes selected or increments\n  function getDialHit(x, y) {\n    // dials drawn horizontally centered; compute bounding boxes similar to drawDials\n    const level = LEVELS[state.levelIndex];\n    const count = level.dials;\n    const dialSize = 64;\n    const spacing = 18;\n    const totalW = count * dialSize + (count - 1) * spacing;\n    const startX = WIDTH / 2 - totalW / 2;\n    const yTop = HEIGHT / 2 - 24;\n    for (let i = 0; i < count; i++) {\n      const dx = startX + i * (dialSize + spacing);\n      const dy = yTop;\n      if (x >= dx && x <= dx + dialSize && y >= dy && y <= dy + dialSize) return i;\n    }\n    return -1;\n  }\n\n  canvas.addEventListener(\"mousedown\", (ev) => {\n    const rect = canvas.getBoundingClientRect();\n    const x = ev.clientX - rect.left;\n    const y = ev.clientY - rect.top;\n    if (!state.running) {\n      // clicking canvas may start audio context but game controlled by Start button\n      safeCreateAudioContextOnGesture();\n    }\n    const dialIdx = getDialHit(x, y);\n    if (dialIdx >= 0) {\n      state.selectedDial = dialIdx;\n      // Left-click increments\n      if (ev.button === 0) {\n        state.dials[dialIdx] = (state.dials[dialIdx] + 1) % 10;\n      } else if (ev.button === 2) {\n        // right-click decrements\n        state.dials[dialIdx] = (state.dials[dialIdx] + 9) % 10;\n      }\n      playClick();\n    } else {\n      // If click on top area where submit button is drawn, maybe commit - allow clicking roughly under machine center\n      // We'll detect near the \"Submit\" machine lever region\n      const submitRect = getSubmitRect();\n      if (x >= submitRect.x && x <= submitRect.x + submitRect.w && y >= submitRect.y && y <= submitRect.y + submitRect.h) {\n        submitAttempt();\n      }\n    }\n  });\n\n  canvas.addEventListener(\"contextmenu\", (ev) => {\n    // Prevent default context menu while right-clicking on canvas for decrement\n    ev.preventDefault();\n  });\n\n  // Keyboard controls\n  canvas.addEventListener(\"keydown\", (ev) => {\n    if (!state.running && ev.key === \"Enter\") {\n      startButton.focus();\n      startButton.click();\n      return;\n    }\n    if (!state.running) {\n      // If not running, ignore other keys\n      return;\n    }\n    const level = LEVELS[state.levelIndex];\n    if (!level) return;\n    if (ev.key === \"ArrowLeft\") {\n      state.selectedDial = (state.selectedDial - 1 + level.dials) % level.dials;\n      playClick();\n      ev.preventDefault();\n    } else if (ev.key === \"ArrowRight\") {\n      state.selectedDial = (state.selectedDial + 1) % level.dials;\n      playClick();\n      ev.preventDefault();\n    } else if (ev.key === \"ArrowUp\") {\n      state.dials[state.selectedDial] = (state.dials[state.selectedDial] + 1) % 10;\n      playClick();\n      ev.preventDefault();\n    } else if (ev.key === \"ArrowDown\") {\n      state.dials[state.selectedDial] = (state.dials[state.selectedDial] + 9) % 10;\n      playClick();\n      ev.preventDefault();\n    } else if (ev.key === \"Enter\") {\n      submitAttempt();\n      ev.preventDefault();\n    } else if (ev.key === \" \" || ev.key === \"Spacebar\") {\n      // Toggle audio\n      toggleAudio();\n      ev.preventDefault();\n    } else if (ev.key === \"h\" || ev.key === \"H\") {\n      state.showHint = !state.showHint;\n      liveRegion.textContent = state.showHint ? getHint() : \"Hint hidden\";\n      playClick();\n      ev.preventDefault();\n    } else if (/^[0-9]$/.test(ev.key)) {\n      // number key to set selected dial\n      const v = parseInt(ev.key, 10);\n      state.dials[state.selectedDial] = v;\n      playClick();\n      ev.preventDefault();\n    }\n  });\n\n  // Buttons\n  startButton.addEventListener(\"click\", () => {\n    safeCreateAudioContextOnGesture();\n    if (!state.running) {\n      startGame();\n      startButton.textContent = \"Restart\";\n      startButton.setAttribute(\"aria-label\", \"Restart the game\");\n      canvas.focus();\n    } else {\n      // Restart anyway\n      startGame();\n      canvas.focus();\n    }\n    playClick();\n  });\n\n  audioButton.addEventListener(\"click\", () => {\n    toggleAudio();\n  });\n\n  hintButton.addEventListener(\"click\", () => {\n    if (!state.running) return;\n    state.showHint = !state.showHint;\n    liveRegion.textContent = state.showHint ? getHint() : \"Hint hidden\";\n    playClick();\n  });\n\n  function toggleAudio() {\n    audioAllowed = !audioAllowed;\n    if (audioAllowed) {\n      audioButton.textContent = \"Audio: On\";\n      audioButton.setAttribute(\"aria-pressed\", \"true\");\n      safeCreateAudioContextOnGesture();\n    } else {\n      audioButton.textContent = \"Audio: Off\";\n      audioButton.setAttribute(\"aria-pressed\", \"false\");\n      if (audioCtx) {\n        try {\n          audioCtx.suspend();\n        } catch (err) {\n          console.warn(\"Error suspending audio context:\", err);\n        }\n      }\n    }\n  }\n\n  // --- Drawing Utilities ---\n  function clear() {\n    // Calm light background\n    ctx.fillStyle = \"#F4F7F8\";\n    ctx.fillRect(0, 0, WIDTH, HEIGHT);\n  }\n\n  function drawBackgroundDecor(t) {\n    // Wavy pipes and dots - calming pastel colors\n    ctx.save();\n    // soft gradient\n    const g = ctx.createLinearGradient(0, 0, WIDTH, HEIGHT);\n    g.addColorStop(0, \"#E8F4F8\");\n    g.addColorStop(1, \"#F7FAFD\");\n    ctx.fillStyle = g;\n    ctx.globalAlpha = 1;\n    ctx.fillRect(0, 0, WIDTH, HEIGHT);\n\n    // Wacky calming clouds\n    ctx.globalAlpha = 0.6;\n    ctx.fillStyle = \"#D6EFF7\";\n    drawCloud(120, 90, 80, t * 0.02);\n    drawCloud(540, 70, 60, t * -0.015);\n    drawCloud(400, 140, 70, t * 0.01);\n    ctx.globalAlpha = 1;\n    ctx.restore();\n  }\n\n  function drawCloud(cx, cy, r, phase) {\n    ctx.beginPath();\n    ctx.arc(cx - r * 0.6 + Math.sin(phase) * 3, cy, r * 0.6, 0, Math.PI * 2);\n    ctx.arc(cx + Math.cos(phase) * 4, cy - 4, r * 0.7, 0, Math.PI * 2);\n    ctx.arc(cx + r * 0.6 + Math.sin(phase * 1.1) * 3, cy + 2, r * 0.55, 0, Math.PI * 2);\n    ctx.fill();\n  }\n\n  function drawGears(x, y, radius, teeth, rotation, color) {\n    ctx.save();\n    ctx.translate(x, y);\n    ctx.rotate(rotation);\n    // gear body\n    ctx.fillStyle = color || \"#C8E7F2\";\n    ctx.strokeStyle = \"#A7D1DE\";\n    ctx.lineWidth = 2;\n    // teeth\n    for (let i = 0; i < teeth; i++) {\n      const ang = (i / teeth) * Math.PI * 2;\n      const innerR = radius * 0.86;\n      const outerR = radius * 1.12;\n      const x1 = Math.cos(ang) * innerR;\n      const y1 = Math.sin(ang) * innerR;\n      const x2 = Math.cos(ang) * outerR;\n      const y2 = Math.sin(ang) * outerR;\n      ctx.beginPath();\n      ctx.moveTo(x1, y1);\n      ctx.lineTo(x2, y2);\n      ctx.stroke();\n    }\n    // center circle\n    ctx.beginPath();\n    ctx.arc(0, 0, radius * 0.72, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.stroke();\n    // small center hole\n    ctx.beginPath();\n    ctx.fillStyle = \"#F4F7F8\";\n    ctx.arc(0, 0, Math.max(6, radius * 0.12), 0, Math.PI * 2);\n    ctx.fill();\n    ctx.restore();\n  }\n\n  function drawDials(t) {\n    const level = LEVELS[state.levelIndex];\n    if (!level) return;\n    const count = level.dials;\n    const dialSize = 64;\n    const spacing = 18;\n    const totalW = count * dialSize + (count - 1) * spacing;\n    const startX = WIDTH / 2 - totalW / 2;\n    const yTop = HEIGHT / 2 - 24;\n    // Draw machine body behind dials\n    ctx.save();\n    // Apply shake for wrong attempts\n    if (state.shakeAmount) {\n      const s = state.shakeAmount;\n      const dx = (Math.random() - 0.5) * s;\n      const dy = (Math.random() - 0.5) * s;\n      ctx.translate(dx, dy);\n    }\n    ctx.fillStyle = \"#E6F7FF\";\n    roundRect(ctx, startX - 28, yTop - 40, totalW + 56, 180, 18);\n    ctx.fill();\n    ctx.strokeStyle = \"#C6E9F7\";\n    ctx.lineWidth = 2;\n    ctx.stroke();\n\n    // dials themselves\n    for (let i = 0; i < count; i++) {\n      const dx = startX + i * (dialSize + spacing);\n      const dy = yTop;\n      // dial background\n      ctx.save();\n      ctx.fillStyle = \"#FFFFFF\";\n      roundRect(ctx, dx, dy, dialSize, dialSize, 12);\n      ctx.fill();\n      ctx.strokeStyle = i === state.selectedDial ? \"#FFB347\" : \"#C0D9E3\";\n      ctx.lineWidth = i === state.selectedDial ? 4 : 2;\n      ctx.stroke();\n      // little gear icon on dial\n      drawGears(dx + dialSize - 22, dy + 22, 12, 8, t * 0.004 * (i + 1), \"#E0F3FA\");\n      // number\n      ctx.fillStyle = \"#1B3A47\";\n      ctx.font = \"bold 28px sans-serif\";\n      ctx.textAlign = \"center\";\n      ctx.textBaseline = \"middle\";\n      ctx.fillText(state.dials[i].toString(), dx + dialSize / 2, dy + dialSize / 2 - 6);\n      // up arrow\n      ctx.beginPath();\n      ctx.fillStyle = \"#90C7D8\";\n      ctx.moveTo(dx + dialSize / 2, dy - 6);\n      ctx.lineTo(dx + dialSize / 2 - 10, dy + 8);\n      ctx.lineTo(dx + dialSize / 2 + 10, dy + 8);\n      ctx.closePath();\n      ctx.fill();\n      // down arrow\n      ctx.beginPath();\n      ctx.fillStyle = \"#90C7D8\";\n      ctx.moveTo(dx + dialSize / 2, dy + dialSize + 6);\n      ctx.lineTo(dx + dialSize / 2 - 10, dy + dialSize - 8);\n      ctx.lineTo(dx + dialSize / 2 + 10, dy + dialSize - 8);\n      ctx.closePath();\n      ctx.fill();\n\n      // Outline if selected\n      if (i === state.selectedDial) {\n        ctx.strokeStyle = \"#FFB347\";\n        ctx.lineWidth = 2;\n        ctx.strokeRect(dx - 6, dy - 6, dialSize + 12, dialSize + 12);\n      }\n      ctx.restore();\n    }\n\n    // Submit lever / big button\n    const submitRect = getSubmitRect();\n    ctx.save();\n    // lever base\n    ctx.fillStyle = \"#B6E1F0\";\n    roundRect(ctx, submitRect.x - 12, submitRect.y - 6, submitRect.w + 24, submitRect.h + 12, 8);\n    ctx.fill();\n    ctx.strokeStyle = \"#96C9DB\";\n    ctx.stroke();\n\n    // lever knob (wacky)\n    ctx.fillStyle = \"#FFD29B\";\n    ctx.beginPath();\n    ctx.ellipse(submitRect.x + submitRect.w / 2, submitRect.y + submitRect.h / 2, submitRect.w / 2 - 6, submitRect.h / 2 - 10, Math.sin(t * 0.01) * 0.02, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.strokeStyle = \"#FFAB63\";\n    ctx.stroke();\n    // label\n    ctx.fillStyle = \"#2B4B57\";\n    ctx.font = \"bold 16px sans-serif\";\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.fillText(\"Submit\", submitRect.x + submitRect.w / 2, submitRect.y + submitRect.h / 2);\n    ctx.restore();\n    ctx.restore();\n  }\n\n  function getSubmitRect() {\n    // place below dials\n    const level = LEVELS[state.levelIndex];\n    const count = level.dials;\n    const dialSize = 64;\n    const spacing = 18;\n    const totalW = count * dialSize + (count - 1) * spacing;\n    const startX = WIDTH / 2 - totalW / 2;\n    const x = WIDTH / 2 - 64;\n    const y = HEIGHT / 2 + 72;\n    return { x: x, y: y, w: 128, h: 36 };\n  }\n\n  function drawTarget(t) {\n    const level = LEVELS[state.levelIndex];\n    if (!level) {\n      ctx.fillStyle = \"#333\";\n      ctx.font = \"20px sans-serif\";\n      ctx.fillText(\"Press Start to play\", WIDTH / 2 - 80, HEIGHT / 2);\n      return;\n    }\n    // draw big target number at top-left of machine\n    ctx.save();\n    const tx = WIDTH / 2;\n    const ty = HEIGHT / 2 - 120;\n    // friendly little screen\n    ctx.fillStyle = \"#1B5165\";\n    ctx.beginPath();\n    roundRect(ctx, tx - 160, ty - 28, 320, 44, 10);\n    ctx.fill();\n    ctx.fillStyle = \"#E8FBFF\";\n    ctx.font = \"bold 20px sans-serif\";\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.fillText(`Goal: ${level.target}`, tx, ty - 6);\n    // small helper text\n    ctx.font = \"13px sans-serif\";\n    ctx.fillStyle = \"#CFF2FA\";\n    ctx.fillText(\"Make the dials add up to the Goal\", tx, ty + 14);\n    ctx.restore();\n  }\n\n  function drawMeter() {\n    // attempts and progress\n    ctx.save();\n    ctx.fillStyle = \"#2B5663\";\n    ctx.font = \"14px sans-serif\";\n    ctx.textAlign = \"left\";\n    ctx.textBaseline = \"top\";\n    const level = LEVELS[state.levelIndex];\n    if (state.running && level) {\n      ctx.fillText(`Level ${state.levelIndex + 1} of ${LEVELS.length}`, 12, 8);\n      ctx.fillText(`Attempts: ${state.attempts}`, 12, 28);\n    } else {\n      ctx.fillText(`Machine Workshop`, 12, 8);\n      ctx.fillText(`Click Start to begin`, 12, 28);\n    }\n    ctx.restore();\n  }\n\n  function drawAudioIndicator() {\n    ctx.save();\n    ctx.textAlign = \"right\";\n    ctx.textBaseline = \"top\";\n    ctx.fillStyle = \"#2B5165\";\n    ctx.font = \"13px sans-serif\";\n    ctx.fillText(`Audio: ${audioAllowed && !audioError ? \"On\" : \"Off\"}`, WIDTH - 12, 8);\n    // visual speaker icon\n    const x = WIDTH - 85;\n    const y = 10;\n    ctx.strokeStyle = \"#2B5165\";\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.moveTo(x + 2, y + 8);\n    ctx.lineTo(x + 8, y + 8);\n    ctx.lineTo(x + 12, y + 4);\n    ctx.lineTo(x + 12, y + 12);\n    ctx.closePath();\n    ctx.stroke();\n    if (audioAllowed && !audioError) {\n      ctx.beginPath();\n      ctx.arc(x + 16, y + 8, 6, -0.6, 0.6);\n      ctx.stroke();\n    }\n    ctx.restore();\n  }\n\n  function drawHintBox() {\n    if (!state.showHint || !state.running) return;\n    ctx.save();\n    const w = 380;\n    const h = 60;\n    const x = WIDTH - w - 16;\n    const y = HEIGHT - h - 16;\n    ctx.fillStyle = \"rgba(255,255,255,0.95)\";\n    roundRect(ctx, x, y, w, h, 12);\n    ctx.fill();\n    ctx.strokeStyle = \"#CDEFF7\";\n    ctx.stroke();\n    ctx.fillStyle = \"#075B6E\";\n    ctx.font = \"14px sans-serif\";\n    ctx.textAlign = \"left\";\n    ctx.textBaseline = \"middle\";\n    ctx.fillText(\"Hint: \" + getHint(), x + 16, y + h / 2);\n    ctx.restore();\n  }\n\n  function roundRect(ctx, x, y, w, h, r) {\n    ctx.beginPath();\n    ctx.moveTo(x + r, y);\n    ctx.lineTo(x + w - r, y);\n    ctx.quadraticCurveTo(x + w, y, x + w, y + r);\n    ctx.lineTo(x + w, y + h - r);\n    ctx.quadraticCurveTo(x + w, y + h, x + w - r, y + h);\n    ctx.lineTo(x + r, y + h);\n    ctx.quadraticCurveTo(x, y + h, x, y + h - r);\n    ctx.lineTo(x, y + r);\n    ctx.quadraticCurveTo(x, y, x + r, y);\n    ctx.closePath();\n  }\n\n  // --- Game Loop ---\n  let lastTime = performance.now();\n\n  function updateAndDraw(now) {\n    const dt = (now - lastTime) / 1000;\n    lastTime = now;\n    clear();\n    state.animT += dt * 1000;\n\n    drawBackgroundDecor(state.animT);\n\n    if (!state.running) {\n      // Idle screen - show machine silhouette and friendly invitation\n      drawIdleScene(state.animT);\n    } else {\n      // Draw machine and dials\n      drawTarget(state.animT);\n      drawDials(state.animT);\n      drawHintBox();\n    }\n\n    drawMeter();\n    drawAudioIndicator();\n\n    // Subtle bouncing bolts as decoration (wacky elements)\n    drawBolts(state.animT);\n\n    requestAnimationFrame(updateAndDraw);\n  }\n\n  function drawIdleScene(t) {\n    ctx.save();\n    // Big happy machine - wacky and calming\n    const cx = WIDTH / 2;\n    const cy = HEIGHT / 2;\n    // main body\n    ctx.fillStyle = \"#EAF9FB\";\n    roundRect(ctx, cx - 210, cy - 100, 420, 200, 24);\n    ctx.fill();\n    ctx.strokeStyle = \"#BFE8F2\";\n    ctx.stroke();\n\n    // Central gear\n    drawGears(cx, cy - 10, 72, 12, t * 0.0011, \"#D6F1F6\");\n    // small displays\n    ctx.fillStyle = \"#1B5165\";\n    ctx.font = \"bold 22px sans-serif\";\n    ctx.textAlign = \"center\";\n    ctx.fillText(\"Machine Math\", cx, cy + 110);\n    ctx.fillStyle = \"#2B5165\";\n    ctx.font = \"14px sans-serif\";\n    ctx.fillText(\"Fix the machines by adding the dials. Click Start!\", cx, cy + 136);\n    ctx.restore();\n  }\n\n  function drawBolts(t) {\n    // Decorative bolts that float down near left side - wacky friendly sparks\n    ctx.save();\n    for (let i = 0; i < 8; i++) {\n      const x = 24 + ((i * 97) % 440);\n      const y = ((t * 0.03 + i * 57) % HEIGHT) - 80;\n      ctx.fillStyle = i % 2 === 0 ? \"#FFD27F\" : \"#FAF2D2\";\n      ctx.beginPath();\n      // simple bolt shape\n      ctx.moveTo(x, y);\n      ctx.lineTo(x + 8, y + 18);\n      ctx.lineTo(x + 2, y + 18);\n      ctx.lineTo(x + 12, y + 36);\n      ctx.lineTo(x - 4, y + 24);\n      ctx.lineTo(x + 4, y + 24);\n      ctx.closePath();\n      ctx.globalAlpha = 0.9 - i * 0.08;\n      ctx.fill();\n    }\n    ctx.restore();\n  }\n\n  // Start animation loop\n  requestAnimationFrame(updateAndDraw);\n\n  // Accessibility: focus canvas for keyboard after clicking start\n  canvas.addEventListener(\"focus\", () => {\n    // Announce current state\n    if (!state.running) {\n      liveRegion.textContent = \"Press Start to begin the Machine Math game.\";\n    } else {\n      liveRegion.textContent = `Level ${state.levelIndex + 1}. Goal ${LEVELS[state.levelIndex].target}. Use arrow keys to change dials.`;\n    }\n  });\n\n  // Ensure Start button focuses canvas when starting\n  startButton.addEventListener(\"keyup\", (ev) => {\n    if (ev.key === \"Enter\" || ev.key === \" \") {\n      canvas.focus();\n    }\n  });\n\n  // Initialize start state text\n  liveRegion.textContent = \"Welcome to Machine Math. Click Start to begin. Use keyboard or mouse.\";\n\n  // Error handling for audio context creation upon user gesture if blocked\n  window.addEventListener(\"unhandledrejection\", (e) => {\n    console.warn(\"Unhandled promise rejection:\", e.reason);\n  });\n\n  // Ensure audio is initialized on first user interaction with control buttons\n  function attachOneTimeAudioInit() {\n    const handler = () => {\n      safeCreateAudioContextOnGesture();\n      document.removeEventListener(\"pointerdown\", handler);\n      document.removeEventListener(\"keydown\", handler);\n    };\n    document.addEventListener(\"pointerdown\", handler, { passive: true });\n    document.addEventListener(\"keydown\", handler, { passive: true });\n  }\n  attachOneTimeAudioInit();\n\n  // Make sure to handle window blur/resume for audio if available\n  window.addEventListener(\"blur\", () => {\n    if (audioCtx && audioCtx.state === \"running\") {\n      try {\n        audioCtx.suspend();\n      } catch (err) {\n        // ignore\n      }\n    }\n  });\n  window.addEventListener(\"focus\", () => {\n    if (audioAllowed && audioCtx && audioCtx.state === \"suspended\") {\n      try {\n        audioCtx.resume();\n      } catch (err) {\n        // ignore\n      }\n    }\n  });\n\n  // Provide a safe public API on the canvas element for testing / accessibility\n  canvas.gameAPI = {\n    startGame,\n    toggleAudio,\n    submitAttempt,\n    getState: () => JSON.parse(JSON.stringify(state)),\n    levels: LEVELS\n  };\n\n  // Final note in console for debugging (not required)\n  console.log(\"Machine Math Game initialized inside #\" + STAGE_ID);\n})();\n---\n",
  "improve_response_tokens": 19150,
  "formatted_code": true,
  "formatting_response_tokens": 20642,
  "final_functionality": {
    "score": 8,
    "max_score": 8,
    "percentage": 100.0,
    "passing": true,
    "issues": [],
    "warnings": []
  }
}