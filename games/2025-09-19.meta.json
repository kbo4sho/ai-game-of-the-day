{
  "generated_date": "2025-09-19",
  "generated_timestamp": "2025-09-19T00:26:00.046004",
  "model": "gpt-5-mini",
  "theme": "machines",
  "prompt": "You are an expert educational game designer. You will generate a fun, playable math game in JavaScript for children ages 7 to 9, focused on foundational concepts presented in a way that is engaging and fun. Today's theme: machines\n\nThe game must:\n\u2022 Be beatable.\n\u2022 Use visually calming and interesting and wacky elements.\n\u2022 Include sound, using the Web Audio API for correct/incorrect feedback, gentle background effects, or interactions. Use an audio context.\n\u2022 Render entirely inside the existing HTML element with ID game-of-the-day-stage. You may create a canvas element inside it .\n\u2022 Have a game area exactly 720px wide by 480px tall.\n\u2022 Be written in clean, readable JavaScript with proper formatting, indentation, and comments.\n\u2022 Use modern JavaScript practices and avoid minification.\n\u2022 Include proper error handling for audio and resource loading.\n\u2022 Be accessible: include keyboard controls, text alternatives, visual cues for audio, clear instructions, and error handling.\n\u2022 Use ONLY canvas-drawn graphics or 3js and Web Audio API - NO external image URLs, NO external audio files, NO external dependencies.\n\u2022 Create all visual elements using canvas drawing methods (rect, arc, fillText, etc.) or 3js.\n\u2022 Generate all sounds using Web Audio API oscillators and filters.\n\u2022 Include proper error handling for audio context creation.\n\u2022 Output only JavaScript code. No extra explanation, no markdown formatting, no code blocks, no HTML, no CSS.\n\u2022 Do not wrap the code in ```javascript or any other markdown formatting.",
  "response_tokens": 7655,
  "game_filename": "2025-09-19.js",
  "game_size_bytes": 23327,
  "functionality": {
    "score": 8,
    "max_score": 8,
    "percentage": 100.0,
    "passing": true,
    "issues": [],
    "warnings": []
  },
  "dependencies": {
    "has_external_deps": false,
    "issues": [],
    "warnings": [],
    "canvas_methods_used": 6
  },
  "improved_visuals_audio": true,
  "improve_prompt": "You are an expert educational game designer. \nTake the following JavaScript game code and improve ONLY the visuals and audio. \nDo not change the game mechanics or math logic. \nEnhance the visual appeal (colors, animations, backgrounds, characters), avoid overstimulation with sounds and visuals, and add or improve sound effects and background audio. \nRender entirely inside the existing HTML element with ID game-of-the-day-stage. You may create a canvas element inside it (do not include angle brackets in text instructions).\nHave a game area exactly 720px wide by 480px tall.\nBe written in clean, readable JavaScript with proper formatting, indentation, and comments.\nUse modern JavaScript practices and avoid minification.\nInclude proper error handling for audio and resource loading.\nUse ONLY canvas-drawn graphics and Web Audio API - NO external image URLs, NO external audio files, NO external dependencies.\nCreate all visual elements using canvas drawing methods (rect, arc, fillText, etc.).\nGenerate all sounds using Web Audio API oscillators and filters.\nInclude proper error handling for audio context creation.\nOutput only JavaScript code. No extra explanation, no markdown formatting, no code blocks.\nDo not wrap the code in ```javascript or any other markdown formatting.\n\n---\n// Machine Math: A calming, wacky educational game for ages 7-9\n// Renders inside element with id \"game-of-the-day-stage\"\n// Uses Canvas and Web Audio API only. No external resources.\n// Accessible keyboard controls and visual/audio feedback included.\n\n// Immediately invoked to avoid polluting global scope\n(function () {\n  // Find the stage element and create canvas\n  const stage = document.getElementById('game-of-the-day-stage');\n  if (!stage) {\n    console.error('Game stage element with id \"game-of-the-day-stage\" not found.');\n    return;\n  }\n  // Clear stage and create canvas\n  stage.innerHTML = '';\n  const canvas = document.createElement('canvas');\n  canvas.width = 720;\n  canvas.height = 480;\n  canvas.style.width = '720px';\n  canvas.style.height = '480px';\n  canvas.setAttribute('tabindex', '0'); // make focusable for keyboard controls\n  canvas.setAttribute('role', 'img');\n  canvas.setAttribute('aria-label', 'Machine Math game. Use mouse or keys 1-5 to select gears, Enter to submit, Space to toggle audio.');\n  stage.appendChild(canvas);\n\n  const ctx = canvas.getContext('2d');\n\n  // Utility: clamp\n  const clamp = (v, a, b) => Math.max(a, Math.min(b, v));\n\n  // Audio setup with error handling\n  let audioSupported = true;\n  let audioEnabled = false; // user must enable audio (gesture) for most browsers\n  let audioContext = null;\n  let masterGain = null;\n  let bgGain = null;\n  let bgOsc = null;\n  try {\n    const AudioCtx = window.AudioContext || window.webkitAudioContext;\n    if (!AudioCtx) {\n      audioSupported = false;\n      console.warn('Web Audio API not supported in this browser.');\n    } else {\n      audioContext = new AudioCtx();\n      masterGain = audioContext.createGain();\n      masterGain.gain.value = 0.9;\n      masterGain.connect(audioContext.destination);\n\n      // gentle background hum (starts silent until enabled)\n      bgGain = audioContext.createGain();\n      bgGain.gain.value = 0.0;\n      bgOsc = audioContext.createOscillator();\n      bgOsc.type = 'sine';\n      bgOsc.frequency.value = 110; // low calming hum\n      const bgFilter = audioContext.createBiquadFilter();\n      bgFilter.type = 'lowpass';\n      bgFilter.frequency.value = 400;\n      bgOsc.connect(bgFilter);\n      bgFilter.connect(bgGain);\n      bgGain.connect(masterGain);\n      try {\n        bgOsc.start();\n      } catch (e) {\n        // some browsers require start later; handle gracefully\n        setTimeout(() => {\n          try { bgOsc.start(); } catch (e2) {}\n        }, 100);\n      }\n    }\n  } catch (err) {\n    audioSupported = false;\n    console.error('Error creating AudioContext:', err);\n  }\n\n  function enableAudioOnGesture() {\n    if (!audioSupported || audioEnabled) return;\n    // resume context on user gesture\n    if (audioContext && audioContext.state === 'suspended') {\n      audioContext.resume().then(() => {\n        audioEnabled = true;\n        if (bgGain) bgGain.gain.linearRampToValueAtTime(0.06, audioContext.currentTime + 0.5);\n        draw(); // update visuals\n      }).catch((e) => {\n        console.warn('AudioContext resume failed:', e);\n      });\n    } else {\n      audioEnabled = true;\n      if (bgGain) bgGain.gain.value = 0.06;\n    }\n  }\n\n  // Sound generators with safety checks\n  function playTone(freq, duration = 0.4, type = 'sine', volume = 0.12) {\n    if (!audioSupported || !audioContext || !audioEnabled) return;\n    try {\n      const t0 = audioContext.currentTime;\n      const osc = audioContext.createOscillator();\n      const gain = audioContext.createGain();\n      osc.type = type;\n      osc.frequency.value = freq;\n      gain.gain.value = volume;\n      const filter = audioContext.createBiquadFilter();\n      filter.type = 'lowpass';\n      filter.frequency.value = Math.max(300, freq * 2);\n      osc.connect(filter);\n      filter.connect(gain);\n      gain.connect(masterGain);\n      osc.start(t0);\n      gain.gain.setValueAtTime(volume, t0);\n      gain.gain.exponentialRampToValueAtTime(0.0001, t0 + duration);\n      osc.stop(t0 + duration + 0.02);\n    } catch (e) {\n      console.warn('playTone error:', e);\n    }\n  }\n\n  function playChime() {\n    // pleasant chord\n    if (!audioSupported || !audioContext || !audioEnabled) return;\n    try {\n      const base = 440;\n      playTone(base, 0.25, 'sine', 0.09);\n      setTimeout(() => playTone(base * 1.5, 0.35, 'sine', 0.08), 50);\n      setTimeout(() => playTone(base * 2, 0.4, 'triangle', 0.06), 110);\n    } catch (e) {\n      console.warn('playChime error:', e);\n    }\n  }\n\n  function playBuzz() {\n    if (!audioSupported || !audioContext || !audioEnabled) return;\n    try {\n      const t0 = audioContext.currentTime;\n      const osc = audioContext.createOscillator();\n      const gain = audioContext.createGain();\n      osc.type = 'square';\n      osc.frequency.value = 120;\n      gain.gain.value = 0.16;\n      const filter = audioContext.createBiquadFilter();\n      filter.type = 'lowpass';\n      filter.frequency.value = 800;\n      osc.connect(filter);\n      filter.connect(gain);\n      gain.connect(masterGain);\n      osc.start(t0);\n      gain.gain.exponentialRampToValueAtTime(0.0001, t0 + 0.25);\n      osc.stop(t0 + 0.26);\n    } catch (e) {\n      console.warn('playBuzz error:', e);\n    }\n  }\n\n  // Game state and logic\n  const game = {\n    round: 1,\n    maxRounds: 6,\n    target: 0,\n    availableGears: [], // {value, x, y, radius, id}\n    selected: [], // ids\n    solvedCount: 0,\n    level: 1,\n    message: '',\n    messageTimer: 0,\n    soundOn: audioSupported && audioEnabled,\n    running: true, // allow input\n  };\n\n  // Generate solvable gear set: guarantee at least one combination equals target\n  function generateRound(roundNum) {\n    game.selected = [];\n    game.message = '';\n    game.messageTimer = 0;\n    const difficulty = clamp(roundNum, 1, 6);\n    // target between 5 and 15 increasing with difficulty\n    const minTarget = 5 + Math.floor((difficulty - 1) * 1.5);\n    const maxTarget = 10 + difficulty * 1;\n    const target = Math.floor(Math.random() * (maxTarget - minTarget + 1)) + minTarget;\n\n    // Pick a base solution of 2 or 3 numbers\n    const numPieces = Math.random() < 0.6 ? 2 : 3;\n    const pieces = [];\n    let remaining = target;\n    for (let i = 0; i < numPieces - 1; i++) {\n      // pick random 1..(remaining - (numPieces - i - 1))\n      const maxPick = Math.max(1, remaining - (numPieces - i - 1));\n      const pick = Math.floor(Math.random() * Math.min(9, maxPick)) + 1;\n      pieces.push(pick);\n      remaining -= pick;\n    }\n    pieces.push(remaining); // last piece\n\n    // Now create extra filler gears so total count is 5\n    const totalGears = 5;\n    const gears = pieces.slice();\n    while (gears.length < totalGears) {\n      // make a filler not accidentally solve the target alone\n      let val;\n      do {\n        val = Math.floor(Math.random() * 9) + 1;\n      } while (gears.includes(val) && Math.random() > 0.6);\n      gears.push(val);\n    }\n    // shuffle gears\n    for (let i = gears.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [gears[i], gears[j]] = [gears[j], gears[i]];\n    }\n    // place gears visually\n    const gearObjs = [];\n    const startX = 120;\n    const startY = 250;\n    const spacing = 110;\n    for (let i = 0; i < gears.length; i++) {\n      const gx = startX + i * spacing;\n      const gy = startY + ((i % 2) * 14 - 7); // slight wobble\n      gearObjs.push({\n        value: gears[i],\n        x: gx,\n        y: gy,\n        radius: 36,\n        id: 'g' + Date.now() + '_' + i,\n      });\n    }\n\n    game.target = target;\n    game.availableGears = gearObjs;\n    game.level = difficulty;\n  }\n\n  // Start first round\n  generateRound(game.round);\n\n  // Helper: sum of selected\n  function currentSum() {\n    return game.selected.reduce((s, id) => {\n      const g = game.availableGears.find(gg => gg.id === id);\n      return s + (g ? g.value : 0);\n    }, 0);\n  }\n\n  // Attempt submission\n  function submitSelection() {\n    if (!game.running) return;\n    const sum = currentSum();\n    if (sum === game.target) {\n      game.solvedCount++;\n      game.message = 'Nice! Machine hums happily!';\n      game.messageTimer = Date.now();\n      playChime();\n      // Visual: animate little confetti wacky bits\n      // Prepare next round or win\n      if (game.round >= game.maxRounds) {\n        game.running = false;\n        setTimeout(() => showVictory(), 800);\n      } else {\n        // advance round after short delay\n        setTimeout(() => {\n          game.round++;\n          generateRound(game.round);\n        }, 900);\n      }\n    } else {\n      game.message = 'Not right yet! Check the sum.';\n      game.messageTimer = Date.now();\n      playBuzz();\n      // Negative feedback: keep playing\n    }\n  }\n\n  function showVictory() {\n    game.message = 'You fixed all the machines! You win!';\n    game.messageTimer = Date.now();\n    playChime();\n  }\n\n  // UI interactions\n  function toggleGearSelection(id) {\n    if (!game.running) return;\n    const idx = game.selected.indexOf(id);\n    if (idx >= 0) {\n      game.selected.splice(idx, 1);\n    } else {\n      // limit selection to 3 pieces to keep simple\n      if (game.selected.length >= 3) {\n        game.message = 'Too many gears! Try fewer pieces.';\n        game.messageTimer = Date.now();\n        playBuzz();\n        return;\n      } else {\n        game.selected.push(id);\n      }\n    }\n    // small click sound\n    playTone(660, 0.08, 'square', 0.04);\n  }\n\n  // Reset / New game\n  function resetGame() {\n    game.round = 1;\n    game.solvedCount = 0;\n    game.running = true;\n    generateRound(game.round);\n  }\n\n  // Mouse handling\n  canvas.addEventListener('click', (e) => {\n    const rect = canvas.getBoundingClientRect();\n    const mx = (e.clientX - rect.left) * (canvas.width / rect.width);\n    const my = (e.clientY - rect.top) * (canvas.height / rect.height);\n\n    // Check for: start/resume audio button (top-right), speaker icon\n    if (mx > 640 && mx < 716 && my > 12 && my < 48) {\n      // toggle audio\n      if (!audioSupported) {\n        game.message = 'Audio not supported in your browser.';\n        game.messageTimer = Date.now();\n      } else {\n        if (!audioEnabled) {\n          enableAudioOnGesture();\n          game.message = 'Audio enabled.';\n          game.messageTimer = Date.now();\n          game.soundOn = true;\n        } else {\n          // toggle mute\n          game.soundOn = !game.soundOn;\n          if (masterGain) masterGain.gain.value = game.soundOn ? 0.9 : 0.0;\n          game.message = game.soundOn ? 'Sound on' : 'Sound off';\n          game.messageTimer = Date.now();\n        }\n      }\n      return;\n    }\n\n    // Check for submit button area\n    if (mx > 540 && mx < 700 && my > 360 && my < 440) {\n      submitSelection();\n      return;\n    }\n\n    // Restart button on victory area\n    if (!game.running && mx > 300 && mx < 420 && my > 300 && my < 340) {\n      resetGame();\n      playTone(520, 0.12, 'sine', 0.08);\n      return;\n    }\n\n    // Check gears\n    for (let g of game.availableGears) {\n      const dx = mx - g.x;\n      const dy = my - g.y;\n      if (dx * dx + dy * dy <= g.radius * g.radius) {\n        toggleGearSelection(g.id);\n        return;\n      }\n    }\n  });\n\n  // Keyboard controls\n  canvas.addEventListener('keydown', (e) => {\n    // Allow space to enable/resume audio\n    if (e.code === 'Space') {\n      e.preventDefault();\n      if (!audioSupported) {\n        game.message = 'Audio not supported.';\n        game.messageTimer = Date.now();\n      } else {\n        if (!audioEnabled) {\n          enableAudioOnGesture();\n          game.message = 'Audio enabled.';\n          game.messageTimer = Date.now();\n          game.soundOn = true;\n        } else {\n          game.soundOn = !game.soundOn;\n          if (masterGain) masterGain.gain.value = game.soundOn ? 0.9 : 0.0;\n          game.message = game.soundOn ? 'Sound on' : 'Sound off';\n          game.messageTimer = Date.now();\n        }\n      }\n      return;\n    }\n\n    // Numbers 1-5 select corresponding gears\n    if (/Digit[1-5]/.test(e.code) || /Numpad[1-5]/.test(e.code)) {\n      e.preventDefault();\n      const num = parseInt(e.key, 10);\n      if (!isNaN(num) && game.availableGears[num - 1]) {\n        toggleGearSelection(game.availableGears[num - 1].id);\n      }\n      return;\n    }\n    // Enter to submit\n    if (e.code === 'Enter') {\n      e.preventDefault();\n      submitSelection();\n      return;\n    }\n    // R to restart\n    if (e.code === 'KeyR') {\n      e.preventDefault();\n      resetGame();\n    }\n  });\n\n  // Pointer move: for hover effects\n  let pointer = { x: -1, y: -1, over: null };\n  canvas.addEventListener('mousemove', (e) => {\n    const rect = canvas.getBoundingClientRect();\n    pointer.x = (e.clientX - rect.left) * (canvas.width / rect.width);\n    pointer.y = (e.clientY - rect.top) * (canvas.height / rect.height);\n    pointer.over = null;\n    for (let i = 0; i < game.availableGears.length; i++) {\n      const g = game.availableGears[i];\n      const dx = pointer.x - g.x;\n      const dy = pointer.y - g.y;\n      if (dx * dx + dy * dy <= g.radius * g.radius) {\n        pointer.over = i;\n        break;\n      }\n    }\n  });\n  canvas.addEventListener('mouseleave', () => {\n    pointer.x = -1; pointer.y = -1; pointer.over = null;\n  });\n\n  // Drawing helpers\n  function drawRoundedRect(x, y, w, h, r) {\n    ctx.beginPath();\n    ctx.moveTo(x + r, y);\n    ctx.arcTo(x + w, y, x + w, y + h, r);\n    ctx.arcTo(x + w, y + h, x, y + h, r);\n    ctx.arcTo(x, y + h, x, y, r);\n    ctx.arcTo(x, y, x + w, y, r);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  function drawGear(x, y, radius, teeth, angle, fillColor, strokeColor) {\n    ctx.save();\n    ctx.translate(x, y);\n    ctx.rotate(angle);\n    // draw base circle\n    ctx.beginPath();\n    ctx.fillStyle = fillColor;\n    ctx.strokeStyle = strokeColor;\n    ctx.lineWidth = 3;\n    ctx.arc(0, 0, radius * 0.6, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.stroke();\n\n    // teeth\n    for (let i = 0; i < teeth; i++) {\n      const a = (i / teeth) * Math.PI * 2;\n      const x1 = Math.cos(a) * radius * 0.7;\n      const y1 = Math.sin(a) * radius * 0.7;\n      const x2 = Math.cos(a) * radius;\n      const y2 = Math.sin(a) * radius;\n      ctx.beginPath();\n      ctx.moveTo(x1, y1);\n      ctx.lineTo(x2, y2);\n      ctx.lineWidth = 6;\n      ctx.strokeStyle = strokeColor;\n      ctx.stroke();\n    }\n\n    // center bolt\n    ctx.beginPath();\n    ctx.fillStyle = '#222';\n    ctx.arc(0, 0, radius * 0.18, 0, Math.PI * 2);\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  // Draw full scene\n  function draw() {\n    // background\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // calming gradient sky\n    const grad = ctx.createLinearGradient(0, 0, 0, 480);\n    grad.addColorStop(0, '#f7fbff');\n    grad.addColorStop(1, '#eaf6f9');\n    ctx.fillStyle = grad;\n    ctx.fillRect(0, 0, 720, 480);\n\n    // wavy ground\n    ctx.beginPath();\n    ctx.moveTo(0, 360);\n    for (let x = 0; x <= 720; x += 10) {\n      ctx.lineTo(x, 360 + Math.sin(x * 0.02) * 10 + 4 * Math.sin(Date.now() * 0.002 + x * 0.01));\n    }\n    ctx.lineTo(720, 480);\n    ctx.lineTo(0, 480);\n    ctx.closePath();\n    ctx.fillStyle = '#dbeef2';\n    ctx.fill();\n\n    // Title\n    ctx.fillStyle = '#103b48';\n    ctx.font = '22px Comic Sans MS, Arial';\n    ctx.textAlign = 'left';\n    ctx.fillText('Machine Math \u2014 Fix the Wacky Machines!', 18, 34);\n\n    // Speaker / audio toggle icon (top-right)\n    ctx.save();\n    ctx.beginPath();\n    ctx.fillStyle = audioSupported ? (audioEnabled && game.soundOn ? '#1a8f6b' : '#f0a500') : '#c0c0c0';\n    ctx.strokeStyle = '#0b2b32';\n    ctx.lineWidth = 2;\n    ctx.roundRect = function (x, y, w, h, r) {\n      this.moveTo(x + r, y);\n      this.arcTo(x + w, y, x + w, y + h, r);\n      this.arcTo(x + w, y + h, x, y + h, r);\n      this.arcTo(x, y + h, x, y, r);\n      this.arcTo(x, y, x + w, y, r);\n    };\n    ctx.beginPath();\n    ctx.roundRect(640, 12, 74, 36, 8);\n    ctx.fill();\n    ctx.stroke();\n\n    // speaker symbol\n    ctx.fillStyle = '#052425';\n    ctx.beginPath();\n    ctx.moveTo(654, 30);\n    ctx.lineTo(666, 22);\n    ctx.lineTo(666, 38);\n    ctx.closePath();\n    ctx.fill();\n\n    // sound waves\n    ctx.beginPath();\n    ctx.strokeStyle = '#052425';\n    ctx.lineWidth = 2;\n    if (audioSupported && audioEnabled && game.soundOn) {\n      ctx.arc(676, 30, 8, -0.6, 0.6);\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.arc(686, 30, 12, -0.6, 0.6);\n      ctx.stroke();\n    } else {\n      // muted cross\n      ctx.moveTo(669, 20);\n      ctx.lineTo(703, 40);\n      ctx.moveTo(703, 20);\n      ctx.lineTo(669, 40);\n      ctx.stroke();\n    }\n    ctx.restore();\n\n    // Draw machine body: a whimsical robot\n    ctx.save();\n    ctx.translate(120, 120);\n    // body shadow\n    ctx.fillStyle = 'rgba(0,0,0,0.06)';\n    ctx.fillRect(-30, 60, 420, 160);\n    // body\n    ctx.beginPath();\n    ctx.fillStyle = '#f7dfc6';\n    ctx.strokeStyle = '#b5824d';\n    ctx.lineWidth = 4;\n    ctx.roundRect = function (x, y, w, h, r) {\n      this.moveTo(x + r, y);\n      this.arcTo(x + w, y, x + w, y + h, r);\n      this.arcTo(x + w, y + h, x, y + h, r);\n      this.arcTo(x, y + h, x, y, r);\n      this.arcTo(x, y, x + w, y, r);\n    };\n    ctx.beginPath();\n    ctx.roundRect(0, 0, 360, 200, 24);\n    ctx.fill();\n    ctx.stroke();\n\n    // control screen\n    ctx.fillStyle = '#e9f9ff';\n    ctx.fillRect(20, 20, 250, 110);\n    ctx.strokeStyle = '#89b4c1';\n    ctx.strokeRect(20, 20, 250, 110);\n\n    // cute dial\n    ctx.beginPath();\n    ctx.fillStyle = '#ffd3a3';\n    ctx.arc(310, 60, 38, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.stroke();\n\n    ctx.restore();\n\n    // Display target number in machine screen\n    ctx.fillStyle = '#02323a';\n    ctx.font = '46px Comic Sans MS, Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('Target: ' + game.target, 220, 90);\n\n    // little instruction text\n    ctx.fillStyle = '#05444f';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'left';\n    ctx.fillText('Choose up to 3 gears so their numbers add to the target.', 18, 70);\n    ctx.fillText('Click a gear or press keys 1-5 to pick. Press Enter to submit.', 18, 88);\n    ctx.fillText('Rounds: ' + game.round + ' / ' + game.maxRounds + '   Solved: ' + game.solvedCount, 18, 106);\n\n    // Draw gears (available)\n    for (let i = 0; i < game.availableGears.length; i++) {\n      const g = game.availableGears[i];\n      // wobble gently to look wacky\n      const wobble = Math.sin(Date.now() * 0.002 + i) * 0.08;\n      const selected = game.selected.indexOf(g.id) >= 0;\n      const hover = pointer.over === i;\n      const baseColor = selected ? '#ffd27f' : '#fff';\n      const strokeColor = selected ? '#c86e00' : '#4b6b72';\n      // gear body\n      drawGear(g.x, g.y - (selected ? 6 : 0), g.radius + (hover ? 4 : 0), 12 + (i % 3), wobble, baseColor, strokeColor);\n\n      // number\n      ctx.fillStyle = '#052425';\n      ctx.font = selected ? 'bold 22px Arial' : 'bold 20px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(g.value, g.x, g.y + 6 - (selected ? 6 : 0));\n\n      // label index (1-5)\n      ctx.fillStyle = '#064851';\n      ctx.font = '12px Arial';\n      ctx.fillText((i + 1).toString(), g.x + g.radius - 10, g.y + g.radius - 6);\n    }\n\n    // Draw conveyor belt under gears\n    ctx.fillStyle = '#d1e9ed';\n    ctx.fillRect(40, 302, 640, 36);\n    ctx.strokeStyle = '#b0cfd3';\n    ctx.strokeRect(40, 302, 640, 36);\n\n    // Submit button area drawn as big \"Run Machine\"\n    ctx.save();\n    ctx.beginPath();\n    ctx.fillStyle = '#7fd3c6';\n    ctx.strokeStyle = '#2b6e63';\n    ctx.lineWidth = 3;\n    drawRoundedRect(540, 360, 160, 80, 14);\n    ctx.fill();\n    ctx.stroke();\n\n    ctx.fillStyle = '#033c36';\n    ctx.font = '22px Comic Sans MS, Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('Run Machine', 620, 402);\n    ctx.font = '14px Arial';\n    ctx.fillText('Enter or Click', 620, 426);\n    ctx.restore();\n\n    // current sum display\n    ctx.fillStyle = '#043b3f';\n    ctx.font = '18px Arial';\n    ctx.textAlign = 'left';\n    ctx.fillText('Current Sum: ' + currentSum(), 18, 160);\n\n    // visual meter: progress toward target\n    const sum = currentSum();\n    const ratio = clamp(sum / Math.max(1, game.target), 0, 1);\n    ctx.fillStyle = '#d0f0e2';\n    ctx.fillRect(18, 172, 300, 18);\n    ctx.fillStyle = '#24a77a';\n    ctx.fillRect(18, 172, 300 * ratio, 18);\n    ctx.strokeStyle = '#0b2b28';\n    ctx.strokeRect(18, 172, 300, 18);\n\n    // message box\n    if (game.message && Date.now() - game.messageTimer < 4000) {\n      ctx.fillStyle = 'rgba(255,255,255,0.88)';\n      ctx.strokeStyle = '#7aa8ad';\n      ctx.lineWidth = 2;\n      drawRoundedRect(360, 20, 340, 72, 12);\n      ctx.fill();\n      ctx.stroke();\n\n      ctx.fillStyle = '#063b3d';\n      ctx.font = '16px Arial';\n      ctx.textAlign = 'left';\n      ctx.fillText(game.message, 376, 50);\n    }\n\n    // audio state hint\n    ctx.fillStyle = '#05444f';\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'left';\n    if (!audioSupported) {\n      ctx.fillText('Audio: not supported', 380, 130);\n    } else {\n      ctx.fillText('Audio: ' + (audioEnabled ? (game.soundOn ? 'on' : 'muted') : 'off (press Space or click speaker)'), 380, 130);\n    }\n\n    // If game finished, show celebration panel\n    if (!game.running) {\n      ctx.fillStyle = 'rgba(3,50,54,0.85)';\n      ctx.fillRect(120, 220, 480, 170);\n      ctx.fillStyle = '#fff';\n      ctx.font = '28px Comic Sans MS, Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText('All Machines Fixed!', 360, 270);\n      ctx.font = '18px Arial';\n      ctx.fillText('You helped the machines hum happily. Great job!', 360, 300);\n      // restart button\n      ctx.fillStyle = '#ffd27f';\n      drawRoundedRect(300, 300, 120, 40, 10);\n      ctx.fillStyle = '#052425';\n      ctx.font = '16px Arial';\n      ctx.fillText('Play Again', 360, 328);\n    }\n\n    // Accessibility text overlay for screen readers (update aria)\n    canvas.setAttribute('aria-label', `Machine Math. Round ${game.round} of ${game.maxRounds}. Target ${game.target}. Current sum ${sum}. Use keys 1 to ${game.availableGears.length} to pick gear, Enter to run machine. Audio ${audioSupported ? (audioEnabled ? (game.soundOn ? 'on' : 'muted') : 'off') : 'not supported'}.`);\n\n    // request next frame\n    requestAnimationFrame(draw);\n  }\n\n  // Kick off animation\n  draw();\n\n  // Small visual indicator if audio context errors occurred\n  if (!audioSupported) {\n    game.message = 'Your browser does not support Web Audio. Sound disabled.';\n    game.messageTimer = Date.now();\n  } else {\n    // If audio context exists but is suspended, instruct to press space\n    if (audioContext && audioContext.state === 'suspended') {\n      game.message = 'Press Space or click the speaker to enable sound.';\n      game.messageTimer = Date.now();\n    } else {\n      // Audio may be running; set audioEnabled true by default in some browsers\n      audioEnabled = audioContext ? audioContext.state === 'running' : false;\n      game.soundOn = audioEnabled;\n      if (audioEnabled && masterGain) masterGain.gain.value = 0.9;\n    }\n  }\n\n  // Ensure canvas gets focus for keyboard controls\n  setTimeout(() => {\n    try { canvas.focus(); } catch (e) {}\n  }, 200);\n\n  // Provide a small tutorial modal on first load (drawn inside canvas as message)\n  game.message = 'Welcome! Use keys 1-5 or click gears, press Enter to run. Fix all machines!';\n  game.messageTimer = Date.now();\n})();\n---\n",
  "improve_response_tokens": 16309,
  "formatted_code": true,
  "formatting_response_tokens": 17624,
  "final_functionality": {
    "score": 8,
    "max_score": 8,
    "percentage": 100.0,
    "passing": true,
    "issues": [],
    "warnings": []
  }
}